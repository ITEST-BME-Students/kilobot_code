
build/synced_flashing.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	5f 03       	fmul	r21, r23
      6a:	43 03       	mulsu	r20, r19
      6c:	17 03       	mulsu	r17, r23
      6e:	0e 03       	fmul	r16, r22
      70:	14 03       	mulsu	r17, r20
      72:	bd 03       	fmulsu	r19, r21
      74:	b2 03       	fmuls	r19, r18
      76:	32 0a       	sbc	r3, r18
      78:	12 09       	sbc	r17, r2
      7a:	12 09       	sbc	r17, r2
      7c:	2f 0a       	sbc	r2, r31
      7e:	3b 0a       	sbc	r3, r27
      80:	2b 0a       	sbc	r2, r27
      82:	42 0a       	sbc	r4, r18
      84:	3e 0a       	sbc	r3, r30
      86:	46 0a       	sbc	r4, r22
      88:	fe 09       	sbc	r31, r14
      8a:	d0 09       	sbc	r29, r0

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee e8       	ldi	r30, 0x8E	; 142
      b8:	fe e1       	ldi	r31, 0x1E	; 30
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a6 31       	cpi	r26, 0x16	; 22
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a6 e1       	ldi	r26, 0x16	; 22
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 39       	cpi	r26, 0x90	; 144
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 15 0c 	call	0x182a	; 0x182a <main>
      da:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <tx_message>:
// Copy-pasted from example. Not sure what it does but
// this seems a place holder to make sending the msg more eficient
// DO NOT TOUCH - not sure why but these bits seems essential.
message_t message;
// this seems a place holder to make sending the msg more eficient
message_t *tx_message(){return &message;}
      e2:	86 e2       	ldi	r24, 0x26	; 38
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <tx_message_success>:
    return output;
}


void tx_message_success() {
    sent_message = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <sent_message+0x1>
      f0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <sent_message>
      f4:	08 95       	ret

000000f6 <rx_message>:
message_t message;
// this seems a place holder to make sending the msg more eficient
message_t *tx_message(){return &message;}

void rx_message(message_t *message, distance_measurement_t *distance)
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	ec 01       	movw	r28, r24
      fc:	cb 01       	movw	r24, r22
    // Set the flag on message reception.
    new_message = 1;
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <new_message+0x1>
     106:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <new_message>
    received_distance = estimate_distance(distance);
     10a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <estimate_distance>
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <received_distance+0x1>
     114:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <received_distance>
    received_counter = message->data[0];
     118:	88 81       	ld	r24, Y
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <received_counter+0x1>
     120:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <received_counter>
    //set_color(RGB(0,0,1));
    //delay(50);
    //set_color(RGB(0,0,0));
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <setup>:
    
    }
}


void setup() {
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
    // signal start of program
    set_color(RGB(1,0,0));
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_color>
    delay(1000);
     138:	88 ee       	ldi	r24, 0xE8	; 232
     13a:	93 e0       	ldi	r25, 0x03	; 3
     13c:	0e 94 4c 04 	call	0x898	; 0x898 <delay>
    set_color(RGB(0,0,0));
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_color>

    // some dummy message
    message.type = NORMAL;
     146:	c6 e2       	ldi	r28, 0x26	; 38
     148:	d1 e0       	ldi	r29, 0x01	; 1
     14a:	19 86       	std	Y+9, r1	; 0x09
    message.data[0] = 0;
     14c:	18 82       	st	Y, r1
    message.crc = message_crc(&message);
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <message_crc>
     154:	9b 87       	std	Y+11, r25	; 0x0b
     156:	8a 87       	std	Y+10, r24	; 0x0a
    
    // put your setup code here, to be run only once
    
    //Seed the software random number generator. 
    //As per the api, the hardware number generator is slow and should be avoided
    rand_seed(rand_hard());
     158:	0e 94 b6 04 	call	0x96c	; 0x96c <rand_hard>
     15c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <rand_seed>
    // set first value of counter_max
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     160:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <counter_max_upper>
     164:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <counter_max_upper+0x1>
     168:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <counter_max_lower>
     16c:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <counter_max_lower+0x1>

// a random number generation function, I wrote based on this
// https://stackoverflow.com/questions/24216021/mapping-one-range-of-integers-to-another
int random_number(int output_start, int output_end){
    int output;    
    int input = rand_soft();
     170:	0e 94 05 05 	call	0xa0a	; 0xa0a <rand_soft>
    int output_range = output_end - output_start;
    output = input % (output_range + 1);
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	be 01       	movw	r22, r28
     178:	60 1b       	sub	r22, r16
     17a:	71 0b       	sbc	r23, r17
     17c:	6f 5f       	subi	r22, 0xFF	; 255
     17e:	7f 4f       	sbci	r23, 0xFF	; 255
     180:	0e 94 32 0c 	call	0x1864	; 0x1864 <__divmodhi4>
    
    //Seed the software random number generator. 
    //As per the api, the hardware number generator is slow and should be avoided
    rand_seed(rand_hard());
    // set first value of counter_max
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     184:	80 0f       	add	r24, r16
     186:	91 1f       	adc	r25, r17
     188:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <counter_max+0x1>
     18c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <counter_max>

    // add some random delay here to ensure initiall desync
    // the random number generator returns an 8 bit number, ie range 0-255
    delay(rand_soft()*10);
     190:	0e 94 05 05 	call	0xa0a	; 0xa0a <rand_soft>
     194:	2a e0       	ldi	r18, 0x0A	; 10
     196:	82 9f       	mul	r24, r18
     198:	c0 01       	movw	r24, r0
     19a:	11 24       	eor	r1, r1
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
    // set first value of counter_max
    counter_max = random_number(counter_max_lower, counter_max_upper); 

    // add some random delay here to ensure initiall desync
    // the random number generator returns an 8 bit number, ie range 0-255
    delay(rand_soft()*10);
     1a4:	0c 94 4c 04 	jmp	0x898	; 0x898 <delay>

000001a8 <loop>:
}

void loop() {
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
    set_color(RGB(1,1,1));
    
}


void message_sent(){if (sent_message){sent_message = 0;}}
     1b0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sent_message>
     1b4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sent_message+0x1>
     1b8:	89 2b       	or	r24, r25
     1ba:	21 f0       	breq	.+8      	; 0x1c4 <loop+0x1c>
     1bc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <sent_message+0x1>
     1c0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <sent_message>

void message_received(){
        if (new_message){
     1c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <new_message>
     1c8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <new_message+0x1>
     1cc:	89 2b       	or	r24, r25
     1ce:	41 f5       	brne	.+80     	; 0x220 <loop+0x78>
     1d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <counter>
     1d4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <counter+0x1>

void loop() {
    // put your main code here, to be run repeatedly
    message_sent();
    message_received();
    message.data[0] = counter;
     1d8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <message>
    message.crc = message_crc(&message); //be sure to recompile the crc
     1dc:	86 e2       	ldi	r24, 0x26	; 38
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <message_crc>
     1e4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <message+0xb>
     1e8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <message+0xa>
    if (counter > counter_max){flash();counter=0;}
     1ec:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <counter>
     1f0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <counter+0x1>
     1f4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <counter_max>
     1f8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <counter_max+0x1>
     1fc:	28 17       	cp	r18, r24
     1fe:	39 07       	cpc	r19, r25
     200:	3c f1       	brlt	.+78     	; 0x250 <loop+0xa8>
    else {counter = counter + 1;}
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <counter+0x1>
     208:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <counter>
    delay(counter_delay);
     20c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter_delay>
     210:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter_delay+0x1>
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
    message_received();
    message.data[0] = counter;
    message.crc = message_crc(&message); //be sure to recompile the crc
    if (counter > counter_max){flash();counter=0;}
    else {counter = counter + 1;}
    delay(counter_delay);
     21c:	0c 94 4c 04 	jmp	0x898	; 0x898 <delay>

void message_sent(){if (sent_message){sent_message = 0;}}

void message_received(){
        if (new_message){
        new_message = 0;
     220:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <new_message+0x1>
     224:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <new_message>
    
}


void update_clock(){
    signed char delta = received_counter - counter;
     228:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <counter>
     22c:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <counter+0x1>
     230:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <received_counter>
     234:	92 1b       	sub	r25, r18
       
    if (delta < -2){delta=-correction_steps;} 
     236:	9e 3f       	cpi	r25, 0xFE	; 254
     238:	94 f1       	brlt	.+100    	; 0x29e <loop+0xf6>
    if (delta > -2){delta= 0;} 
     23a:	9f 3f       	cpi	r25, 0xFF	; 255
     23c:	a4 f1       	brlt	.+104    	; 0x2a6 <loop+0xfe>
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
    counter = counter + delta;
     242:	82 0f       	add	r24, r18
     244:	93 1f       	adc	r25, r19
     246:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <counter+0x1>
     24a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <counter>
     24e:	c4 cf       	rjmp	.-120    	; 0x1d8 <loop+0x30>
    //delay(50);
    //set_color(RGB(0,0,0));
}

void flash(){
    set_color(RGB(1,1,0));
     250:	85 e0       	ldi	r24, 0x05	; 5
     252:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_color>
    delay(250);
     256:	8a ef       	ldi	r24, 0xFA	; 250
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 4c 04 	call	0x898	; 0x898 <delay>
    set_color(RGB(0,0,0));
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_color>
    //set noisy counter_max for next loop.
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     264:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <counter_max_upper>
     268:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <counter_max_upper+0x1>
     26c:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <counter_max_lower>
     270:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <counter_max_lower+0x1>

// a random number generation function, I wrote based on this
// https://stackoverflow.com/questions/24216021/mapping-one-range-of-integers-to-another
int random_number(int output_start, int output_end){
    int output;    
    int input = rand_soft();
     274:	0e 94 05 05 	call	0xa0a	; 0xa0a <rand_soft>
    int output_range = output_end - output_start;
    output = input % (output_range + 1);
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	be 01       	movw	r22, r28
     27c:	60 1b       	sub	r22, r16
     27e:	71 0b       	sbc	r23, r17
     280:	6f 5f       	subi	r22, 0xFF	; 255
     282:	7f 4f       	sbci	r23, 0xFF	; 255
     284:	0e 94 32 0c 	call	0x1864	; 0x1864 <__divmodhi4>
void flash(){
    set_color(RGB(1,1,0));
    delay(250);
    set_color(RGB(0,0,0));
    //set noisy counter_max for next loop.
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     288:	80 0f       	add	r24, r16
     28a:	91 1f       	adc	r25, r17
     28c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <counter_max+0x1>
     290:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <counter_max>
    // put your main code here, to be run repeatedly
    message_sent();
    message_received();
    message.data[0] = counter;
    message.crc = message_crc(&message); //be sure to recompile the crc
    if (counter > counter_max){flash();counter=0;}
     294:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <counter+0x1>
     298:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <counter>
     29c:	b7 cf       	rjmp	.-146    	; 0x20c <loop+0x64>


void update_clock(){
    signed char delta = received_counter - counter;
       
    if (delta < -2){delta=-correction_steps;} 
     29e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     2a2:	91 95       	neg	r25
     2a4:	ca cf       	rjmp	.-108    	; 0x23a <loop+0x92>
     2a6:	89 2f       	mov	r24, r25
     2a8:	99 0f       	add	r25, r25
     2aa:	99 0b       	sbc	r25, r25
     2ac:	ca cf       	rjmp	.-108    	; 0x242 <loop+0x9a>

000002ae <random_number>:
}


// a random number generation function, I wrote based on this
// https://stackoverflow.com/questions/24216021/mapping-one-range-of-integers-to-another
int random_number(int output_start, int output_end){
     2ae:	0f 93       	push	r16
     2b0:	1f 93       	push	r17
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	8c 01       	movw	r16, r24
     2b8:	eb 01       	movw	r28, r22
    int output;    
    int input = rand_soft();
     2ba:	0e 94 05 05 	call	0xa0a	; 0xa0a <rand_soft>
    int output_range = output_end - output_start;
    output = input % (output_range + 1);
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	be 01       	movw	r22, r28
     2c2:	60 1b       	sub	r22, r16
     2c4:	71 0b       	sbc	r23, r17
     2c6:	6f 5f       	subi	r22, 0xFF	; 255
     2c8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ca:	0e 94 32 0c 	call	0x1864	; 0x1864 <__divmodhi4>
    output = output + output_start;
    return output;
}
     2ce:	80 0f       	add	r24, r16
     2d0:	91 1f       	adc	r25, r17
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	08 95       	ret

000002dc <flash>:
    //set_color(RGB(1,0,0));
    //delay(50);
    //set_color(RGB(0,0,0));
}

void flash(){
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
    set_color(RGB(1,1,0));
     2e4:	85 e0       	ldi	r24, 0x05	; 5
     2e6:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_color>
    delay(250);
     2ea:	8a ef       	ldi	r24, 0xFA	; 250
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 4c 04 	call	0x898	; 0x898 <delay>
    set_color(RGB(0,0,0));
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_color>
    //set noisy counter_max for next loop.
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     2f8:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <counter_max_upper>
     2fc:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <counter_max_upper+0x1>
     300:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <counter_max_lower>
     304:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <counter_max_lower+0x1>

// a random number generation function, I wrote based on this
// https://stackoverflow.com/questions/24216021/mapping-one-range-of-integers-to-another
int random_number(int output_start, int output_end){
    int output;    
    int input = rand_soft();
     308:	0e 94 05 05 	call	0xa0a	; 0xa0a <rand_soft>
    int output_range = output_end - output_start;
    output = input % (output_range + 1);
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	be 01       	movw	r22, r28
     310:	60 1b       	sub	r22, r16
     312:	71 0b       	sbc	r23, r17
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	0e 94 32 0c 	call	0x1864	; 0x1864 <__divmodhi4>
void flash(){
    set_color(RGB(1,1,0));
    delay(250);
    set_color(RGB(0,0,0));
    //set noisy counter_max for next loop.
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     31c:	80 0f       	add	r24, r16
     31e:	91 1f       	adc	r25, r17
     320:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <counter_max+0x1>
     324:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <counter_max>
    
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	08 95       	ret

00000332 <update_clock>:


void update_clock(){
    signed char delta = received_counter - counter;
     332:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <counter>
     336:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <counter+0x1>
     33a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <received_counter>
     33e:	92 1b       	sub	r25, r18
       
    if (delta < -2){delta=-correction_steps;} 
     340:	9e 3f       	cpi	r25, 0xFE	; 254
     342:	1c f4       	brge	.+6      	; 0x34a <update_clock+0x18>
     344:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     348:	91 95       	neg	r25
    if (delta > -2){delta= 0;} 
     34a:	9f 3f       	cpi	r25, 0xFF	; 255
     34c:	4c f0       	brlt	.+18     	; 0x360 <update_clock+0x2e>
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
    counter = counter + delta;
     352:	82 0f       	add	r24, r18
     354:	93 1f       	adc	r25, r19
     356:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <counter+0x1>
     35a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <counter>
     35e:	08 95       	ret
     360:	89 2f       	mov	r24, r25
     362:	99 0f       	add	r25, r25
     364:	99 0b       	sbc	r25, r25
     366:	82 0f       	add	r24, r18
     368:	93 1f       	adc	r25, r19
     36a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <counter+0x1>
     36e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <counter>
     372:	08 95       	ret

00000374 <error_flash>:
}

void error_flash(){
    set_color(RGB(1,1,1));
     374:	85 e1       	ldi	r24, 0x15	; 21
     376:	0e 94 8c 08 	call	0x1118	; 0x1118 <set_color>
    delay(100);
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 4c 04 	call	0x898	; 0x898 <delay>
    set_color(RGB(1,1,1));
     382:	85 e1       	ldi	r24, 0x15	; 21
     384:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <set_color>

00000388 <message_sent>:
    
}


void message_sent(){if (sent_message){sent_message = 0;}}
     388:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sent_message>
     38c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sent_message+0x1>
     390:	89 2b       	or	r24, r25
     392:	21 f0       	breq	.+8      	; 0x39c <message_sent+0x14>
     394:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <sent_message+0x1>
     398:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <sent_message>
     39c:	08 95       	ret

0000039e <message_received>:

void message_received(){
        if (new_message){
     39e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <new_message>
     3a2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <new_message+0x1>
     3a6:	89 2b       	or	r24, r25
     3a8:	d1 f0       	breq	.+52     	; 0x3de <message_received+0x40>
        new_message = 0;
     3aa:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <new_message+0x1>
     3ae:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <new_message>
    
}


void update_clock(){
    signed char delta = received_counter - counter;
     3b2:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <counter>
     3b6:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <counter+0x1>
     3ba:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <received_counter>
     3be:	92 1b       	sub	r25, r18
       
    if (delta < -2){delta=-correction_steps;} 
     3c0:	9e 3f       	cpi	r25, 0xFE	; 254
     3c2:	1c f4       	brge	.+6      	; 0x3ca <message_received+0x2c>
     3c4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     3c8:	91 95       	neg	r25
    if (delta > -2){delta= 0;} 
     3ca:	9f 3f       	cpi	r25, 0xFF	; 255
     3cc:	4c f0       	brlt	.+18     	; 0x3e0 <message_received+0x42>
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
    counter = counter + delta;
     3d2:	82 0f       	add	r24, r18
     3d4:	93 1f       	adc	r25, r19
     3d6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <counter+0x1>
     3da:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <counter>
     3de:	08 95       	ret
     3e0:	89 2f       	mov	r24, r25
     3e2:	99 0f       	add	r25, r25
     3e4:	99 0b       	sbc	r25, r25
     3e6:	f5 cf       	rjmp	.-22     	; 0x3d2 <message_received+0x34>

000003e8 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     3e8:	08 95       	ret

000003ea <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	08 95       	ret

000003f0 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     3f0:	08 95       	ret

000003f2 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     3f2:	df 92       	push	r13
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
    cli();
     400:	f8 94       	cli

    ports_off();
     402:	14 b8       	out	0x04, r1	; 4
     404:	17 b8       	out	0x07, r1	; 7
     406:	1a b8       	out	0x0a, r1	; 10
     408:	15 b8       	out	0x05, r1	; 5
     40a:	18 b8       	out	0x08, r1	; 8
     40c:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     40e:	52 9a       	sbi	0x0a, 2	; 10
     410:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     412:	14 bc       	out	0x24, r1	; 36
     414:	85 e0       	ldi	r24, 0x05	; 5
     416:	85 bd       	out	0x25, r24	; 37
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	87 bd       	out	0x27, r24	; 39
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    rx_timer_setup();
     422:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     426:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     42a:	2f e8       	ldi	r18, 0x8F	; 143
     42c:	3b e0       	ldi	r19, 0x0B	; 11
     42e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     432:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     436:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    motors_setup();
     43a:	53 98       	cbi	0x0a, 3	; 10
     43c:	23 98       	cbi	0x04, 3	; 4
     43e:	91 ea       	ldi	r25, 0xA1	; 161
     440:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     444:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     448:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     44c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    acomp_setup();
     450:	8b e0       	ldi	r24, 0x0B	; 11
     452:	80 bf       	out	0x30, r24	; 48
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
    adc_setup();
     45a:	86 e0       	ldi	r24, 0x06	; 6
     45c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     460:	83 e8       	ldi	r24, 0x83	; 131
     462:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     466:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     46a:	80 64       	ori	r24, 0x40	; 64
     46c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     470:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     474:	86 fd       	sbrc	r24, 6
     476:	fc cf       	rjmp	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
    adc_trigger_high_gain();
     478:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     47c:	83 ea       	ldi	r24, 0xA3	; 163
     47e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
    if (osccal != 0xFF)
     490:	8f 3f       	cpi	r24, 0xFF	; 255
     492:	11 f0       	breq	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
        OSCCAL = osccal;
     494:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>

    rx_busy = 0;
     498:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <rx_busy>
    rx_leadingbit = 1;
     49c:	c1 e0       	ldi	r28, 0x01	; 1
     49e:	c0 93 32 01 	sts	0x0132, r28	; 0x800132 <rx_leadingbit>
    rx_leadingbyte = 1;
     4a2:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <rx_leadingbyte>
    rx_byteindex = 0;
     4a6:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <rx_byteindex>
    rx_bytevalue = 0;
     4aa:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     4ae:	80 e9       	ldi	r24, 0x90	; 144
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     4b6:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     4ba:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <tx_mask>
     4be:	88 73       	andi	r24, 0x38	; 56
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
        tx_mask = TX_MASK_MIN;
     4c2:	c0 93 4f 01 	sts	0x014F, r28	; 0x80014f <tx_mask>
    tx_clock = 0;
     4c6:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <tx_clock+0x1>
     4ca:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <tx_clock>
    tx_increment = 255;
     4ce:	8f ef       	ldi	r24, 0xFF	; 255
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <tx_increment+0x1>
     4d6:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <tx_increment>
    kilo_ticks = 0;
     4da:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <kilo_ticks>
     4de:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <kilo_ticks+0x1>
     4e2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <kilo_ticks+0x2>
     4e6:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <kilo_ticks+0x3>
    kilo_state = IDLE;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <kilo_state>
    kilo_tx_period = 3906;
     4f0:	82 e4       	ldi	r24, 0x42	; 66
     4f2:	9f e0       	ldi	r25, 0x0F	; 15
     4f4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <kilo_tx_period+0x1>
     4f8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     4fc:	80 eb       	ldi	r24, 0xB0	; 176
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     504:	c8 2f       	mov	r28, r24
     506:	81 eb       	ldi	r24, 0xB1	; 177
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     50e:	2c 2f       	mov	r18, r28
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	38 2b       	or	r19, r24
     514:	30 93 8c 01 	sts	0x018C, r19	; 0x80018c <kilo_uid+0x1>
     518:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     51c:	85 e0       	ldi	r24, 0x05	; 5
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     524:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     528:	89 e0       	ldi	r24, 0x09	; 9
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     530:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     534:	8c e0       	ldi	r24, 0x0C	; 12
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     53c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     540:	84 e1       	ldi	r24, 0x14	; 20
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     548:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <kilo_straight_right>
     54c:	5a e5       	ldi	r21, 0x5A	; 90
     54e:	e5 2e       	mov	r14, r21
     550:	51 e0       	ldi	r21, 0x01	; 1
     552:	f5 2e       	mov	r15, r21
     554:	03 e3       	ldi	r16, 0x33	; 51
     556:	11 e0       	ldi	r17, 0x01	; 1
     558:	c0 e2       	ldi	r28, 0x20	; 32
     55a:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     55c:	ce 01       	movw	r24, r28
     55e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     562:	d8 2e       	mov	r13, r24
     564:	ce 01       	movw	r24, r28
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     56c:	2d 2d       	mov	r18, r13
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	32 2f       	mov	r19, r18
     572:	22 27       	eor	r18, r18
     574:	28 2b       	or	r18, r24
     576:	f7 01       	movw	r30, r14
     578:	21 93       	st	Z+, r18
     57a:	31 93       	st	Z+, r19
     57c:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     57e:	ce 01       	movw	r24, r28
     580:	c0 96       	adiw	r24, 0x30	; 48
     582:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     586:	d8 2e       	mov	r13, r24
     588:	ce 01       	movw	r24, r28
     58a:	c1 96       	adiw	r24, 0x31	; 49
     58c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <eeprom_read_byte>
     590:	2d 2d       	mov	r18, r13
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	32 2f       	mov	r19, r18
     596:	22 27       	eor	r18, r18
     598:	28 2b       	or	r18, r24
     59a:	f8 01       	movw	r30, r16
     59c:	21 93       	st	Z+, r18
     59e:	31 93       	st	Z+, r19
     5a0:	8f 01       	movw	r16, r30
     5a2:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     5a4:	cc 33       	cpi	r28, 0x3C	; 60
     5a6:	d1 05       	cpc	r29, r1
     5a8:	c9 f6       	brne	.-78     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     5aa:	78 94       	sei
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	08 95       	ret

000005bc <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	11 24       	eor	r1, r1
     5c6:	8f 93       	push	r24
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	a8 95       	wdr
     5ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     5d2:	88 61       	ori	r24, 0x18	; 24
     5d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     5d8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     5dc:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     5de:	8f 91       	pop	r24
     5e0:	0f 90       	pop	r0
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     5ea:	3c 01       	movw	r6, r24
     5ec:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     5ee:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     5f0:	99 24       	eor	r9, r9
     5f2:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     5f4:	84 e0       	ldi	r24, 0x04	; 4
     5f6:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     5f8:	96 e0       	ldi	r25, 0x06	; 6
     5fa:	a9 2e       	mov	r10, r25
     5fc:	23 e8       	ldi	r18, 0x83	; 131
     5fe:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     600:	38 e1       	ldi	r19, 0x18	; 24
     602:	d3 2e       	mov	r13, r19
     604:	49 e2       	ldi	r20, 0x29	; 41
     606:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     608:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <kilo_state>
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	e7 30       	cpi	r30, 0x07	; 7
     610:	f1 05       	cpc	r31, r1
     612:	d0 f7       	brcc	.-12     	; 0x608 <kilo_start+0x1e>
     614:	ec 5c       	subi	r30, 0xCC	; 204
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     61c:	11 23       	and	r17, r17
     61e:	09 f4       	brne	.+2      	; 0x622 <kilo_start+0x38>
     620:	05 c1       	rjmp	.+522    	; 0x82c <kilo_start+0x242>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     622:	c0 92 25 01 	sts	0x0125, r12	; 0x800125 <kilo_state>
     626:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     628:	fe 01       	movw	r30, r28
     62a:	09 95       	icall
                break;
     62c:	ed cf       	rjmp	.-38     	; 0x608 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     62e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <rx_busy>
     632:	81 11       	cpse	r24, r1
     634:	05 c1       	rjmp	.+522    	; 0x840 <kilo_start+0x256>
        cli();                                    // disable interrupts
     636:	f8 94       	cli
        adc_setup_conversion(6);
     638:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     63c:	b0 92 7a 00 	sts	0x007A, r11	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     640:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     644:	80 64       	ori	r24, 0x40	; 64
     646:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     64a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     64e:	86 fd       	sbrc	r24, 6
     650:	fc cf       	rjmp	.-8      	; 0x64a <kilo_start+0x60>
        voltage = ADCW;                           // store AD result
     652:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     656:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     65a:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     65c:	8b 3a       	cpi	r24, 0xAB	; 171
     65e:	e2 e0       	ldi	r30, 0x02	; 2
     660:	9e 07       	cpc	r25, r30
     662:	0c f0       	brlt	.+2      	; 0x666 <kilo_start+0x7c>
     664:	e6 c0       	rjmp	.+460    	; 0x832 <kilo_start+0x248>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     666:	89 38       	cpi	r24, 0x89	; 137
     668:	f2 e0       	ldi	r31, 0x02	; 2
     66a:	9f 07       	cpc	r25, r31
     66c:	0c f0       	brlt	.+2      	; 0x670 <kilo_start+0x86>
     66e:	ef c0       	rjmp	.+478    	; 0x84e <kilo_start+0x264>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     670:	87 36       	cpi	r24, 0x67	; 103
     672:	92 40       	sbci	r25, 0x02	; 2
     674:	0c f4       	brge	.+2      	; 0x678 <kilo_start+0x8e>
     676:	e4 c0       	rjmp	.+456    	; 0x840 <kilo_start+0x256>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     678:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     67a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     67c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     67e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     680:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     682:	3c 98       	cbi	0x07, 4	; 7
     684:	c1 cf       	rjmp	.-126    	; 0x608 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     686:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     688:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     68a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     68c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     68e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     690:	3c 98       	cbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     692:	ef ec       	ldi	r30, 0xCF	; 207
     694:	f7 e0       	ldi	r31, 0x07	; 7
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	f1 f7       	brne	.-4      	; 0x696 <kilo_start+0xac>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <kilo_start+0xb2>
     69c:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     69e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6a0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6a2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6a4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6a6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6a8:	3c 98       	cbi	0x07, 4	; 7
     6aa:	ff ef       	ldi	r31, 0xFF	; 255
     6ac:	21 ee       	ldi	r18, 0xE1	; 225
     6ae:	84 e0       	ldi	r24, 0x04	; 4
     6b0:	f1 50       	subi	r31, 0x01	; 1
     6b2:	20 40       	sbci	r18, 0x00	; 0
     6b4:	80 40       	sbci	r24, 0x00	; 0
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <kilo_start+0xc6>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <kilo_start+0xd0>
     6ba:	00 00       	nop
     6bc:	a5 cf       	rjmp	.-182    	; 0x608 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     6be:	f8 94       	cli
                acomp_off();
     6c0:	80 b7       	in	r24, 0x30	; 48
     6c2:	87 7f       	andi	r24, 0xF7	; 247
     6c4:	80 bf       	out	0x30, r24	; 48
                adc_off();
     6c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6ca:	8f 77       	andi	r24, 0x7F	; 127
     6cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
                ports_off();
     6d0:	14 b8       	out	0x04, r1	; 4
     6d2:	17 b8       	out	0x07, r1	; 7
     6d4:	1a b8       	out	0x0a, r1	; 10
     6d6:	15 b8       	out	0x05, r1	; 5
     6d8:	18 b8       	out	0x08, r1	; 8
     6da:	1b b8       	out	0x0b, r1	; 11
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	a8 95       	wdr
     6e2:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__DATA_REGION_ORIGIN__>
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     6ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6f0:	80 64       	ori	r24, 0x40	; 64
     6f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     6f6:	83 b7       	in	r24, 0x33	; 51
     6f8:	81 7f       	andi	r24, 0xF1	; 241
     6fa:	84 60       	ori	r24, 0x04	; 4
     6fc:	83 bf       	out	0x33, r24	; 51
                cli();
     6fe:	f8 94       	cli
                sleep_enable();
     700:	83 b7       	in	r24, 0x33	; 51
     702:	81 60       	ori	r24, 0x01	; 1
     704:	83 bf       	out	0x33, r24	; 51
                sei();
     706:	78 94       	sei
                sleep_cpu();
     708:	88 95       	sleep
                sleep_disable();
     70a:	83 b7       	in	r24, 0x33	; 51
     70c:	8e 7f       	andi	r24, 0xFE	; 254
     70e:	83 bf       	out	0x33, r24	; 51
                sei();
     710:	78 94       	sei
                rx_busy = 0;
     712:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <rx_busy>
                ports_on();
     716:	52 9a       	sbi	0x0a, 2	; 10
     718:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     71a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     71e:	80 68       	ori	r24, 0x80	; 128
     720:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     724:	87 e5       	ldi	r24, 0x57	; 87
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <kilo_start+0x13e>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <kilo_start+0x144>
     72e:	00 00       	nop
                _delay_us(300);
                acomp_on();
     730:	80 b7       	in	r24, 0x30	; 48
     732:	88 61       	ori	r24, 0x18	; 24
     734:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     736:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     738:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     73a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     73c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     73e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     740:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     742:	ef e1       	ldi	r30, 0x1F	; 31
     744:	fe e4       	ldi	r31, 0x4E	; 78
     746:	31 97       	sbiw	r30, 0x01	; 1
     748:	f1 f7       	brne	.-4      	; 0x746 <kilo_start+0x15c>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <kilo_start+0x162>
     74c:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     74e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <rx_busy>
     752:	81 11       	cpse	r24, r1
     754:	5b c0       	rjmp	.+182    	; 0x80c <kilo_start+0x222>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     756:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     758:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     75a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     75c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     75e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     760:	3c 98       	cbi	0x07, 4	; 7
     762:	52 cf       	rjmp	.-348    	; 0x608 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     764:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <cur_motion>
     768:	81 11       	cpse	r24, r1
     76a:	25 c0       	rjmp	.+74     	; 0x7b6 <kilo_start+0x1cc>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     76c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     770:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     774:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <prev_motion>
     778:	47 cf       	rjmp	.-370    	; 0x608 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     77a:	48 99       	sbic	0x09, 0	; 9
     77c:	ec cf       	rjmp	.-40     	; 0x756 <kilo_start+0x16c>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     77e:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     780:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     782:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     784:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     786:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     788:	3c 98       	cbi	0x07, 4	; 7
     78a:	8f ec       	ldi	r24, 0xCF	; 207
     78c:	97 e0       	ldi	r25, 0x07	; 7
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <kilo_start+0x1a4>
     792:	00 c0       	rjmp	.+0      	; 0x794 <kilo_start+0x1aa>
     794:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     796:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     798:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     79a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     79c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     79e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7a0:	3c 98       	cbi	0x07, 4	; 7
     7a2:	9f ef       	ldi	r25, 0xFF	; 255
     7a4:	e1 ee       	ldi	r30, 0xE1	; 225
     7a6:	f4 e0       	ldi	r31, 0x04	; 4
     7a8:	91 50       	subi	r25, 0x01	; 1
     7aa:	e0 40       	sbci	r30, 0x00	; 0
     7ac:	f0 40       	sbci	r31, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <kilo_start+0x1be>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <kilo_start+0x1c8>
     7b2:	00 00       	nop
     7b4:	29 cf       	rjmp	.-430    	; 0x608 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     7b6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <cur_motion>
     7ba:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <prev_motion>
     7be:	98 17       	cp	r25, r24
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <kilo_start+0x1da>
     7c2:	22 cf       	rjmp	.-444    	; 0x608 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     7c4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <cur_motion>
     7c8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     7cc:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <cur_motion>
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <kilo_start+0x1ec>
     7d4:	50 c0       	rjmp	.+160    	; 0x876 <kilo_start+0x28c>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7d6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7da:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     7de:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     7e2:	82 30       	cpi	r24, 0x02	; 2
     7e4:	d9 f1       	breq	.+118    	; 0x85c <kilo_start+0x272>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7e6:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     7ea:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     7ee:	8f e2       	ldi	r24, 0x2F	; 47
     7f0:	95 e7       	ldi	r25, 0x75	; 117
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <kilo_start+0x208>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <kilo_start+0x20e>
     7f8:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     7fa:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <kilo_straight_right>
     7fe:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     802:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     806:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     80a:	fe ce       	rjmp	.-516    	; 0x608 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     80c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     80e:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     810:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     812:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     814:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     816:	3c 98       	cbi	0x07, 4	; 7
     818:	ff ef       	ldi	r31, 0xFF	; 255
     81a:	20 e7       	ldi	r18, 0x70	; 112
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	f1 50       	subi	r31, 0x01	; 1
     820:	20 40       	sbci	r18, 0x00	; 0
     822:	80 40       	sbci	r24, 0x00	; 0
     824:	e1 f7       	brne	.-8      	; 0x81e <kilo_start+0x234>
     826:	00 c0       	rjmp	.+0      	; 0x828 <kilo_start+0x23e>
     828:	00 00       	nop
     82a:	95 cf       	rjmp	.-214    	; 0x756 <kilo_start+0x16c>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     82c:	f3 01       	movw	r30, r6
     82e:	09 95       	icall
     830:	f8 ce       	rjmp	.-528    	; 0x622 <kilo_start+0x38>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     832:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     834:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     836:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     838:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     83a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     83c:	3c 98       	cbi	0x07, 4	; 7
     83e:	e4 ce       	rjmp	.-568    	; 0x608 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     840:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     842:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     844:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     846:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     848:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     84a:	3c 98       	cbi	0x07, 4	; 7
     84c:	dd ce       	rjmp	.-582    	; 0x608 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     84e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     850:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     852:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     854:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     856:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     858:	3c 9a       	sbi	0x07, 4	; 7
     85a:	d6 ce       	rjmp	.-596    	; 0x608 <kilo_start+0x1e>
     85c:	ef e2       	ldi	r30, 0x2F	; 47
     85e:	f5 e7       	ldi	r31, 0x75	; 117
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <kilo_start+0x276>
     864:	00 c0       	rjmp	.+0      	; 0x866 <kilo_start+0x27c>
     866:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     868:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     86c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     870:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     874:	c9 ce       	rjmp	.-622    	; 0x608 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     876:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     87a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     87e:	8f e2       	ldi	r24, 0x2F	; 47
     880:	95 e7       	ldi	r25, 0x75	; 117
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <kilo_start+0x298>
     886:	00 c0       	rjmp	.+0      	; 0x888 <kilo_start+0x29e>
     888:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     88a:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     88e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     892:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     896:	b8 ce       	rjmp	.-656    	; 0x608 <kilo_start+0x1e>

00000898 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     898:	07 c0       	rjmp	.+14     	; 0x8a8 <delay+0x10>
     89a:	ef ec       	ldi	r30, 0xCF	; 207
     89c:	f7 e0       	ldi	r31, 0x07	; 7
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <delay+0x6>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <delay+0xc>
     8a4:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     8a6:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	b9 f7       	brne	.-18     	; 0x89a <delay+0x2>
     8ac:	08 95       	ret

000008ae <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8ae:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     8b2:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     8b6:	08 95       	ret

000008b8 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     8be:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     8c2:	8f e0       	ldi	r24, 0x0F	; 15
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	ef ec       	ldi	r30, 0xCF	; 207
     8c8:	f7 e0       	ldi	r31, 0x07	; 7
     8ca:	31 97       	sbiw	r30, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <spinup_motors+0x12>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <spinup_motors+0x18>
     8d0:	00 00       	nop
     8d2:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8d4:	c1 f7       	brne	.-16     	; 0x8c6 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     8d6:	08 95       	ret

000008d8 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     8d8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <rx_busy>
     8dc:	81 11       	cpse	r24, r1
     8de:	1e c0       	rjmp	.+60     	; 0x91c <__stack+0x1d>
        cli();
     8e0:	f8 94       	cli
        adc_setup_conversion(7);
     8e2:	87 e0       	ldi	r24, 0x07	; 7
     8e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     8e8:	83 e8       	ldi	r24, 0x83	; 131
     8ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     8ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     8f2:	80 64       	ori	r24, 0x40	; 64
     8f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     8f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     8fc:	86 fd       	sbrc	r24, 6
     8fe:	fc cf       	rjmp	.-8      	; 0x8f8 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     900:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     904:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     908:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     90c:	23 ea       	ldi	r18, 0xA3	; 163
     90e:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
        sei();                                    // reenable interrupts
     918:	78 94       	sei
     91a:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     920:	08 95       	ret

00000922 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     922:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <rx_busy>
     926:	81 11       	cpse	r24, r1
     928:	1e c0       	rjmp	.+60     	; 0x966 <get_temperature+0x44>
        cli();
     92a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     92c:	88 ec       	ldi	r24, 0xC8	; 200
     92e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     932:	87 e8       	ldi	r24, 0x87	; 135
     934:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     938:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     93c:	80 64       	ori	r24, 0x40	; 64
     93e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     942:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     946:	86 fd       	sbrc	r24, 6
     948:	fc cf       	rjmp	.-8      	; 0x942 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     94a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     94e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     952:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     956:	23 ea       	ldi	r18, 0xA3	; 163
     958:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
        sei();                                    // reenable interrupts
     962:	78 94       	sei
     964:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     96a:	08 95       	ret

0000096c <rand_hard>:

uint8_t rand_hard() {
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	e0 e0       	ldi	r30, 0x00	; 0
     976:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     978:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     97a:	03 ea       	ldi	r16, 0xA3	; 163
     97c:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     97e:	d6 e0       	ldi	r29, 0x06	; 6
     980:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     982:	a1 e0       	ldi	r26, 0x01	; 1
     984:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     986:	60 e8       	ldi	r22, 0x80	; 128
     988:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     98a:	f8 94       	cli
            adc_setup_conversion(6);
     98c:	d0 93 7c 00 	sts	0x007C, r29	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     990:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_start_conversion();
     994:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     998:	90 64       	ori	r25, 0x40	; 64
     99a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_finish_conversion();
     99e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     9a2:	96 fd       	sbrc	r25, 6
     9a4:	fc cf       	rjmp	.-8      	; 0x99e <rand_hard+0x32>
            a = ADCW&0x1;
     9a6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     9aa:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     9ae:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     9b0:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     9b4:	90 64       	ori	r25, 0x40	; 64
     9b6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_finish_conversion();
     9ba:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     9be:	96 fd       	sbrc	r25, 6
     9c0:	fc cf       	rjmp	.-8      	; 0x9ba <rand_hard+0x4e>
            b = ADCW&0x1;
     9c2:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     9c6:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
            adc_trigger_high_gain();
     9ca:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     9ce:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     9d2:	10 93 7b 00 	sts	0x007B, r17	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
            sei();
     9d6:	78 94       	sei
            tries++;
        } while (a == b && tries < 128);
     9d8:	41 70       	andi	r20, 0x01	; 1
     9da:	24 13       	cpse	r18, r20
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <rand_hard+0x78>
     9de:	61 50       	subi	r22, 0x01	; 1
     9e0:	71 09       	sbc	r23, r1
     9e2:	99 f6       	brne	.-90     	; 0x98a <rand_hard+0x1e>
        if (a)
     9e4:	22 23       	and	r18, r18
     9e6:	39 f0       	breq	.+14     	; 0x9f6 <rand_hard+0x8a>
            num |= (1<<i);
     9e8:	9d 01       	movw	r18, r26
     9ea:	0e 2e       	mov	r0, r30
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <rand_hard+0x84>
     9ee:	22 0f       	add	r18, r18
     9f0:	0a 94       	dec	r0
     9f2:	ea f7       	brpl	.-6      	; 0x9ee <rand_hard+0x82>
     9f4:	82 2b       	or	r24, r18
     9f6:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     9f8:	e8 30       	cpi	r30, 0x08	; 8
     9fa:	f1 05       	cpc	r31, r1
     9fc:	09 f0       	breq	.+2      	; 0xa00 <rand_hard+0x94>
     9fe:	c3 cf       	rjmp	.-122    	; 0x986 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	08 95       	ret

00000a0a <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a0a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <seed>
     a0e:	98 2f       	mov	r25, r24
     a10:	99 0f       	add	r25, r25
     a12:	99 0f       	add	r25, r25
     a14:	99 0f       	add	r25, r25
     a16:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a18:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <accumulator>
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	29 0f       	add	r18, r25
     a20:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <accumulator>
     a24:	28 2f       	mov	r18, r24
     a26:	22 95       	swap	r18
     a28:	26 95       	lsr	r18
     a2a:	27 70       	andi	r18, 0x07	; 7
     a2c:	82 27       	eor	r24, r18
     a2e:	96 95       	lsr	r25
     a30:	96 95       	lsr	r25
     a32:	89 27       	eor	r24, r25
     a34:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <seed>
    return seed;
}
     a38:	08 95       	ret

00000a3a <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a3a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <seed>
     a3e:	08 95       	ret

00000a40 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a40:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <rx_busy>
     a44:	81 11       	cpse	r24, r1
     a46:	16 c0       	rjmp	.+44     	; 0xa74 <get_voltage+0x34>
        cli();                                    // disable interrupts
     a48:	f8 94       	cli
        adc_setup_conversion(6);
     a4a:	86 e0       	ldi	r24, 0x06	; 6
     a4c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     a50:	83 e8       	ldi	r24, 0x83	; 131
     a52:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     a56:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     a5a:	80 64       	ori	r24, 0x40	; 64
     a5c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     a60:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     a64:	86 fd       	sbrc	r24, 6
     a66:	fc cf       	rjmp	.-8      	; 0xa60 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a68:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     a6c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a70:	78 94       	sei
     a72:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a78:	08 95       	ret

00000a7a <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a7a:	2f 92       	push	r2
     a7c:	3f 92       	push	r3
     a7e:	4f 92       	push	r4
     a80:	5f 92       	push	r5
     a82:	6f 92       	push	r6
     a84:	7f 92       	push	r7
     a86:	8f 92       	push	r8
     a88:	9f 92       	push	r9
     a8a:	af 92       	push	r10
     a8c:	bf 92       	push	r11
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <estimate_distance+0x26>
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <estimate_distance+0x28>
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <estimate_distance+0x2a>
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     aaa:	dc 01       	movw	r26, r24
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	0d 90       	ld	r0, X+
     ab0:	bc 91       	ld	r27, X
     ab2:	a0 2d       	mov	r26, r0
     ab4:	be 83       	std	Y+6, r27	; 0x06
     ab6:	ad 83       	std	Y+5, r26	; 0x05
     ab8:	a4 38       	cpi	r26, 0x84	; 132
     aba:	e3 e0       	ldi	r30, 0x03	; 3
     abc:	be 07       	cpc	r27, r30
     abe:	0c f0       	brlt	.+2      	; 0xac2 <estimate_distance+0x48>
     ac0:	cb c0       	rjmp	.+406    	; 0xc58 <estimate_distance+0x1de>
        if (dist->high_gain > kilo_irhigh[0]) {
     ac2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <kilo_irhigh>
     ac6:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <kilo_irhigh+0x1>
     aca:	8a 17       	cp	r24, r26
     acc:	9b 07       	cpc	r25, r27
     ace:	08 f4       	brcc	.+2      	; 0xad2 <estimate_distance+0x58>
     ad0:	8c c1       	rjmp	.+792    	; 0xdea <estimate_distance+0x370>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     ad2:	00 91 35 01 	lds	r16, 0x0135	; 0x800135 <kilo_irhigh+0x2>
     ad6:	10 91 36 01 	lds	r17, 0x0136	; 0x800136 <kilo_irhigh+0x3>
     ada:	0a 17       	cp	r16, r26
     adc:	1b 07       	cpc	r17, r27
     ade:	08 f4       	brcc	.+2      	; 0xae2 <estimate_distance+0x68>
     ae0:	22 c2       	rjmp	.+1092   	; 0xf26 <estimate_distance+0x4ac>
     ae2:	00 91 37 01 	lds	r16, 0x0137	; 0x800137 <kilo_irhigh+0x4>
     ae6:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <kilo_irhigh+0x5>
     aea:	0a 17       	cp	r16, r26
     aec:	1b 07       	cpc	r17, r27
     aee:	08 f4       	brcc	.+2      	; 0xaf2 <estimate_distance+0x78>
     af0:	28 c2       	rjmp	.+1104   	; 0xf42 <estimate_distance+0x4c8>
     af2:	00 91 39 01 	lds	r16, 0x0139	; 0x800139 <kilo_irhigh+0x6>
     af6:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <kilo_irhigh+0x7>
     afa:	0a 17       	cp	r16, r26
     afc:	1b 07       	cpc	r17, r27
     afe:	08 f4       	brcc	.+2      	; 0xb02 <estimate_distance+0x88>
     b00:	24 c2       	rjmp	.+1096   	; 0xf4a <estimate_distance+0x4d0>
     b02:	00 91 3b 01 	lds	r16, 0x013B	; 0x80013b <kilo_irhigh+0x8>
     b06:	10 91 3c 01 	lds	r17, 0x013C	; 0x80013c <kilo_irhigh+0x9>
     b0a:	0a 17       	cp	r16, r26
     b0c:	1b 07       	cpc	r17, r27
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <estimate_distance+0x98>
     b10:	25 c2       	rjmp	.+1098   	; 0xf5c <estimate_distance+0x4e2>
     b12:	00 91 3d 01 	lds	r16, 0x013D	; 0x80013d <kilo_irhigh+0xa>
     b16:	10 91 3e 01 	lds	r17, 0x013E	; 0x80013e <kilo_irhigh+0xb>
     b1a:	0a 17       	cp	r16, r26
     b1c:	1b 07       	cpc	r17, r27
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <estimate_distance+0xa8>
     b20:	e6 c1       	rjmp	.+972    	; 0xeee <estimate_distance+0x474>
     b22:	00 91 3f 01 	lds	r16, 0x013F	; 0x80013f <kilo_irhigh+0xc>
     b26:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <kilo_irhigh+0xd>
     b2a:	0a 17       	cp	r16, r26
     b2c:	1b 07       	cpc	r17, r27
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <estimate_distance+0xb8>
     b30:	1e c2       	rjmp	.+1084   	; 0xf6e <estimate_distance+0x4f4>
     b32:	00 91 41 01 	lds	r16, 0x0141	; 0x800141 <kilo_irhigh+0xe>
     b36:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <kilo_irhigh+0xf>
     b3a:	0a 17       	cp	r16, r26
     b3c:	1b 07       	cpc	r17, r27
     b3e:	08 f4       	brcc	.+2      	; 0xb42 <estimate_distance+0xc8>
     b40:	1f c2       	rjmp	.+1086   	; 0xf80 <estimate_distance+0x506>
     b42:	00 91 43 01 	lds	r16, 0x0143	; 0x800143 <kilo_irhigh+0x10>
     b46:	10 91 44 01 	lds	r17, 0x0144	; 0x800144 <kilo_irhigh+0x11>
     b4a:	0a 17       	cp	r16, r26
     b4c:	1b 07       	cpc	r17, r27
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <estimate_distance+0xd8>
     b50:	25 c2       	rjmp	.+1098   	; 0xf9c <estimate_distance+0x522>
     b52:	00 91 45 01 	lds	r16, 0x0145	; 0x800145 <kilo_irhigh+0x12>
     b56:	10 91 46 01 	lds	r17, 0x0146	; 0x800146 <kilo_irhigh+0x13>
     b5a:	0a 17       	cp	r16, r26
     b5c:	1b 07       	cpc	r17, r27
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <estimate_distance+0xe8>
     b60:	26 c2       	rjmp	.+1100   	; 0xfae <estimate_distance+0x534>
     b62:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <kilo_irhigh+0x14>
     b66:	10 91 48 01 	lds	r17, 0x0148	; 0x800148 <kilo_irhigh+0x15>
     b6a:	0a 17       	cp	r16, r26
     b6c:	1b 07       	cpc	r17, r27
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <estimate_distance+0xf8>
     b70:	22 c2       	rjmp	.+1092   	; 0xfb6 <estimate_distance+0x53c>
     b72:	00 91 49 01 	lds	r16, 0x0149	; 0x800149 <kilo_irhigh+0x16>
     b76:	10 91 4a 01 	lds	r17, 0x014A	; 0x80014a <kilo_irhigh+0x17>
     b7a:	0a 17       	cp	r16, r26
     b7c:	1b 07       	cpc	r17, r27
     b7e:	08 f4       	brcc	.+2      	; 0xb82 <estimate_distance+0x108>
     b80:	23 c2       	rjmp	.+1094   	; 0xfc8 <estimate_distance+0x54e>
     b82:	00 91 4b 01 	lds	r16, 0x014B	; 0x80014b <kilo_irhigh+0x18>
     b86:	10 91 4c 01 	lds	r17, 0x014C	; 0x80014c <kilo_irhigh+0x19>
     b8a:	0a 17       	cp	r16, r26
     b8c:	1b 07       	cpc	r17, r27
     b8e:	08 f4       	brcc	.+2      	; 0xb92 <estimate_distance+0x118>
     b90:	24 c2       	rjmp	.+1096   	; 0xfda <estimate_distance+0x560>
     b92:	00 91 4d 01 	lds	r16, 0x014D	; 0x80014d <kilo_irhigh+0x1a>
     b96:	10 91 4e 01 	lds	r17, 0x014E	; 0x80014e <kilo_irhigh+0x1b>
     b9a:	0a 17       	cp	r16, r26
     b9c:	1b 07       	cpc	r17, r27
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <estimate_distance+0x128>
     ba0:	25 c2       	rjmp	.+1098   	; 0xfec <estimate_distance+0x572>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	a0 ed       	ldi	r26, 0xD0	; 208
     ba8:	b0 e4       	ldi	r27, 0x40	; 64
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	ab 83       	std	Y+3, r26	; 0x03
     bb0:	bc 83       	std	Y+4, r27	; 0x04
     bb2:	2c e0       	ldi	r18, 0x0C	; 12
     bb4:	e2 2e       	mov	r14, r18
     bb6:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     bb8:	f7 01       	movw	r30, r14
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	ed 5c       	subi	r30, 0xCD	; 205
     bc0:	fe 4f       	sbci	r31, 0xFE	; 254
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	b8 01       	movw	r22, r16
     bc8:	68 1b       	sub	r22, r24
     bca:	79 0b       	sbc	r23, r25
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatunsisf>
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__addsf3>
     bdc:	6b 01       	movw	r12, r22
     bde:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     be0:	ad 81       	ldd	r26, Y+5	; 0x05
     be2:	be 81       	ldd	r27, Y+6	; 0x06
     be4:	bd 01       	movw	r22, r26
     be6:	bb 0f       	add	r27, r27
     be8:	88 0b       	sbc	r24, r24
     bea:	99 0b       	sbc	r25, r25
     bec:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     bf0:	4b 01       	movw	r8, r22
     bf2:	5c 01       	movw	r10, r24
     bf4:	b8 01       	movw	r22, r16
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatunsisf>
     bfe:	2b 01       	movw	r4, r22
     c00:	3c 01       	movw	r6, r24
     c02:	29 81       	ldd	r18, Y+1	; 0x01
     c04:	3a 81       	ldd	r19, Y+2	; 0x02
     c06:	4b 81       	ldd	r20, Y+3	; 0x03
     c08:	5c 81       	ldd	r21, Y+4	; 0x04
     c0a:	c7 01       	movw	r24, r14
     c0c:	b6 01       	movw	r22, r12
     c0e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulsf3>
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	c3 01       	movw	r24, r6
     c18:	b2 01       	movw	r22, r4
     c1a:	0e 94 6f 0c 	call	0x18de	; 0x18de <__subsf3>
     c1e:	9b 01       	movw	r18, r22
     c20:	ac 01       	movw	r20, r24
     c22:	c5 01       	movw	r24, r10
     c24:	b4 01       	movw	r22, r8
     c26:	0e 94 6f 0c 	call	0x18de	; 0x18de <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e2       	ldi	r20, 0x20	; 32
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulsf3>
     c36:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <__fixsfsi>
     c3a:	8b 01       	movw	r16, r22
     c3c:	c7 01       	movw	r24, r14
     c3e:	b6 01       	movw	r22, r12
     c40:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <__fixsfsi>
     c44:	ab 01       	movw	r20, r22
     c46:	bc 01       	movw	r22, r24
     c48:	c8 01       	movw	r24, r16
     c4a:	ba 01       	movw	r22, r20
     c4c:	0e 94 32 0c 	call	0x1864	; 0x1864 <__divmodhi4>
     c50:	69 83       	std	Y+1, r22	; 0x01
     c52:	ed 81       	ldd	r30, Y+5	; 0x05
     c54:	fe 81       	ldd	r31, Y+6	; 0x06
     c56:	cb c0       	rjmp	.+406    	; 0xdee <estimate_distance+0x374>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c58:	dc 01       	movw	r26, r24
     c5a:	cd 90       	ld	r12, X+
     c5c:	dc 90       	ld	r13, X
     c5e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <kilo_irlow>
     c62:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <kilo_irlow+0x1>
     c66:	8c 15       	cp	r24, r12
     c68:	9d 05       	cpc	r25, r13
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <estimate_distance+0x1f4>
     c6c:	df c0       	rjmp	.+446    	; 0xe2c <estimate_distance+0x3b2>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     c6e:	bf ef       	ldi	r27, 0xFF	; 255
     c70:	b9 83       	std	Y+1, r27	; 0x01
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c72:	00 91 5c 01 	lds	r16, 0x015C	; 0x80015c <kilo_irlow+0x2>
     c76:	10 91 5d 01 	lds	r17, 0x015D	; 0x80015d <kilo_irlow+0x3>
     c7a:	0c 15       	cp	r16, r12
     c7c:	1d 05       	cpc	r17, r13
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <estimate_distance+0x208>
     c80:	56 c1       	rjmp	.+684    	; 0xf2e <estimate_distance+0x4b4>
     c82:	00 91 5e 01 	lds	r16, 0x015E	; 0x80015e <kilo_irlow+0x4>
     c86:	10 91 5f 01 	lds	r17, 0x015F	; 0x80015f <kilo_irlow+0x5>
     c8a:	0c 15       	cp	r16, r12
     c8c:	1d 05       	cpc	r17, r13
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <estimate_distance+0x218>
     c90:	53 c1       	rjmp	.+678    	; 0xf38 <estimate_distance+0x4be>
     c92:	00 91 60 01 	lds	r16, 0x0160	; 0x800160 <kilo_irlow+0x6>
     c96:	10 91 61 01 	lds	r17, 0x0161	; 0x800161 <kilo_irlow+0x7>
     c9a:	0c 15       	cp	r16, r12
     c9c:	1d 05       	cpc	r17, r13
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <estimate_distance+0x228>
     ca0:	58 c1       	rjmp	.+688    	; 0xf52 <estimate_distance+0x4d8>
     ca2:	00 91 62 01 	lds	r16, 0x0162	; 0x800162 <kilo_irlow+0x8>
     ca6:	10 91 63 01 	lds	r17, 0x0163	; 0x800163 <kilo_irlow+0x9>
     caa:	0c 15       	cp	r16, r12
     cac:	1d 05       	cpc	r17, r13
     cae:	08 f4       	brcc	.+2      	; 0xcb2 <estimate_distance+0x238>
     cb0:	59 c1       	rjmp	.+690    	; 0xf64 <estimate_distance+0x4ea>
     cb2:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <kilo_irlow+0xa>
     cb6:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <kilo_irlow+0xb>
     cba:	0c 15       	cp	r16, r12
     cbc:	1d 05       	cpc	r17, r13
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <estimate_distance+0x248>
     cc0:	b7 c0       	rjmp	.+366    	; 0xe30 <estimate_distance+0x3b6>
     cc2:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <kilo_irlow+0xc>
     cc6:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <kilo_irlow+0xd>
     cca:	0c 15       	cp	r16, r12
     ccc:	1d 05       	cpc	r17, r13
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <estimate_distance+0x258>
     cd0:	52 c1       	rjmp	.+676    	; 0xf76 <estimate_distance+0x4fc>
     cd2:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <kilo_irlow+0xe>
     cd6:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <kilo_irlow+0xf>
     cda:	0c 15       	cp	r16, r12
     cdc:	1d 05       	cpc	r17, r13
     cde:	08 f4       	brcc	.+2      	; 0xce2 <estimate_distance+0x268>
     ce0:	53 c1       	rjmp	.+678    	; 0xf88 <estimate_distance+0x50e>
     ce2:	00 91 6a 01 	lds	r16, 0x016A	; 0x80016a <kilo_irlow+0x10>
     ce6:	10 91 6b 01 	lds	r17, 0x016B	; 0x80016b <kilo_irlow+0x11>
     cea:	0c 15       	cp	r16, r12
     cec:	1d 05       	cpc	r17, r13
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <estimate_distance+0x278>
     cf0:	50 c1       	rjmp	.+672    	; 0xf92 <estimate_distance+0x518>
     cf2:	00 91 6c 01 	lds	r16, 0x016C	; 0x80016c <kilo_irlow+0x12>
     cf6:	10 91 6d 01 	lds	r17, 0x016D	; 0x80016d <kilo_irlow+0x13>
     cfa:	0c 15       	cp	r16, r12
     cfc:	1d 05       	cpc	r17, r13
     cfe:	08 f4       	brcc	.+2      	; 0xd02 <estimate_distance+0x288>
     d00:	51 c1       	rjmp	.+674    	; 0xfa4 <estimate_distance+0x52a>
     d02:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <kilo_irlow+0x14>
     d06:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <kilo_irlow+0x15>
     d0a:	0c 15       	cp	r16, r12
     d0c:	1d 05       	cpc	r17, r13
     d0e:	08 f4       	brcc	.+2      	; 0xd12 <estimate_distance+0x298>
     d10:	56 c1       	rjmp	.+684    	; 0xfbe <estimate_distance+0x544>
     d12:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <kilo_irlow+0x16>
     d16:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <kilo_irlow+0x17>
     d1a:	0c 15       	cp	r16, r12
     d1c:	1d 05       	cpc	r17, r13
     d1e:	08 f4       	brcc	.+2      	; 0xd22 <estimate_distance+0x2a8>
     d20:	57 c1       	rjmp	.+686    	; 0xfd0 <estimate_distance+0x556>
     d22:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <kilo_irlow+0x18>
     d26:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <kilo_irlow+0x19>
     d2a:	0c 15       	cp	r16, r12
     d2c:	1d 05       	cpc	r17, r13
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <estimate_distance+0x2b8>
     d30:	58 c1       	rjmp	.+688    	; 0xfe2 <estimate_distance+0x568>
     d32:	00 91 74 01 	lds	r16, 0x0174	; 0x800174 <kilo_irlow+0x1a>
     d36:	10 91 75 01 	lds	r17, 0x0175	; 0x800175 <kilo_irlow+0x1b>
     d3a:	0c 15       	cp	r16, r12
     d3c:	1d 05       	cpc	r17, r13
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <estimate_distance+0x2c8>
     d40:	59 c1       	rjmp	.+690    	; 0xff4 <estimate_distance+0x57a>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     d42:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     d44:	b9 81       	ldd	r27, Y+1	; 0x01
     d46:	bf 3f       	cpi	r27, 0xFF	; 255
     d48:	09 f4       	brne	.+2      	; 0xd4c <estimate_distance+0x2d2>
     d4a:	59 c1       	rjmp	.+690    	; 0xffe <estimate_distance+0x584>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     d4c:	ed 81       	ldd	r30, Y+5	; 0x05
     d4e:	fe 81       	ldd	r31, Y+6	; 0x06
     d50:	bf 01       	movw	r22, r30
     d52:	ff 0f       	add	r31, r31
     d54:	88 0b       	sbc	r24, r24
     d56:	99 0b       	sbc	r25, r25
     d58:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     d5c:	4b 01       	movw	r8, r22
     d5e:	5c 01       	movw	r10, r24
     d60:	f9 81       	ldd	r31, Y+1	; 0x01
     d62:	6f 2f       	mov	r22, r31
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatunsisf>
     d6e:	6b 01       	movw	r12, r22
     d70:	7c 01       	movw	r14, r24
     d72:	a5 01       	movw	r20, r10
     d74:	94 01       	movw	r18, r8
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	81 e6       	ldi	r24, 0x61	; 97
     d7c:	94 e4       	ldi	r25, 0x44	; 68
     d7e:	0e 94 6f 0c 	call	0x18de	; 0x18de <__subsf3>
     d82:	9b 01       	movw	r18, r22
     d84:	ac 01       	movw	r20, r24
     d86:	c7 01       	movw	r24, r14
     d88:	b6 01       	movw	r22, r12
     d8a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulsf3>
     d8e:	6b 01       	movw	r12, r22
     d90:	7c 01       	movw	r14, r24
     d92:	61 2f       	mov	r22, r17
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatunsisf>
     d9e:	2b 01       	movw	r4, r22
     da0:	3c 01       	movw	r6, r24
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4f e2       	ldi	r20, 0x2F	; 47
     da8:	54 e4       	ldi	r21, 0x44	; 68
     daa:	c5 01       	movw	r24, r10
     dac:	b4 01       	movw	r22, r8
     dae:	0e 94 6f 0c 	call	0x18de	; 0x18de <__subsf3>
     db2:	9b 01       	movw	r18, r22
     db4:	ac 01       	movw	r20, r24
     db6:	c3 01       	movw	r24, r6
     db8:	b2 01       	movw	r22, r4
     dba:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulsf3>
     dbe:	9b 01       	movw	r18, r22
     dc0:	ac 01       	movw	r20, r24
     dc2:	c7 01       	movw	r24, r14
     dc4:	b6 01       	movw	r22, r12
     dc6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__addsf3>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	48 e4       	ldi	r20, 0x48	; 72
     dd0:	53 e4       	ldi	r21, 0x43	; 67
     dd2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <__divsf3>
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	44 e0       	ldi	r20, 0x04	; 4
     ddc:	52 e4       	ldi	r21, 0x42	; 66
     dde:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__addsf3>
     de2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__fixunssfsi>
     de6:	86 2f       	mov	r24, r22
     de8:	08 c0       	rjmp	.+16     	; 0xdfa <estimate_distance+0x380>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     dea:	19 82       	std	Y+1, r1	; 0x01
     dec:	fd 01       	movw	r30, r26
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     dee:	ed 3b       	cpi	r30, 0xBD	; 189
     df0:	f2 40       	sbci	r31, 0x02	; 2
     df2:	0c f0       	brlt	.+2      	; 0xdf6 <estimate_distance+0x37c>
     df4:	07 c1       	rjmp	.+526    	; 0x1004 <estimate_distance+0x58a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	8f 5d       	subi	r24, 0xDF	; 223
    }
}
     dfa:	26 96       	adiw	r28, 0x06	; 6
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	bf 90       	pop	r11
     e18:	af 90       	pop	r10
     e1a:	9f 90       	pop	r9
     e1c:	8f 90       	pop	r8
     e1e:	7f 90       	pop	r7
     e20:	6f 90       	pop	r6
     e22:	5f 90       	pop	r5
     e24:	4f 90       	pop	r4
     e26:	3f 90       	pop	r3
     e28:	2f 90       	pop	r2
     e2a:	08 95       	ret
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     e2c:	81 e2       	ldi	r24, 0x21	; 33

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     e2e:	e5 cf       	rjmp	.-54     	; 0xdfa <estimate_distance+0x380>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e30:	f5 e0       	ldi	r31, 0x05	; 5
     e32:	3f 2e       	mov	r3, r31
                if(dist->low_gain > kilo_irlow[i]) {
     e34:	e5 e0       	ldi	r30, 0x05	; 5
     e36:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	e8 5a       	subi	r30, 0xA8	; 168
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	b8 01       	movw	r22, r16
     e46:	68 1b       	sub	r22, r24
     e48:	79 0b       	sbc	r23, r25
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatunsisf>
     e52:	9b 01       	movw	r18, r22
     e54:	ac 01       	movw	r20, r24
     e56:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__addsf3>
     e5a:	4b 01       	movw	r8, r22
     e5c:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e5e:	b6 01       	movw	r22, r12
     e60:	dd 0c       	add	r13, r13
     e62:	88 0b       	sbc	r24, r24
     e64:	99 0b       	sbc	r25, r25
     e66:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__floatsisf>
     e6a:	2b 01       	movw	r4, r22
     e6c:	3c 01       	movw	r6, r24
     e6e:	b8 01       	movw	r22, r16
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatunsisf>
     e78:	6b 01       	movw	r12, r22
     e7a:	7c 01       	movw	r14, r24
     e7c:	63 2d       	mov	r22, r3
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatunsisf>
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulsf3>
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	a9 01       	movw	r20, r18
     e9a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__addsf3>
     e9e:	a5 01       	movw	r20, r10
     ea0:	94 01       	movw	r18, r8
     ea2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulsf3>
     ea6:	9b 01       	movw	r18, r22
     ea8:	ac 01       	movw	r20, r24
     eaa:	c7 01       	movw	r24, r14
     eac:	b6 01       	movw	r22, r12
     eae:	0e 94 6f 0c 	call	0x18de	; 0x18de <__subsf3>
     eb2:	9b 01       	movw	r18, r22
     eb4:	ac 01       	movw	r20, r24
     eb6:	c3 01       	movw	r24, r6
     eb8:	b2 01       	movw	r22, r4
     eba:	0e 94 6f 0c 	call	0x18de	; 0x18de <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulsf3>
     eca:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <__fixsfsi>
     ece:	8b 01       	movw	r16, r22
     ed0:	c5 01       	movw	r24, r10
     ed2:	b4 01       	movw	r22, r8
     ed4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <__fixsfsi>
     ed8:	ab 01       	movw	r20, r22
     eda:	bc 01       	movw	r22, r24
     edc:	c8 01       	movw	r24, r16
     ede:	ba 01       	movw	r22, r20
     ee0:	0e 94 32 0c 	call	0x1864	; 0x1864 <__divmodhi4>
     ee4:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     ee6:	6f 3f       	cpi	r22, 0xFF	; 255
     ee8:	09 f0       	breq	.+2      	; 0xeec <estimate_distance+0x472>
     eea:	2c cf       	rjmp	.-424    	; 0xd44 <estimate_distance+0x2ca>
     eec:	84 cf       	rjmp	.-248    	; 0xdf6 <estimate_distance+0x37c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     eee:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     ef0:	85 e0       	ldi	r24, 0x05	; 5
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	7c 01       	movw	r14, r24
     ef6:	f1 e0       	ldi	r31, 0x01	; 1
     ef8:	ef 1a       	sub	r14, r31
     efa:	f1 08       	sbc	r15, r1
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__floatunsisf>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__mulsf3>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	a9 01       	movw	r20, r18
     f18:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__addsf3>
     f1c:	69 83       	std	Y+1, r22	; 0x01
     f1e:	7a 83       	std	Y+2, r23	; 0x02
     f20:	8b 83       	std	Y+3, r24	; 0x03
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	49 ce       	rjmp	.-878    	; 0xbb8 <estimate_distance+0x13e>
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	e3 cf       	rjmp	.-58     	; 0xef4 <estimate_distance+0x47a>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f2e:	33 24       	eor	r3, r3
     f30:	33 94       	inc	r3
     f32:	e1 e0       	ldi	r30, 0x01	; 1
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 cf       	rjmp	.-256    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	38 2e       	mov	r3, r24
                if(dist->low_gain > kilo_irlow[i]) {
     f3c:	e2 e0       	ldi	r30, 0x02	; 2
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	7b cf       	rjmp	.-266    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f42:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	d5 cf       	rjmp	.-86     	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f4a:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	d1 cf       	rjmp	.-94     	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f52:	b3 e0       	ldi	r27, 0x03	; 3
     f54:	3b 2e       	mov	r3, r27
                if(dist->low_gain > kilo_irlow[i]) {
     f56:	e3 e0       	ldi	r30, 0x03	; 3
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	6e cf       	rjmp	.-292    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f5c:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	c8 cf       	rjmp	.-112    	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f64:	a4 e0       	ldi	r26, 0x04	; 4
     f66:	3a 2e       	mov	r3, r26
                if(dist->low_gain > kilo_irlow[i]) {
     f68:	e4 e0       	ldi	r30, 0x04	; 4
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	65 cf       	rjmp	.-310    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f6e:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     f70:	86 e0       	ldi	r24, 0x06	; 6
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	bf cf       	rjmp	.-130    	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f76:	e6 e0       	ldi	r30, 0x06	; 6
     f78:	3e 2e       	mov	r3, r30
                if(dist->low_gain > kilo_irlow[i]) {
     f7a:	e6 e0       	ldi	r30, 0x06	; 6
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	5c cf       	rjmp	.-328    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f80:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     f82:	87 e0       	ldi	r24, 0x07	; 7
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	b6 cf       	rjmp	.-148    	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f88:	77 e0       	ldi	r23, 0x07	; 7
     f8a:	37 2e       	mov	r3, r23
                if(dist->low_gain > kilo_irlow[i]) {
     f8c:	e7 e0       	ldi	r30, 0x07	; 7
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	53 cf       	rjmp	.-346    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f92:	68 e0       	ldi	r22, 0x08	; 8
     f94:	36 2e       	mov	r3, r22
                if(dist->low_gain > kilo_irlow[i]) {
     f96:	e8 e0       	ldi	r30, 0x08	; 8
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	4e cf       	rjmp	.-356    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f9c:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     f9e:	88 e0       	ldi	r24, 0x08	; 8
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a8 cf       	rjmp	.-176    	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fa4:	59 e0       	ldi	r21, 0x09	; 9
     fa6:	35 2e       	mov	r3, r21
                if(dist->low_gain > kilo_irlow[i]) {
     fa8:	e9 e0       	ldi	r30, 0x09	; 9
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	45 cf       	rjmp	.-374    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fae:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     fb0:	89 e0       	ldi	r24, 0x09	; 9
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9f cf       	rjmp	.-194    	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fb6:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     fb8:	8a e0       	ldi	r24, 0x0A	; 10
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9b cf       	rjmp	.-202    	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fbe:	4a e0       	ldi	r20, 0x0A	; 10
     fc0:	34 2e       	mov	r3, r20
                if(dist->low_gain > kilo_irlow[i]) {
     fc2:	ea e0       	ldi	r30, 0x0A	; 10
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	38 cf       	rjmp	.-400    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fc8:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     fca:	8b e0       	ldi	r24, 0x0B	; 11
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	92 cf       	rjmp	.-220    	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fd0:	3b e0       	ldi	r19, 0x0B	; 11
     fd2:	33 2e       	mov	r3, r19
                if(dist->low_gain > kilo_irlow[i]) {
     fd4:	eb e0       	ldi	r30, 0x0B	; 11
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	2f cf       	rjmp	.-418    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fda:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     fdc:	8c e0       	ldi	r24, 0x0C	; 12
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	89 cf       	rjmp	.-238    	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fe2:	2c e0       	ldi	r18, 0x0C	; 12
     fe4:	32 2e       	mov	r3, r18
                if(dist->low_gain > kilo_irlow[i]) {
     fe6:	ec e0       	ldi	r30, 0x0C	; 12
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	26 cf       	rjmp	.-436    	; 0xe38 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fec:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     fee:	8d e0       	ldi	r24, 0x0D	; 13
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	80 cf       	rjmp	.-256    	; 0xef4 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ff4:	9d e0       	ldi	r25, 0x0D	; 13
     ff6:	39 2e       	mov	r3, r25
                if(dist->low_gain > kilo_irlow[i]) {
     ff8:	ed e0       	ldi	r30, 0x0D	; 13
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	1d cf       	rjmp	.-454    	; 0xe38 <estimate_distance+0x3be>
     ffe:	81 e2       	ldi	r24, 0x21	; 33
    1000:	81 0f       	add	r24, r17
    1002:	fb ce       	rjmp	.-522    	; 0xdfa <estimate_distance+0x380>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    1004:	d1 01       	movw	r26, r2
    1006:	cd 90       	ld	r12, X+
    1008:	dc 90       	ld	r13, X
    100a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <kilo_irlow>
    100e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <kilo_irlow+0x1>
    1012:	8c 15       	cp	r24, r12
    1014:	9d 05       	cpc	r25, r13
    1016:	08 f0       	brcs	.+2      	; 0x101a <estimate_distance+0x5a0>
    1018:	2c ce       	rjmp	.-936    	; 0xc72 <estimate_distance+0x1f8>
            dist_low=0;
    101a:	10 e0       	ldi	r17, 0x00	; 0
    101c:	93 ce       	rjmp	.-730    	; 0xd44 <estimate_distance+0x2ca>

0000101e <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    101e:	1f 92       	push	r1
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	11 24       	eor	r1, r1
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31
    tx_clock += tx_increment;
    1040:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <tx_clock>
    1044:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <tx_clock+0x1>
    1048:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <tx_increment>
    104c:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <tx_increment+0x1>
    1050:	82 0f       	add	r24, r18
    1052:	93 1f       	adc	r25, r19
    1054:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <tx_clock+0x1>
    1058:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <tx_clock>
    tx_increment = 0xFF;
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <tx_increment+0x1>
    1064:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <tx_increment>
    OCR0A = tx_increment;
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    106c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <kilo_ticks>
    1070:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <kilo_ticks+0x1>
    1074:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <kilo_ticks+0x2>
    1078:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <kilo_ticks+0x3>
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	a1 1d       	adc	r26, r1
    1080:	b1 1d       	adc	r27, r1
    1082:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <kilo_ticks>
    1086:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <kilo_ticks+0x1>
    108a:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <kilo_ticks+0x2>
    108e:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1092:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <rx_busy>
    1096:	81 11       	cpse	r24, r1
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <__vector_14+0x9a>
    109a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <kilo_tx_period>
    109e:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <kilo_tx_period+0x1>
    10a2:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <tx_clock>
    10a6:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <tx_clock+0x1>
    10aa:	82 17       	cp	r24, r18
    10ac:	93 07       	cpc	r25, r19
    10ae:	20 f4       	brcc	.+8      	; 0x10b8 <__vector_14+0x9a>
    10b0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <kilo_state>
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	89 f0       	breq	.+34     	; 0x10da <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	7f 91       	pop	r23
    10c6:	6f 91       	pop	r22
    10c8:	5f 91       	pop	r21
    10ca:	4f 91       	pop	r20
    10cc:	3f 91       	pop	r19
    10ce:	2f 91       	pop	r18
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    10da:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <kilo_message_tx>
    10de:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <kilo_message_tx+0x1>
    10e2:	09 95       	icall
        if (msg) {
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	41 f3       	breq	.-48     	; 0x10b8 <__vector_14+0x9a>
            if (message_send(msg)) {
    10e8:	0e 94 92 0b 	call	0x1724	; 0x1724 <message_send>
    10ec:	81 11       	cpse	r24, r1
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <__vector_14+0xe6>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    10f0:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <rand>
    10f4:	9c 01       	movw	r18, r24
    10f6:	33 27       	eor	r19, r19
    10f8:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <tx_increment+0x1>
    10fc:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <tx_increment>
                OCR0A = tx_increment;
    1100:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
    1102:	da cf       	rjmp	.-76     	; 0x10b8 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1104:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <kilo_message_tx_success>
    1108:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <kilo_message_tx_success+0x1>
    110c:	09 95       	icall
                tx_clock = 0;
    110e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <tx_clock+0x1>
    1112:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <tx_clock>
    1116:	d0 cf       	rjmp	.-96     	; 0x10b8 <__vector_14+0x9a>

00001118 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1118:	80 ff       	sbrs	r24, 0
    111a:	11 c0       	rjmp	.+34     	; 0x113e <set_color+0x26>
        DDRD |= (1<<5);
    111c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    111e:	81 ff       	sbrs	r24, 1
    1120:	11 c0       	rjmp	.+34     	; 0x1144 <set_color+0x2c>
        DDRD |= (1<<4);
    1122:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1124:	82 ff       	sbrs	r24, 2
    1126:	11 c0       	rjmp	.+34     	; 0x114a <set_color+0x32>
        DDRC |= (1<<3);
    1128:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    112a:	83 ff       	sbrs	r24, 3
    112c:	11 c0       	rjmp	.+34     	; 0x1150 <set_color+0x38>
        DDRC |= (1<<2);
    112e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1130:	84 ff       	sbrs	r24, 4
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <set_color+0x3e>
        DDRC |= (1<<5);
    1134:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1136:	85 fd       	sbrc	r24, 5
    1138:	11 c0       	rjmp	.+34     	; 0x115c <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    113a:	3c 98       	cbi	0x07, 4	; 7
    113c:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    113e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1140:	81 fd       	sbrc	r24, 1
    1142:	ef cf       	rjmp	.-34     	; 0x1122 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1144:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1146:	82 fd       	sbrc	r24, 2
    1148:	ef cf       	rjmp	.-34     	; 0x1128 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    114a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    114c:	83 fd       	sbrc	r24, 3
    114e:	ef cf       	rjmp	.-34     	; 0x112e <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1150:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1152:	84 fd       	sbrc	r24, 4
    1154:	ef cf       	rjmp	.-34     	; 0x1134 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1156:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1158:	85 ff       	sbrs	r24, 5
    115a:	ef cf       	rjmp	.-34     	; 0x113a <set_color+0x22>
        DDRC |= (1<<4);
    115c:	3c 9a       	sbi	0x07, 4	; 7
    115e:	08 95       	ret

00001160 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    rx_timer_off();
    116e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1172:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1176:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    rx_leadingbit = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <rx_leadingbit>
    rx_leadingbyte = 1;
    1180:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rx_leadingbyte>
    rx_busy = 0;
    1184:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <rx_busy>
    adc_trigger_high_gain();
    1188:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    118c:	93 ea       	ldi	r25, 0xA3	; 163
    118e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1192:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
}
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	0f 90       	pop	r0
    11a0:	1f 90       	pop	r1
    11a2:	18 95       	reti

000011a4 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    11ca:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11ce:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

    rx_busy = 1;
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	40 93 59 01 	sts	0x0159, r20	; 0x800159 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    11d8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rx_leadingbit>
    11dc:	88 23       	and	r24, r24
    11de:	a9 f1       	breq	.+106    	; 0x124a <__vector_23+0xa6>
        rx_timer_on();
    11e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11e8:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        rx_bytevalue = 0;
    11ec:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <rx_bytevalue>
        rx_leadingbit = 0;
    11f0:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <rx_leadingbit>
        if (rx_leadingbyte) {
    11f4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <rx_leadingbyte>
    11f8:	88 23       	and	r24, r24
    11fa:	a1 f0       	breq	.+40     	; 0x1224 <__vector_23+0x80>
            adc_finish_conversion();
    11fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1200:	86 fd       	sbrc	r24, 6
    1202:	fc cf       	rjmp	.-8      	; 0x11fc <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1204:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1208:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    120c:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <rx_dist+0x3>
    1210:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <rx_dist+0x2>
            adc_trigger_low_gain();
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    121a:	93 ea       	ldi	r25, 0xA3	; 163
    121c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1220:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    }
                }
            }
        }
    }
}
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    124a:	c9 01       	movw	r24, r18
    124c:	87 58       	subi	r24, 0x87	; 135
    124e:	91 09       	sbc	r25, r1
    1250:	84 37       	cpi	r24, 0x74	; 116
    1252:	99 40       	sbci	r25, 0x09	; 9
    1254:	08 f0       	brcs	.+2      	; 0x1258 <__vector_23+0xb4>
    1256:	4f c0       	rjmp	.+158    	; 0x12f6 <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1258:	26 58       	subi	r18, 0x86	; 134
    125a:	31 09       	sbc	r19, r1
    125c:	a4 ef       	ldi	r26, 0xF4	; 244
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
    1264:	aa 27       	eor	r26, r26
    1266:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1268:	88 30       	cpi	r24, 0x08	; 8
    126a:	08 f4       	brcc	.+2      	; 0x126e <__vector_23+0xca>
    126c:	7b c0       	rjmp	.+246    	; 0x1364 <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    126e:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <rx_leadingbit>
                if (rx_leadingbyte) {
    1272:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <rx_leadingbyte>
    1276:	81 11       	cpse	r24, r1
    1278:	52 c0       	rjmp	.+164    	; 0x131e <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    127a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <rx_byteindex>
    127e:	e8 2f       	mov	r30, r24
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	e4 58       	subi	r30, 0x84	; 132
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <rx_bytevalue>
    128a:	90 83       	st	Z, r25
                    rx_byteindex++;
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
    1292:	8c 30       	cpi	r24, 0x0C	; 12
    1294:	39 f6       	brne	.-114    	; 0x1224 <__vector_23+0x80>
                        rx_timer_off();
    1296:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    129a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    129e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
    12a2:	40 93 76 01 	sts	0x0176, r20	; 0x800176 <rx_leadingbyte>
                        rx_busy = 0;
    12a6:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
    12aa:	c0 91 86 01 	lds	r28, 0x0186	; 0x800186 <rx_msg+0xa>
    12ae:	d0 91 87 01 	lds	r29, 0x0187	; 0x800187 <rx_msg+0xb>
    12b2:	8c e7       	ldi	r24, 0x7C	; 124
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <message_crc>
    12ba:	c8 17       	cp	r28, r24
    12bc:	d9 07       	cpc	r29, r25
    12be:	09 f0       	breq	.+2      	; 0x12c2 <__vector_23+0x11e>
    12c0:	b1 cf       	rjmp	.-158    	; 0x1224 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    12c2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <rx_msg+0x9>
    12c6:	87 ff       	sbrs	r24, 7
    12c8:	61 c0       	rjmp	.+194    	; 0x138c <__vector_23+0x1e8>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    12ca:	98 e7       	ldi	r25, 0x78	; 120
    12cc:	98 0f       	add	r25, r24
    12ce:	93 30       	cpi	r25, 0x03	; 3
    12d0:	30 f0       	brcs	.+12     	; 0x12de <__vector_23+0x13a>
        motors_off();
    12d2:	53 98       	cbi	0x0a, 3	; 10
    12d4:	23 98       	cbi	0x04, 3	; 4
    12d6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    12da:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    switch (rx_msg.type) {
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	fc 01       	movw	r30, r24
    12e2:	e0 58       	subi	r30, 0x80	; 128
    12e4:	f1 09       	sbc	r31, r1
    12e6:	eb 30       	cpi	r30, 0x0B	; 11
    12e8:	f1 05       	cpc	r31, r1
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <__vector_23+0x14a>
    12ec:	9b cf       	rjmp	.-202    	; 0x1224 <__vector_23+0x80>
    12ee:	e5 5c       	subi	r30, 0xC5	; 197
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    12f6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    12fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
            rx_leadingbit = 1;
    1302:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <rx_leadingbit>
            rx_leadingbyte = 1;
    1306:	40 93 76 01 	sts	0x0176, r20	; 0x800176 <rx_leadingbyte>
            rx_busy = 0;
    130a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <rx_busy>
            adc_trigger_high_gain();
    130e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1312:	83 ea       	ldi	r24, 0xA3	; 163
    1314:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1318:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
    131c:	83 cf       	rjmp	.-250    	; 0x1224 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    131e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1322:	86 fd       	sbrc	r24, 6
    1324:	fc cf       	rjmp	.-8      	; 0x131e <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    1326:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    132a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    132e:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <rx_dist+0x1>
    1332:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <rx_dist>
                    adc_trigger_high_gain();
    1336:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    133a:	83 ea       	ldi	r24, 0xA3	; 163
    133c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    if (rx_bytevalue != 0) { // Collision detected.
    1346:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <rx_bytevalue>
    134a:	99 23       	and	r25, r25
    134c:	d1 f0       	breq	.+52     	; 0x1382 <__vector_23+0x1de>
                        rx_timer_off();
    134e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1352:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1356:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
    135a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rx_leadingbyte>
                        rx_busy = 0;
    135e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <rx_busy>
    1362:	60 cf       	rjmp	.-320    	; 0x1224 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1364:	21 e0       	ldi	r18, 0x01	; 1
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	f9 01       	movw	r30, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <__vector_23+0x1cc>
    136c:	ee 0f       	add	r30, r30
    136e:	ff 1f       	adc	r31, r31
    1370:	8a 95       	dec	r24
    1372:	e2 f7       	brpl	.-8      	; 0x136c <__vector_23+0x1c8>
    1374:	cf 01       	movw	r24, r30
    1376:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <rx_bytevalue>
    137a:	89 2b       	or	r24, r25
    137c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <rx_bytevalue>
    1380:	51 cf       	rjmp	.-350    	; 0x1224 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1382:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rx_leadingbyte>
                        rx_byteindex = 0;
    1386:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <rx_byteindex>
    138a:	4c cf       	rjmp	.-360    	; 0x1224 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    138c:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <kilo_message_rx>
    1390:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <kilo_message_rx+0x1>
    1394:	61 e5       	ldi	r22, 0x51	; 81
    1396:	71 e0       	ldi	r23, 0x01	; 1
    1398:	8c e7       	ldi	r24, 0x7C	; 124
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	09 95       	icall
    139e:	42 cf       	rjmp	.-380    	; 0x1224 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    13a0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_msg>
    13a4:	82 30       	cpi	r24, 0x02	; 2
    13a6:	09 f4       	brne	.+2      	; 0x13aa <__vector_23+0x206>
    13a8:	dd c0       	rjmp	.+442    	; 0x1564 <__vector_23+0x3c0>
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <__vector_23+0x20a>
    13ac:	ba c0       	rjmp	.+372    	; 0x1522 <__vector_23+0x37e>
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <__vector_23+0x210>
    13b2:	c6 c0       	rjmp	.+396    	; 0x1540 <__vector_23+0x39c>
    13b4:	84 30       	cpi	r24, 0x04	; 4
    13b6:	09 f0       	breq	.+2      	; 0x13ba <__vector_23+0x216>
    13b8:	b1 c0       	rjmp	.+354    	; 0x151c <__vector_23+0x378>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13ba:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <cur_motion>
    13be:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <rx_msg+0x6>
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <__vector_23+0x224>
    13c6:	e3 c0       	rjmp	.+454    	; 0x158e <__vector_23+0x3ea>
    13c8:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <rx_msg+0x5>
                        prev_motion = MOVE_STOP;
    13cc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    13d0:	23 e0       	ldi	r18, 0x03	; 3
    13d2:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    13d6:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    13da:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13de:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <kilo_state>
    13e2:	86 30       	cpi	r24, 0x06	; 6
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <__vector_23+0x244>
    13e6:	1e cf       	rjmp	.-452    	; 0x1224 <__vector_23+0x80>
                motors_on();
    13e8:	53 9a       	sbi	0x0a, 3	; 10
    13ea:	23 9a       	sbi	0x04, 3	; 4
    13ec:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    13f0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = MOVING;
    13f4:	86 e0       	ldi	r24, 0x06	; 6
    13f6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <kilo_state>
    13fa:	14 cf       	rjmp	.-472    	; 0x1224 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    13fc:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <kilo_state>
    1400:	86 30       	cpi	r24, 0x06	; 6
    1402:	99 f0       	breq	.+38     	; 0x142a <__vector_23+0x286>
                motors_on();
    1404:	53 9a       	sbi	0x0a, 3	; 10
    1406:	23 9a       	sbi	0x04, 3	; 4
    1408:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    140c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1410:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1412:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1414:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1416:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1418:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    141a:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    141c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <cur_motion>
    1420:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <prev_motion>
                kilo_state = MOVING;
    1424:	86 e0       	ldi	r24, 0x06	; 6
    1426:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9c 01       	movw	r18, r24
    1430:	00 90 7c 01 	lds	r0, 0x017C	; 0x80017c <rx_msg>
    1434:	02 c0       	rjmp	.+4      	; 0x143a <__vector_23+0x296>
    1436:	22 0f       	add	r18, r18
    1438:	33 1f       	adc	r19, r19
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <__vector_23+0x292>
    143e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <kilo_uid>
    1442:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <kilo_uid+0x1>
    1446:	82 23       	and	r24, r18
    1448:	93 23       	and	r25, r19
    144a:	89 2b       	or	r24, r25
    144c:	09 f0       	breq	.+2      	; 0x1450 <__vector_23+0x2ac>
    144e:	86 c0       	rjmp	.+268    	; 0x155c <__vector_23+0x3b8>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1450:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <cur_motion>
                    }
                }
            }
        }
    }
}
    1454:	e7 ce       	rjmp	.-562    	; 0x1224 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <kilo_state>
    145c:	e3 ce       	rjmp	.-570    	; 0x1224 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    145e:	e0 e0       	ldi	r30, 0x00	; 0
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1464:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1468:	8d 7f       	andi	r24, 0xFD	; 253
    146a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    146e:	16 bc       	out	0x26, r1	; 38
            bootload();
    1470:	e0 e0       	ldi	r30, 0x00	; 0
    1472:	f0 e7       	ldi	r31, 0x70	; 112
    1474:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1476:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <kilo_state>
    147a:	d4 ce       	rjmp	.-600    	; 0x1224 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <kilo_state>
    1482:	d0 ce       	rjmp	.-608    	; 0x1224 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1484:	85 e0       	ldi	r24, 0x05	; 5
    1486:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <kilo_state>
    148a:	cc ce       	rjmp	.-616    	; 0x1224 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    148c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <kilo_state>
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	09 f4       	brne	.+2      	; 0x1496 <__vector_23+0x2f2>
    1494:	c7 ce       	rjmp	.-626    	; 0x1224 <__vector_23+0x80>
    1496:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <kilo_state>
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	09 f4       	brne	.+2      	; 0x14a0 <__vector_23+0x2fc>
    149e:	c2 ce       	rjmp	.-636    	; 0x1224 <__vector_23+0x80>
                motors_on();
    14a0:	53 9a       	sbi	0x0a, 3	; 10
    14a2:	23 9a       	sbi	0x04, 3	; 4
    14a4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    14a8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = SETUP;
    14ac:	83 e0       	ldi	r24, 0x03	; 3
    14ae:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <kilo_state>
    14b2:	b8 ce       	rjmp	.-656    	; 0x1224 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    14b4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <kilo_state>
    14b8:	86 30       	cpi	r24, 0x06	; 6
    14ba:	09 f0       	breq	.+2      	; 0x14be <__vector_23+0x31a>
    14bc:	b3 ce       	rjmp	.-666    	; 0x1224 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    14be:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <kilo_uid>
    14c2:	80 eb       	ldi	r24, 0xB0	; 176
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    14ca:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <kilo_uid+0x1>
    14ce:	81 eb       	ldi	r24, 0xB1	; 177
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    14d6:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <kilo_turn_left>
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    14e2:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_turn_right>
    14e6:	89 e0       	ldi	r24, 0x09	; 9
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    14ee:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <kilo_straight_left>
    14f2:	8c e0       	ldi	r24, 0x0C	; 12
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    14fa:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <kilo_straight_right>
    14fe:	84 e1       	ldi	r24, 0x14	; 20
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <eeprom_write_byte>
                        motors_off();
    1506:	53 98       	cbi	0x0a, 3	; 10
    1508:	23 98       	cbi	0x04, 3	; 4
    150a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    150e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                        kilo_state = IDLE;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <kilo_state>
    1518:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_msg>
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    151c:	81 11       	cpse	r24, r1
    151e:	5f cf       	rjmp	.-322    	; 0x13de <__vector_23+0x23a>
    1520:	81 ce       	rjmp	.-766    	; 0x1224 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1522:	88 23       	and	r24, r24
    1524:	39 f2       	breq	.-114    	; 0x14b4 <__vector_23+0x310>
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	c9 f7       	brne	.-14     	; 0x151c <__vector_23+0x378>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    152a:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <rx_msg+0x1>
    152e:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <rx_msg+0x2>
    1532:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <kilo_uid+0x1>
    1536:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_uid>
                    cur_motion = MOVE_STOP;
    153a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <cur_motion>
    153e:	4f cf       	rjmp	.-354    	; 0x13de <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1540:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <cur_motion>
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	71 f1       	breq	.+92     	; 0x15a4 <__vector_23+0x400>
    1548:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_msg+0x4>
                        prev_motion = MOVE_STOP;
    154c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    1556:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_right>
    155a:	41 cf       	rjmp	.-382    	; 0x13de <__vector_23+0x23a>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <cur_motion>
    1562:	60 ce       	rjmp	.-832    	; 0x1224 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1564:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <cur_motion>
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	51 f0       	breq	.+20     	; 0x1580 <__vector_23+0x3dc>
    156c:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <rx_msg+0x3>
                        prev_motion = MOVE_STOP;
    1570:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <prev_motion>
                        cur_motion = MOVE_LEFT;
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    157a:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <kilo_turn_left>
    157e:	2f cf       	rjmp	.-418    	; 0x13de <__vector_23+0x23a>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1580:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <rx_msg+0x3>
    1584:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <kilo_turn_left>
    1588:	89 13       	cpse	r24, r25
    158a:	f2 cf       	rjmp	.-28     	; 0x1570 <__vector_23+0x3cc>
    158c:	28 cf       	rjmp	.-432    	; 0x13de <__vector_23+0x23a>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    158e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <kilo_straight_right>
    1592:	98 13       	cpse	r25, r24
    1594:	19 cf       	rjmp	.-462    	; 0x13c8 <__vector_23+0x224>
    1596:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <rx_msg+0x5>
    159a:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <kilo_straight_left>
    159e:	82 13       	cpse	r24, r18
    15a0:	15 cf       	rjmp	.-470    	; 0x13cc <__vector_23+0x228>
    15a2:	1d cf       	rjmp	.-454    	; 0x13de <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    15a4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_msg+0x4>
    15a8:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <kilo_turn_right>
    15ac:	89 13       	cpse	r24, r25
    15ae:	ce cf       	rjmp	.-100    	; 0x154c <__vector_23+0x3a8>
    15b0:	16 cf       	rjmp	.-468    	; 0x13de <__vector_23+0x23a>

000015b2 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    15b2:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    15b4:	80 81       	ld	r24, Z
    15b6:	2f ef       	ldi	r18, 0xFF	; 255
    15b8:	3f ef       	ldi	r19, 0xFF	; 255
    15ba:	28 27       	eor	r18, r24
    15bc:	02 2e       	mov	r0, r18
    15be:	22 95       	swap	r18
    15c0:	20 7f       	andi	r18, 0xF0	; 240
    15c2:	20 25       	eor	r18, r0
    15c4:	03 2e       	mov	r0, r19
    15c6:	32 2f       	mov	r19, r18
    15c8:	22 95       	swap	r18
    15ca:	2f 70       	andi	r18, 0x0F	; 15
    15cc:	02 26       	eor	r0, r18
    15ce:	26 95       	lsr	r18
    15d0:	32 27       	eor	r19, r18
    15d2:	23 27       	eor	r18, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	22 0f       	add	r18, r18
    15d8:	22 0f       	add	r18, r18
    15da:	20 25       	eor	r18, r0
    15dc:	81 81       	ldd	r24, Z+1	; 0x01
    15de:	28 27       	eor	r18, r24
    15e0:	02 2e       	mov	r0, r18
    15e2:	22 95       	swap	r18
    15e4:	20 7f       	andi	r18, 0xF0	; 240
    15e6:	20 25       	eor	r18, r0
    15e8:	03 2e       	mov	r0, r19
    15ea:	32 2f       	mov	r19, r18
    15ec:	22 95       	swap	r18
    15ee:	2f 70       	andi	r18, 0x0F	; 15
    15f0:	02 26       	eor	r0, r18
    15f2:	26 95       	lsr	r18
    15f4:	32 27       	eor	r19, r18
    15f6:	23 27       	eor	r18, r19
    15f8:	22 0f       	add	r18, r18
    15fa:	22 0f       	add	r18, r18
    15fc:	22 0f       	add	r18, r18
    15fe:	20 25       	eor	r18, r0
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	28 27       	eor	r18, r24
    1604:	02 2e       	mov	r0, r18
    1606:	22 95       	swap	r18
    1608:	20 7f       	andi	r18, 0xF0	; 240
    160a:	20 25       	eor	r18, r0
    160c:	03 2e       	mov	r0, r19
    160e:	32 2f       	mov	r19, r18
    1610:	22 95       	swap	r18
    1612:	2f 70       	andi	r18, 0x0F	; 15
    1614:	02 26       	eor	r0, r18
    1616:	26 95       	lsr	r18
    1618:	32 27       	eor	r19, r18
    161a:	23 27       	eor	r18, r19
    161c:	22 0f       	add	r18, r18
    161e:	22 0f       	add	r18, r18
    1620:	22 0f       	add	r18, r18
    1622:	20 25       	eor	r18, r0
    1624:	83 81       	ldd	r24, Z+3	; 0x03
    1626:	28 27       	eor	r18, r24
    1628:	02 2e       	mov	r0, r18
    162a:	22 95       	swap	r18
    162c:	20 7f       	andi	r18, 0xF0	; 240
    162e:	20 25       	eor	r18, r0
    1630:	03 2e       	mov	r0, r19
    1632:	32 2f       	mov	r19, r18
    1634:	22 95       	swap	r18
    1636:	2f 70       	andi	r18, 0x0F	; 15
    1638:	02 26       	eor	r0, r18
    163a:	26 95       	lsr	r18
    163c:	32 27       	eor	r19, r18
    163e:	23 27       	eor	r18, r19
    1640:	22 0f       	add	r18, r18
    1642:	22 0f       	add	r18, r18
    1644:	22 0f       	add	r18, r18
    1646:	20 25       	eor	r18, r0
    1648:	84 81       	ldd	r24, Z+4	; 0x04
    164a:	28 27       	eor	r18, r24
    164c:	02 2e       	mov	r0, r18
    164e:	22 95       	swap	r18
    1650:	20 7f       	andi	r18, 0xF0	; 240
    1652:	20 25       	eor	r18, r0
    1654:	03 2e       	mov	r0, r19
    1656:	32 2f       	mov	r19, r18
    1658:	22 95       	swap	r18
    165a:	2f 70       	andi	r18, 0x0F	; 15
    165c:	02 26       	eor	r0, r18
    165e:	26 95       	lsr	r18
    1660:	32 27       	eor	r19, r18
    1662:	23 27       	eor	r18, r19
    1664:	22 0f       	add	r18, r18
    1666:	22 0f       	add	r18, r18
    1668:	22 0f       	add	r18, r18
    166a:	20 25       	eor	r18, r0
    166c:	85 81       	ldd	r24, Z+5	; 0x05
    166e:	28 27       	eor	r18, r24
    1670:	02 2e       	mov	r0, r18
    1672:	22 95       	swap	r18
    1674:	20 7f       	andi	r18, 0xF0	; 240
    1676:	20 25       	eor	r18, r0
    1678:	03 2e       	mov	r0, r19
    167a:	32 2f       	mov	r19, r18
    167c:	22 95       	swap	r18
    167e:	2f 70       	andi	r18, 0x0F	; 15
    1680:	02 26       	eor	r0, r18
    1682:	26 95       	lsr	r18
    1684:	32 27       	eor	r19, r18
    1686:	23 27       	eor	r18, r19
    1688:	22 0f       	add	r18, r18
    168a:	22 0f       	add	r18, r18
    168c:	22 0f       	add	r18, r18
    168e:	20 25       	eor	r18, r0
    1690:	86 81       	ldd	r24, Z+6	; 0x06
    1692:	28 27       	eor	r18, r24
    1694:	02 2e       	mov	r0, r18
    1696:	22 95       	swap	r18
    1698:	20 7f       	andi	r18, 0xF0	; 240
    169a:	20 25       	eor	r18, r0
    169c:	03 2e       	mov	r0, r19
    169e:	32 2f       	mov	r19, r18
    16a0:	22 95       	swap	r18
    16a2:	2f 70       	andi	r18, 0x0F	; 15
    16a4:	02 26       	eor	r0, r18
    16a6:	26 95       	lsr	r18
    16a8:	32 27       	eor	r19, r18
    16aa:	23 27       	eor	r18, r19
    16ac:	22 0f       	add	r18, r18
    16ae:	22 0f       	add	r18, r18
    16b0:	22 0f       	add	r18, r18
    16b2:	20 25       	eor	r18, r0
    16b4:	87 81       	ldd	r24, Z+7	; 0x07
    16b6:	28 27       	eor	r18, r24
    16b8:	02 2e       	mov	r0, r18
    16ba:	22 95       	swap	r18
    16bc:	20 7f       	andi	r18, 0xF0	; 240
    16be:	20 25       	eor	r18, r0
    16c0:	03 2e       	mov	r0, r19
    16c2:	32 2f       	mov	r19, r18
    16c4:	22 95       	swap	r18
    16c6:	2f 70       	andi	r18, 0x0F	; 15
    16c8:	02 26       	eor	r0, r18
    16ca:	26 95       	lsr	r18
    16cc:	32 27       	eor	r19, r18
    16ce:	23 27       	eor	r18, r19
    16d0:	22 0f       	add	r18, r18
    16d2:	22 0f       	add	r18, r18
    16d4:	22 0f       	add	r18, r18
    16d6:	20 25       	eor	r18, r0
    16d8:	80 85       	ldd	r24, Z+8	; 0x08
    16da:	28 27       	eor	r18, r24
    16dc:	02 2e       	mov	r0, r18
    16de:	22 95       	swap	r18
    16e0:	20 7f       	andi	r18, 0xF0	; 240
    16e2:	20 25       	eor	r18, r0
    16e4:	03 2e       	mov	r0, r19
    16e6:	32 2f       	mov	r19, r18
    16e8:	22 95       	swap	r18
    16ea:	2f 70       	andi	r18, 0x0F	; 15
    16ec:	02 26       	eor	r0, r18
    16ee:	26 95       	lsr	r18
    16f0:	32 27       	eor	r19, r18
    16f2:	23 27       	eor	r18, r19
    16f4:	22 0f       	add	r18, r18
    16f6:	22 0f       	add	r18, r18
    16f8:	22 0f       	add	r18, r18
    16fa:	20 25       	eor	r18, r0
    16fc:	41 85       	ldd	r20, Z+9	; 0x09
    16fe:	c9 01       	movw	r24, r18
    1700:	84 27       	eor	r24, r20
    1702:	08 2e       	mov	r0, r24
    1704:	82 95       	swap	r24
    1706:	80 7f       	andi	r24, 0xF0	; 240
    1708:	80 25       	eor	r24, r0
    170a:	09 2e       	mov	r0, r25
    170c:	98 2f       	mov	r25, r24
    170e:	82 95       	swap	r24
    1710:	8f 70       	andi	r24, 0x0F	; 15
    1712:	08 26       	eor	r0, r24
    1714:	86 95       	lsr	r24
    1716:	98 27       	eor	r25, r24
    1718:	89 27       	eor	r24, r25
    171a:	88 0f       	add	r24, r24
    171c:	88 0f       	add	r24, r24
    171e:	88 0f       	add	r24, r24
    1720:	80 25       	eor	r24, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1722:	08 95       	ret

00001724 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1724:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1726:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1728:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    172a:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <tx_mask>
    or tmpreg1, ddrreg
    172e:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1730:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1732:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1734:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <tx_mask>
    1738:	20 30       	cpi	r18, 0x00	; 0
    173a:	29 f0       	breq	.+10     	; 0x1746 <message_send+0x22>
    173c:	00 00       	nop
    173e:	25 b1       	in	r18, 0x05	; 5
    1740:	23 2b       	or	r18, r19
    1742:	25 b9       	out	0x05, r18	; 5
    1744:	04 c0       	rjmp	.+8      	; 0x174e <message_send+0x2a>
    1746:	00 00       	nop
    1748:	00 00       	nop
    174a:	00 00       	nop
    174c:	00 c0       	rjmp	.+0      	; 0x174e <message_send+0x2a>
    174e:	00 00       	nop
    1750:	00 00       	nop
    1752:	00 00       	nop
    1754:	30 95       	com	r19
    1756:	25 b1       	in	r18, 0x05	; 5
    1758:	23 23       	and	r18, r19
    175a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    175c:	2e ea       	ldi	r18, 0xAE	; 174
    175e:	2a 95       	dec	r18
    1760:	f1 f7       	brne	.-4      	; 0x175e <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1762:	2b ee       	ldi	r18, 0xEB	; 235

00001764 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1764:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1766:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1768:	0a c0       	rjmp	.+20     	; 0x177e <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    176a:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    176c:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <tx_mask>
    com tmpreg2
    1770:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1772:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1774:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1776:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1778:	0f be       	out	0x3f, r0	; 63
    return 0
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	08 95       	ret

0000177e <nocollision>:
nocollision:
    nop
    177e:	00 00       	nop
    dec tmpreg1
    1780:	2a 95       	dec	r18
    brne checkcollision
    1782:	81 f7       	brne	.-32     	; 0x1764 <checkcollision>

    ldi tmpreg1, 0x01
    1784:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1786:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <tx_mask>
    178a:	20 30       	cpi	r18, 0x00	; 0
    178c:	29 f0       	breq	.+10     	; 0x1798 <nocollision+0x1a>
    178e:	00 00       	nop
    1790:	25 b1       	in	r18, 0x05	; 5
    1792:	23 2b       	or	r18, r19
    1794:	25 b9       	out	0x05, r18	; 5
    1796:	04 c0       	rjmp	.+8      	; 0x17a0 <nocollision+0x22>
    1798:	00 00       	nop
    179a:	00 00       	nop
    179c:	00 00       	nop
    179e:	00 c0       	rjmp	.+0      	; 0x17a0 <nocollision+0x22>
    17a0:	00 00       	nop
    17a2:	00 00       	nop
    17a4:	00 00       	nop
    17a6:	30 95       	com	r19
    17a8:	25 b1       	in	r18, 0x05	; 5
    17aa:	23 23       	and	r18, r19
    17ac:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    17ae:	00 00       	nop
    17b0:	24 e5       	ldi	r18, 0x54	; 84
    17b2:	2a 95       	dec	r18
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    17b6:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    17b8:	8c e0       	ldi	r24, 0x0C	; 12

000017ba <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    17ba:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    17be:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    17c0:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    17c2:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    17c4:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    17c6:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    17ca:	50 e0       	ldi	r21, 0x00	; 0

000017cc <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    17cc:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    17ce:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    17d0:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    17d2:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    17d4:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <tx_mask>
    17d8:	20 30       	cpi	r18, 0x00	; 0
    17da:	29 f0       	breq	.+10     	; 0x17e6 <sendbit+0x1a>
    17dc:	00 00       	nop
    17de:	25 b1       	in	r18, 0x05	; 5
    17e0:	23 2b       	or	r18, r19
    17e2:	25 b9       	out	0x05, r18	; 5
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <sendbit+0x22>
    17e6:	00 00       	nop
    17e8:	00 00       	nop
    17ea:	00 00       	nop
    17ec:	00 c0       	rjmp	.+0      	; 0x17ee <sendbit+0x22>
    17ee:	00 00       	nop
    17f0:	00 00       	nop
    17f2:	00 00       	nop
    17f4:	30 95       	com	r19
    17f6:	25 b1       	in	r18, 0x05	; 5
    17f8:	23 23       	and	r18, r19
    17fa:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    17fc:	00 00       	nop
    17fe:	21 e5       	ldi	r18, 0x51	; 81
    1800:	2a 95       	dec	r18
    1802:	f1 f7       	brne	.-4      	; 0x1800 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1804:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1806:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1808:	9a 95       	dec	r25
    brne sendbit
    180a:	01 f7       	brne	.-64     	; 0x17cc <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    180c:	8a 95       	dec	r24
    brne sendbyte
    180e:	a9 f6       	brne	.-86     	; 0x17ba <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1810:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1812:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1814:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1816:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1818:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <tx_mask>
    com tmpreg2
    181c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    181e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1820:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1822:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1824:	0f be       	out	0x3f, r0	; 63
    return 1
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	08 95       	ret

0000182a <main>:
    delay(counter_delay);
}

int main() {
    // initialize hardware
    kilo_init();
    182a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <kilo_init>
    kilo_message_tx_success = tx_message_success; // register tranmsission success callback
    182e:	84 e7       	ldi	r24, 0x74	; 116
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <kilo_message_tx_success+0x1>
    1836:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <kilo_message_tx_success>
    kilo_message_tx = tx_message; // register message transmission calback
    183a:	81 e7       	ldi	r24, 0x71	; 113
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <kilo_message_tx+0x1>
    1842:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <kilo_message_tx>
    kilo_message_rx = rx_message; // register message reception callback
    1846:	8b e7       	ldi	r24, 0x7B	; 123
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <kilo_message_rx+0x1>
    184e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_message_rx>
    // start program
    kilo_start(setup, loop);
    1852:	64 ed       	ldi	r22, 0xD4	; 212
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	85 e9       	ldi	r24, 0x95	; 149
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <kilo_start>

    return 0;
}
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	08 95       	ret

00001864 <__divmodhi4>:
    1864:	97 fb       	bst	r25, 7
    1866:	07 2e       	mov	r0, r23
    1868:	16 f4       	brtc	.+4      	; 0x186e <__divmodhi4+0xa>
    186a:	00 94       	com	r0
    186c:	07 d0       	rcall	.+14     	; 0x187c <__divmodhi4_neg1>
    186e:	77 fd       	sbrc	r23, 7
    1870:	09 d0       	rcall	.+18     	; 0x1884 <__divmodhi4_neg2>
    1872:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__udivmodhi4>
    1876:	07 fc       	sbrc	r0, 7
    1878:	05 d0       	rcall	.+10     	; 0x1884 <__divmodhi4_neg2>
    187a:	3e f4       	brtc	.+14     	; 0x188a <__divmodhi4_exit>

0000187c <__divmodhi4_neg1>:
    187c:	90 95       	com	r25
    187e:	81 95       	neg	r24
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	08 95       	ret

00001884 <__divmodhi4_neg2>:
    1884:	70 95       	com	r23
    1886:	61 95       	neg	r22
    1888:	7f 4f       	sbci	r23, 0xFF	; 255

0000188a <__divmodhi4_exit>:
    188a:	08 95       	ret

0000188c <__tablejump2__>:
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	05 90       	lpm	r0, Z+
    1892:	f4 91       	lpm	r31, Z
    1894:	e0 2d       	mov	r30, r0
    1896:	09 94       	ijmp

00001898 <__umulhisi3>:
    1898:	a2 9f       	mul	r26, r18
    189a:	b0 01       	movw	r22, r0
    189c:	b3 9f       	mul	r27, r19
    189e:	c0 01       	movw	r24, r0
    18a0:	a3 9f       	mul	r26, r19
    18a2:	70 0d       	add	r23, r0
    18a4:	81 1d       	adc	r24, r1
    18a6:	11 24       	eor	r1, r1
    18a8:	91 1d       	adc	r25, r1
    18aa:	b2 9f       	mul	r27, r18
    18ac:	70 0d       	add	r23, r0
    18ae:	81 1d       	adc	r24, r1
    18b0:	11 24       	eor	r1, r1
    18b2:	91 1d       	adc	r25, r1
    18b4:	08 95       	ret

000018b6 <__udivmodhi4>:
    18b6:	aa 1b       	sub	r26, r26
    18b8:	bb 1b       	sub	r27, r27
    18ba:	51 e1       	ldi	r21, 0x11	; 17
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <__udivmodhi4_ep>

000018be <__udivmodhi4_loop>:
    18be:	aa 1f       	adc	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	a6 17       	cp	r26, r22
    18c4:	b7 07       	cpc	r27, r23
    18c6:	10 f0       	brcs	.+4      	; 0x18cc <__udivmodhi4_ep>
    18c8:	a6 1b       	sub	r26, r22
    18ca:	b7 0b       	sbc	r27, r23

000018cc <__udivmodhi4_ep>:
    18cc:	88 1f       	adc	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	5a 95       	dec	r21
    18d2:	a9 f7       	brne	.-22     	; 0x18be <__udivmodhi4_loop>
    18d4:	80 95       	com	r24
    18d6:	90 95       	com	r25
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	08 95       	ret

000018de <__subsf3>:
    18de:	50 58       	subi	r21, 0x80	; 128

000018e0 <__addsf3>:
    18e0:	bb 27       	eor	r27, r27
    18e2:	aa 27       	eor	r26, r26
    18e4:	0e 94 87 0c 	call	0x190e	; 0x190e <__addsf3x>
    18e8:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__fp_round>
    18ec:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__fp_pscA>
    18f0:	38 f0       	brcs	.+14     	; 0x1900 <__addsf3+0x20>
    18f2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_pscB>
    18f6:	20 f0       	brcs	.+8      	; 0x1900 <__addsf3+0x20>
    18f8:	39 f4       	brne	.+14     	; 0x1908 <__addsf3+0x28>
    18fa:	9f 3f       	cpi	r25, 0xFF	; 255
    18fc:	19 f4       	brne	.+6      	; 0x1904 <__addsf3+0x24>
    18fe:	26 f4       	brtc	.+8      	; 0x1908 <__addsf3+0x28>
    1900:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__fp_nan>
    1904:	0e f4       	brtc	.+2      	; 0x1908 <__addsf3+0x28>
    1906:	e0 95       	com	r30
    1908:	e7 fb       	bst	r30, 7
    190a:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <__fp_inf>

0000190e <__addsf3x>:
    190e:	e9 2f       	mov	r30, r25
    1910:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fp_split3>
    1914:	58 f3       	brcs	.-42     	; 0x18ec <__addsf3+0xc>
    1916:	ba 17       	cp	r27, r26
    1918:	62 07       	cpc	r22, r18
    191a:	73 07       	cpc	r23, r19
    191c:	84 07       	cpc	r24, r20
    191e:	95 07       	cpc	r25, r21
    1920:	20 f0       	brcs	.+8      	; 0x192a <__addsf3x+0x1c>
    1922:	79 f4       	brne	.+30     	; 0x1942 <__addsf3x+0x34>
    1924:	a6 f5       	brtc	.+104    	; 0x198e <__addsf3x+0x80>
    1926:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_zero>
    192a:	0e f4       	brtc	.+2      	; 0x192e <__addsf3x+0x20>
    192c:	e0 95       	com	r30
    192e:	0b 2e       	mov	r0, r27
    1930:	ba 2f       	mov	r27, r26
    1932:	a0 2d       	mov	r26, r0
    1934:	0b 01       	movw	r0, r22
    1936:	b9 01       	movw	r22, r18
    1938:	90 01       	movw	r18, r0
    193a:	0c 01       	movw	r0, r24
    193c:	ca 01       	movw	r24, r20
    193e:	a0 01       	movw	r20, r0
    1940:	11 24       	eor	r1, r1
    1942:	ff 27       	eor	r31, r31
    1944:	59 1b       	sub	r21, r25
    1946:	99 f0       	breq	.+38     	; 0x196e <__addsf3x+0x60>
    1948:	59 3f       	cpi	r21, 0xF9	; 249
    194a:	50 f4       	brcc	.+20     	; 0x1960 <__addsf3x+0x52>
    194c:	50 3e       	cpi	r21, 0xE0	; 224
    194e:	68 f1       	brcs	.+90     	; 0x19aa <__addsf3x+0x9c>
    1950:	1a 16       	cp	r1, r26
    1952:	f0 40       	sbci	r31, 0x00	; 0
    1954:	a2 2f       	mov	r26, r18
    1956:	23 2f       	mov	r18, r19
    1958:	34 2f       	mov	r19, r20
    195a:	44 27       	eor	r20, r20
    195c:	58 5f       	subi	r21, 0xF8	; 248
    195e:	f3 cf       	rjmp	.-26     	; 0x1946 <__addsf3x+0x38>
    1960:	46 95       	lsr	r20
    1962:	37 95       	ror	r19
    1964:	27 95       	ror	r18
    1966:	a7 95       	ror	r26
    1968:	f0 40       	sbci	r31, 0x00	; 0
    196a:	53 95       	inc	r21
    196c:	c9 f7       	brne	.-14     	; 0x1960 <__addsf3x+0x52>
    196e:	7e f4       	brtc	.+30     	; 0x198e <__addsf3x+0x80>
    1970:	1f 16       	cp	r1, r31
    1972:	ba 0b       	sbc	r27, r26
    1974:	62 0b       	sbc	r22, r18
    1976:	73 0b       	sbc	r23, r19
    1978:	84 0b       	sbc	r24, r20
    197a:	ba f0       	brmi	.+46     	; 0x19aa <__addsf3x+0x9c>
    197c:	91 50       	subi	r25, 0x01	; 1
    197e:	a1 f0       	breq	.+40     	; 0x19a8 <__addsf3x+0x9a>
    1980:	ff 0f       	add	r31, r31
    1982:	bb 1f       	adc	r27, r27
    1984:	66 1f       	adc	r22, r22
    1986:	77 1f       	adc	r23, r23
    1988:	88 1f       	adc	r24, r24
    198a:	c2 f7       	brpl	.-16     	; 0x197c <__addsf3x+0x6e>
    198c:	0e c0       	rjmp	.+28     	; 0x19aa <__addsf3x+0x9c>
    198e:	ba 0f       	add	r27, r26
    1990:	62 1f       	adc	r22, r18
    1992:	73 1f       	adc	r23, r19
    1994:	84 1f       	adc	r24, r20
    1996:	48 f4       	brcc	.+18     	; 0x19aa <__addsf3x+0x9c>
    1998:	87 95       	ror	r24
    199a:	77 95       	ror	r23
    199c:	67 95       	ror	r22
    199e:	b7 95       	ror	r27
    19a0:	f7 95       	ror	r31
    19a2:	9e 3f       	cpi	r25, 0xFE	; 254
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <__addsf3x+0x9a>
    19a6:	b0 cf       	rjmp	.-160    	; 0x1908 <__addsf3+0x28>
    19a8:	93 95       	inc	r25
    19aa:	88 0f       	add	r24, r24
    19ac:	08 f0       	brcs	.+2      	; 0x19b0 <__addsf3x+0xa2>
    19ae:	99 27       	eor	r25, r25
    19b0:	ee 0f       	add	r30, r30
    19b2:	97 95       	ror	r25
    19b4:	87 95       	ror	r24
    19b6:	08 95       	ret

000019b8 <__divsf3>:
    19b8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__divsf3x>
    19bc:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__fp_round>
    19c0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_pscB>
    19c4:	58 f0       	brcs	.+22     	; 0x19dc <__divsf3+0x24>
    19c6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__fp_pscA>
    19ca:	40 f0       	brcs	.+16     	; 0x19dc <__divsf3+0x24>
    19cc:	29 f4       	brne	.+10     	; 0x19d8 <__divsf3+0x20>
    19ce:	5f 3f       	cpi	r21, 0xFF	; 255
    19d0:	29 f0       	breq	.+10     	; 0x19dc <__divsf3+0x24>
    19d2:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <__fp_inf>
    19d6:	51 11       	cpse	r21, r1
    19d8:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__fp_szero>
    19dc:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__fp_nan>

000019e0 <__divsf3x>:
    19e0:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fp_split3>
    19e4:	68 f3       	brcs	.-38     	; 0x19c0 <__divsf3+0x8>

000019e6 <__divsf3_pse>:
    19e6:	99 23       	and	r25, r25
    19e8:	b1 f3       	breq	.-20     	; 0x19d6 <__divsf3+0x1e>
    19ea:	55 23       	and	r21, r21
    19ec:	91 f3       	breq	.-28     	; 0x19d2 <__divsf3+0x1a>
    19ee:	95 1b       	sub	r25, r21
    19f0:	55 0b       	sbc	r21, r21
    19f2:	bb 27       	eor	r27, r27
    19f4:	aa 27       	eor	r26, r26
    19f6:	62 17       	cp	r22, r18
    19f8:	73 07       	cpc	r23, r19
    19fa:	84 07       	cpc	r24, r20
    19fc:	38 f0       	brcs	.+14     	; 0x1a0c <__divsf3_pse+0x26>
    19fe:	9f 5f       	subi	r25, 0xFF	; 255
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	22 0f       	add	r18, r18
    1a04:	33 1f       	adc	r19, r19
    1a06:	44 1f       	adc	r20, r20
    1a08:	aa 1f       	adc	r26, r26
    1a0a:	a9 f3       	breq	.-22     	; 0x19f6 <__divsf3_pse+0x10>
    1a0c:	35 d0       	rcall	.+106    	; 0x1a78 <__divsf3_pse+0x92>
    1a0e:	0e 2e       	mov	r0, r30
    1a10:	3a f0       	brmi	.+14     	; 0x1a20 <__divsf3_pse+0x3a>
    1a12:	e0 e8       	ldi	r30, 0x80	; 128
    1a14:	32 d0       	rcall	.+100    	; 0x1a7a <__divsf3_pse+0x94>
    1a16:	91 50       	subi	r25, 0x01	; 1
    1a18:	50 40       	sbci	r21, 0x00	; 0
    1a1a:	e6 95       	lsr	r30
    1a1c:	00 1c       	adc	r0, r0
    1a1e:	ca f7       	brpl	.-14     	; 0x1a12 <__divsf3_pse+0x2c>
    1a20:	2b d0       	rcall	.+86     	; 0x1a78 <__divsf3_pse+0x92>
    1a22:	fe 2f       	mov	r31, r30
    1a24:	29 d0       	rcall	.+82     	; 0x1a78 <__divsf3_pse+0x92>
    1a26:	66 0f       	add	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	26 17       	cp	r18, r22
    1a30:	37 07       	cpc	r19, r23
    1a32:	48 07       	cpc	r20, r24
    1a34:	ab 07       	cpc	r26, r27
    1a36:	b0 e8       	ldi	r27, 0x80	; 128
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <__divsf3_pse+0x56>
    1a3a:	bb 0b       	sbc	r27, r27
    1a3c:	80 2d       	mov	r24, r0
    1a3e:	bf 01       	movw	r22, r30
    1a40:	ff 27       	eor	r31, r31
    1a42:	93 58       	subi	r25, 0x83	; 131
    1a44:	5f 4f       	sbci	r21, 0xFF	; 255
    1a46:	3a f0       	brmi	.+14     	; 0x1a56 <__divsf3_pse+0x70>
    1a48:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	78 f0       	brcs	.+30     	; 0x1a6c <__divsf3_pse+0x86>
    1a4e:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <__fp_inf>
    1a52:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__fp_szero>
    1a56:	5f 3f       	cpi	r21, 0xFF	; 255
    1a58:	e4 f3       	brlt	.-8      	; 0x1a52 <__divsf3_pse+0x6c>
    1a5a:	98 3e       	cpi	r25, 0xE8	; 232
    1a5c:	d4 f3       	brlt	.-12     	; 0x1a52 <__divsf3_pse+0x6c>
    1a5e:	86 95       	lsr	r24
    1a60:	77 95       	ror	r23
    1a62:	67 95       	ror	r22
    1a64:	b7 95       	ror	r27
    1a66:	f7 95       	ror	r31
    1a68:	9f 5f       	subi	r25, 0xFF	; 255
    1a6a:	c9 f7       	brne	.-14     	; 0x1a5e <__divsf3_pse+0x78>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	91 1d       	adc	r25, r1
    1a70:	96 95       	lsr	r25
    1a72:	87 95       	ror	r24
    1a74:	97 f9       	bld	r25, 7
    1a76:	08 95       	ret
    1a78:	e1 e0       	ldi	r30, 0x01	; 1
    1a7a:	66 0f       	add	r22, r22
    1a7c:	77 1f       	adc	r23, r23
    1a7e:	88 1f       	adc	r24, r24
    1a80:	bb 1f       	adc	r27, r27
    1a82:	62 17       	cp	r22, r18
    1a84:	73 07       	cpc	r23, r19
    1a86:	84 07       	cpc	r24, r20
    1a88:	ba 07       	cpc	r27, r26
    1a8a:	20 f0       	brcs	.+8      	; 0x1a94 <__divsf3_pse+0xae>
    1a8c:	62 1b       	sub	r22, r18
    1a8e:	73 0b       	sbc	r23, r19
    1a90:	84 0b       	sbc	r24, r20
    1a92:	ba 0b       	sbc	r27, r26
    1a94:	ee 1f       	adc	r30, r30
    1a96:	88 f7       	brcc	.-30     	; 0x1a7a <__divsf3_pse+0x94>
    1a98:	e0 95       	com	r30
    1a9a:	08 95       	ret

00001a9c <__fixsfsi>:
    1a9c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__fixunssfsi>
    1aa0:	68 94       	set
    1aa2:	b1 11       	cpse	r27, r1
    1aa4:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__fp_szero>
    1aa8:	08 95       	ret

00001aaa <__fixunssfsi>:
    1aaa:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fp_splitA>
    1aae:	88 f0       	brcs	.+34     	; 0x1ad2 <__fixunssfsi+0x28>
    1ab0:	9f 57       	subi	r25, 0x7F	; 127
    1ab2:	98 f0       	brcs	.+38     	; 0x1ada <__fixunssfsi+0x30>
    1ab4:	b9 2f       	mov	r27, r25
    1ab6:	99 27       	eor	r25, r25
    1ab8:	b7 51       	subi	r27, 0x17	; 23
    1aba:	b0 f0       	brcs	.+44     	; 0x1ae8 <__fixunssfsi+0x3e>
    1abc:	e1 f0       	breq	.+56     	; 0x1af6 <__fixunssfsi+0x4c>
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	1a f0       	brmi	.+6      	; 0x1ace <__fixunssfsi+0x24>
    1ac8:	ba 95       	dec	r27
    1aca:	c9 f7       	brne	.-14     	; 0x1abe <__fixunssfsi+0x14>
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <__fixunssfsi+0x4c>
    1ace:	b1 30       	cpi	r27, 0x01	; 1
    1ad0:	91 f0       	breq	.+36     	; 0x1af6 <__fixunssfsi+0x4c>
    1ad2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fp_zero>
    1ad6:	b1 e0       	ldi	r27, 0x01	; 1
    1ad8:	08 95       	ret
    1ada:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__fp_zero>
    1ade:	67 2f       	mov	r22, r23
    1ae0:	78 2f       	mov	r23, r24
    1ae2:	88 27       	eor	r24, r24
    1ae4:	b8 5f       	subi	r27, 0xF8	; 248
    1ae6:	39 f0       	breq	.+14     	; 0x1af6 <__fixunssfsi+0x4c>
    1ae8:	b9 3f       	cpi	r27, 0xF9	; 249
    1aea:	cc f3       	brlt	.-14     	; 0x1ade <__fixunssfsi+0x34>
    1aec:	86 95       	lsr	r24
    1aee:	77 95       	ror	r23
    1af0:	67 95       	ror	r22
    1af2:	b3 95       	inc	r27
    1af4:	d9 f7       	brne	.-10     	; 0x1aec <__fixunssfsi+0x42>
    1af6:	3e f4       	brtc	.+14     	; 0x1b06 <__fixunssfsi+0x5c>
    1af8:	90 95       	com	r25
    1afa:	80 95       	com	r24
    1afc:	70 95       	com	r23
    1afe:	61 95       	neg	r22
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	8f 4f       	sbci	r24, 0xFF	; 255
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	08 95       	ret

00001b08 <__floatunsisf>:
    1b08:	e8 94       	clt
    1b0a:	09 c0       	rjmp	.+18     	; 0x1b1e <__floatsisf+0x12>

00001b0c <__floatsisf>:
    1b0c:	97 fb       	bst	r25, 7
    1b0e:	3e f4       	brtc	.+14     	; 0x1b1e <__floatsisf+0x12>
    1b10:	90 95       	com	r25
    1b12:	80 95       	com	r24
    1b14:	70 95       	com	r23
    1b16:	61 95       	neg	r22
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1e:	99 23       	and	r25, r25
    1b20:	a9 f0       	breq	.+42     	; 0x1b4c <__floatsisf+0x40>
    1b22:	f9 2f       	mov	r31, r25
    1b24:	96 e9       	ldi	r25, 0x96	; 150
    1b26:	bb 27       	eor	r27, r27
    1b28:	93 95       	inc	r25
    1b2a:	f6 95       	lsr	r31
    1b2c:	87 95       	ror	r24
    1b2e:	77 95       	ror	r23
    1b30:	67 95       	ror	r22
    1b32:	b7 95       	ror	r27
    1b34:	f1 11       	cpse	r31, r1
    1b36:	f8 cf       	rjmp	.-16     	; 0x1b28 <__floatsisf+0x1c>
    1b38:	fa f4       	brpl	.+62     	; 0x1b78 <__floatsisf+0x6c>
    1b3a:	bb 0f       	add	r27, r27
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <__floatsisf+0x36>
    1b3e:	60 ff       	sbrs	r22, 0
    1b40:	1b c0       	rjmp	.+54     	; 0x1b78 <__floatsisf+0x6c>
    1b42:	6f 5f       	subi	r22, 0xFF	; 255
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	8f 4f       	sbci	r24, 0xFF	; 255
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	16 c0       	rjmp	.+44     	; 0x1b78 <__floatsisf+0x6c>
    1b4c:	88 23       	and	r24, r24
    1b4e:	11 f0       	breq	.+4      	; 0x1b54 <__floatsisf+0x48>
    1b50:	96 e9       	ldi	r25, 0x96	; 150
    1b52:	11 c0       	rjmp	.+34     	; 0x1b76 <__floatsisf+0x6a>
    1b54:	77 23       	and	r23, r23
    1b56:	21 f0       	breq	.+8      	; 0x1b60 <__floatsisf+0x54>
    1b58:	9e e8       	ldi	r25, 0x8E	; 142
    1b5a:	87 2f       	mov	r24, r23
    1b5c:	76 2f       	mov	r23, r22
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <__floatsisf+0x5e>
    1b60:	66 23       	and	r22, r22
    1b62:	71 f0       	breq	.+28     	; 0x1b80 <__floatsisf+0x74>
    1b64:	96 e8       	ldi	r25, 0x86	; 134
    1b66:	86 2f       	mov	r24, r22
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	2a f0       	brmi	.+10     	; 0x1b78 <__floatsisf+0x6c>
    1b6e:	9a 95       	dec	r25
    1b70:	66 0f       	add	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	88 1f       	adc	r24, r24
    1b76:	da f7       	brpl	.-10     	; 0x1b6e <__floatsisf+0x62>
    1b78:	88 0f       	add	r24, r24
    1b7a:	96 95       	lsr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	97 f9       	bld	r25, 7
    1b80:	08 95       	ret

00001b82 <__fp_inf>:
    1b82:	97 f9       	bld	r25, 7
    1b84:	9f 67       	ori	r25, 0x7F	; 127
    1b86:	80 e8       	ldi	r24, 0x80	; 128
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	08 95       	ret

00001b8e <__fp_nan>:
    1b8e:	9f ef       	ldi	r25, 0xFF	; 255
    1b90:	80 ec       	ldi	r24, 0xC0	; 192
    1b92:	08 95       	ret

00001b94 <__fp_pscA>:
    1b94:	00 24       	eor	r0, r0
    1b96:	0a 94       	dec	r0
    1b98:	16 16       	cp	r1, r22
    1b9a:	17 06       	cpc	r1, r23
    1b9c:	18 06       	cpc	r1, r24
    1b9e:	09 06       	cpc	r0, r25
    1ba0:	08 95       	ret

00001ba2 <__fp_pscB>:
    1ba2:	00 24       	eor	r0, r0
    1ba4:	0a 94       	dec	r0
    1ba6:	12 16       	cp	r1, r18
    1ba8:	13 06       	cpc	r1, r19
    1baa:	14 06       	cpc	r1, r20
    1bac:	05 06       	cpc	r0, r21
    1bae:	08 95       	ret

00001bb0 <__fp_round>:
    1bb0:	09 2e       	mov	r0, r25
    1bb2:	03 94       	inc	r0
    1bb4:	00 0c       	add	r0, r0
    1bb6:	11 f4       	brne	.+4      	; 0x1bbc <__fp_round+0xc>
    1bb8:	88 23       	and	r24, r24
    1bba:	52 f0       	brmi	.+20     	; 0x1bd0 <__fp_round+0x20>
    1bbc:	bb 0f       	add	r27, r27
    1bbe:	40 f4       	brcc	.+16     	; 0x1bd0 <__fp_round+0x20>
    1bc0:	bf 2b       	or	r27, r31
    1bc2:	11 f4       	brne	.+4      	; 0x1bc8 <__fp_round+0x18>
    1bc4:	60 ff       	sbrs	r22, 0
    1bc6:	04 c0       	rjmp	.+8      	; 0x1bd0 <__fp_round+0x20>
    1bc8:	6f 5f       	subi	r22, 0xFF	; 255
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	08 95       	ret

00001bd2 <__fp_split3>:
    1bd2:	57 fd       	sbrc	r21, 7
    1bd4:	90 58       	subi	r25, 0x80	; 128
    1bd6:	44 0f       	add	r20, r20
    1bd8:	55 1f       	adc	r21, r21
    1bda:	59 f0       	breq	.+22     	; 0x1bf2 <__fp_splitA+0x10>
    1bdc:	5f 3f       	cpi	r21, 0xFF	; 255
    1bde:	71 f0       	breq	.+28     	; 0x1bfc <__fp_splitA+0x1a>
    1be0:	47 95       	ror	r20

00001be2 <__fp_splitA>:
    1be2:	88 0f       	add	r24, r24
    1be4:	97 fb       	bst	r25, 7
    1be6:	99 1f       	adc	r25, r25
    1be8:	61 f0       	breq	.+24     	; 0x1c02 <__fp_splitA+0x20>
    1bea:	9f 3f       	cpi	r25, 0xFF	; 255
    1bec:	79 f0       	breq	.+30     	; 0x1c0c <__fp_splitA+0x2a>
    1bee:	87 95       	ror	r24
    1bf0:	08 95       	ret
    1bf2:	12 16       	cp	r1, r18
    1bf4:	13 06       	cpc	r1, r19
    1bf6:	14 06       	cpc	r1, r20
    1bf8:	55 1f       	adc	r21, r21
    1bfa:	f2 cf       	rjmp	.-28     	; 0x1be0 <__fp_split3+0xe>
    1bfc:	46 95       	lsr	r20
    1bfe:	f1 df       	rcall	.-30     	; 0x1be2 <__fp_splitA>
    1c00:	08 c0       	rjmp	.+16     	; 0x1c12 <__fp_splitA+0x30>
    1c02:	16 16       	cp	r1, r22
    1c04:	17 06       	cpc	r1, r23
    1c06:	18 06       	cpc	r1, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	f1 cf       	rjmp	.-30     	; 0x1bee <__fp_splitA+0xc>
    1c0c:	86 95       	lsr	r24
    1c0e:	71 05       	cpc	r23, r1
    1c10:	61 05       	cpc	r22, r1
    1c12:	08 94       	sec
    1c14:	08 95       	ret

00001c16 <__fp_zero>:
    1c16:	e8 94       	clt

00001c18 <__fp_szero>:
    1c18:	bb 27       	eor	r27, r27
    1c1a:	66 27       	eor	r22, r22
    1c1c:	77 27       	eor	r23, r23
    1c1e:	cb 01       	movw	r24, r22
    1c20:	97 f9       	bld	r25, 7
    1c22:	08 95       	ret

00001c24 <__mulsf3>:
    1c24:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__mulsf3x>
    1c28:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__fp_round>
    1c2c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__fp_pscA>
    1c30:	38 f0       	brcs	.+14     	; 0x1c40 <__mulsf3+0x1c>
    1c32:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fp_pscB>
    1c36:	20 f0       	brcs	.+8      	; 0x1c40 <__mulsf3+0x1c>
    1c38:	95 23       	and	r25, r21
    1c3a:	11 f0       	breq	.+4      	; 0x1c40 <__mulsf3+0x1c>
    1c3c:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <__fp_inf>
    1c40:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__fp_nan>
    1c44:	11 24       	eor	r1, r1
    1c46:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__fp_szero>

00001c4a <__mulsf3x>:
    1c4a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fp_split3>
    1c4e:	70 f3       	brcs	.-36     	; 0x1c2c <__mulsf3+0x8>

00001c50 <__mulsf3_pse>:
    1c50:	95 9f       	mul	r25, r21
    1c52:	c1 f3       	breq	.-16     	; 0x1c44 <__mulsf3+0x20>
    1c54:	95 0f       	add	r25, r21
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	55 1f       	adc	r21, r21
    1c5a:	62 9f       	mul	r22, r18
    1c5c:	f0 01       	movw	r30, r0
    1c5e:	72 9f       	mul	r23, r18
    1c60:	bb 27       	eor	r27, r27
    1c62:	f0 0d       	add	r31, r0
    1c64:	b1 1d       	adc	r27, r1
    1c66:	63 9f       	mul	r22, r19
    1c68:	aa 27       	eor	r26, r26
    1c6a:	f0 0d       	add	r31, r0
    1c6c:	b1 1d       	adc	r27, r1
    1c6e:	aa 1f       	adc	r26, r26
    1c70:	64 9f       	mul	r22, r20
    1c72:	66 27       	eor	r22, r22
    1c74:	b0 0d       	add	r27, r0
    1c76:	a1 1d       	adc	r26, r1
    1c78:	66 1f       	adc	r22, r22
    1c7a:	82 9f       	mul	r24, r18
    1c7c:	22 27       	eor	r18, r18
    1c7e:	b0 0d       	add	r27, r0
    1c80:	a1 1d       	adc	r26, r1
    1c82:	62 1f       	adc	r22, r18
    1c84:	73 9f       	mul	r23, r19
    1c86:	b0 0d       	add	r27, r0
    1c88:	a1 1d       	adc	r26, r1
    1c8a:	62 1f       	adc	r22, r18
    1c8c:	83 9f       	mul	r24, r19
    1c8e:	a0 0d       	add	r26, r0
    1c90:	61 1d       	adc	r22, r1
    1c92:	22 1f       	adc	r18, r18
    1c94:	74 9f       	mul	r23, r20
    1c96:	33 27       	eor	r19, r19
    1c98:	a0 0d       	add	r26, r0
    1c9a:	61 1d       	adc	r22, r1
    1c9c:	23 1f       	adc	r18, r19
    1c9e:	84 9f       	mul	r24, r20
    1ca0:	60 0d       	add	r22, r0
    1ca2:	21 1d       	adc	r18, r1
    1ca4:	82 2f       	mov	r24, r18
    1ca6:	76 2f       	mov	r23, r22
    1ca8:	6a 2f       	mov	r22, r26
    1caa:	11 24       	eor	r1, r1
    1cac:	9f 57       	subi	r25, 0x7F	; 127
    1cae:	50 40       	sbci	r21, 0x00	; 0
    1cb0:	9a f0       	brmi	.+38     	; 0x1cd8 <__mulsf3_pse+0x88>
    1cb2:	f1 f0       	breq	.+60     	; 0x1cf0 <__mulsf3_pse+0xa0>
    1cb4:	88 23       	and	r24, r24
    1cb6:	4a f0       	brmi	.+18     	; 0x1cca <__mulsf3_pse+0x7a>
    1cb8:	ee 0f       	add	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	66 1f       	adc	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	91 50       	subi	r25, 0x01	; 1
    1cc6:	50 40       	sbci	r21, 0x00	; 0
    1cc8:	a9 f7       	brne	.-22     	; 0x1cb4 <__mulsf3_pse+0x64>
    1cca:	9e 3f       	cpi	r25, 0xFE	; 254
    1ccc:	51 05       	cpc	r21, r1
    1cce:	80 f0       	brcs	.+32     	; 0x1cf0 <__mulsf3_pse+0xa0>
    1cd0:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <__fp_inf>
    1cd4:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__fp_szero>
    1cd8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cda:	e4 f3       	brlt	.-8      	; 0x1cd4 <__mulsf3_pse+0x84>
    1cdc:	98 3e       	cpi	r25, 0xE8	; 232
    1cde:	d4 f3       	brlt	.-12     	; 0x1cd4 <__mulsf3_pse+0x84>
    1ce0:	86 95       	lsr	r24
    1ce2:	77 95       	ror	r23
    1ce4:	67 95       	ror	r22
    1ce6:	b7 95       	ror	r27
    1ce8:	f7 95       	ror	r31
    1cea:	e7 95       	ror	r30
    1cec:	9f 5f       	subi	r25, 0xFF	; 255
    1cee:	c1 f7       	brne	.-16     	; 0x1ce0 <__mulsf3_pse+0x90>
    1cf0:	fe 2b       	or	r31, r30
    1cf2:	88 0f       	add	r24, r24
    1cf4:	91 1d       	adc	r25, r1
    1cf6:	96 95       	lsr	r25
    1cf8:	87 95       	ror	r24
    1cfa:	97 f9       	bld	r25, 7
    1cfc:	08 95       	ret

00001cfe <do_rand>:
    1cfe:	8f 92       	push	r8
    1d00:	9f 92       	push	r9
    1d02:	af 92       	push	r10
    1d04:	bf 92       	push	r11
    1d06:	cf 92       	push	r12
    1d08:	df 92       	push	r13
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	ec 01       	movw	r28, r24
    1d14:	68 81       	ld	r22, Y
    1d16:	79 81       	ldd	r23, Y+1	; 0x01
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	61 15       	cp	r22, r1
    1d1e:	71 05       	cpc	r23, r1
    1d20:	81 05       	cpc	r24, r1
    1d22:	91 05       	cpc	r25, r1
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <do_rand+0x30>
    1d26:	64 e2       	ldi	r22, 0x24	; 36
    1d28:	79 ed       	ldi	r23, 0xD9	; 217
    1d2a:	8b e5       	ldi	r24, 0x5B	; 91
    1d2c:	97 e0       	ldi	r25, 0x07	; 7
    1d2e:	2d e1       	ldi	r18, 0x1D	; 29
    1d30:	33 ef       	ldi	r19, 0xF3	; 243
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__divmodsi4>
    1d3a:	49 01       	movw	r8, r18
    1d3c:	5a 01       	movw	r10, r20
    1d3e:	9b 01       	movw	r18, r22
    1d40:	ac 01       	movw	r20, r24
    1d42:	a7 ea       	ldi	r26, 0xA7	; 167
    1d44:	b1 e4       	ldi	r27, 0x41	; 65
    1d46:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__muluhisi3>
    1d4a:	6b 01       	movw	r12, r22
    1d4c:	7c 01       	movw	r14, r24
    1d4e:	ac ee       	ldi	r26, 0xEC	; 236
    1d50:	b4 ef       	ldi	r27, 0xF4	; 244
    1d52:	a5 01       	movw	r20, r10
    1d54:	94 01       	movw	r18, r8
    1d56:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__mulohisi3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	8c 0d       	add	r24, r12
    1d60:	9d 1d       	adc	r25, r13
    1d62:	ae 1d       	adc	r26, r14
    1d64:	bf 1d       	adc	r27, r15
    1d66:	b7 ff       	sbrs	r27, 7
    1d68:	03 c0       	rjmp	.+6      	; 0x1d70 <do_rand+0x72>
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	a1 09       	sbc	r26, r1
    1d6e:	b0 48       	sbci	r27, 0x80	; 128
    1d70:	88 83       	st	Y, r24
    1d72:	99 83       	std	Y+1, r25	; 0x01
    1d74:	aa 83       	std	Y+2, r26	; 0x02
    1d76:	bb 83       	std	Y+3, r27	; 0x03
    1d78:	9f 77       	andi	r25, 0x7F	; 127
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	08 95       	ret

00001d90 <rand_r>:
    1d90:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <do_rand>
    1d94:	08 95       	ret

00001d96 <rand>:
    1d96:	81 e1       	ldi	r24, 0x11	; 17
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <do_rand>
    1d9e:	08 95       	ret

00001da0 <srand>:
    1da0:	a0 e0       	ldi	r26, 0x00	; 0
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <next>
    1da8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <next+0x1>
    1dac:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <next+0x2>
    1db0:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <next+0x3>
    1db4:	08 95       	ret

00001db6 <eeprom_read_byte>:
    1db6:	f9 99       	sbic	0x1f, 1	; 31
    1db8:	fe cf       	rjmp	.-4      	; 0x1db6 <eeprom_read_byte>
    1dba:	92 bd       	out	0x22, r25	; 34
    1dbc:	81 bd       	out	0x21, r24	; 33
    1dbe:	f8 9a       	sbi	0x1f, 0	; 31
    1dc0:	99 27       	eor	r25, r25
    1dc2:	80 b5       	in	r24, 0x20	; 32
    1dc4:	08 95       	ret

00001dc6 <eeprom_write_byte>:
    1dc6:	26 2f       	mov	r18, r22

00001dc8 <eeprom_write_r18>:
    1dc8:	f9 99       	sbic	0x1f, 1	; 31
    1dca:	fe cf       	rjmp	.-4      	; 0x1dc8 <eeprom_write_r18>
    1dcc:	1f ba       	out	0x1f, r1	; 31
    1dce:	92 bd       	out	0x22, r25	; 34
    1dd0:	81 bd       	out	0x21, r24	; 33
    1dd2:	20 bd       	out	0x20, r18	; 32
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	fa 9a       	sbi	0x1f, 2	; 31
    1dda:	f9 9a       	sbi	0x1f, 1	; 31
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	08 95       	ret

00001de2 <__divmodsi4>:
    1de2:	05 2e       	mov	r0, r21
    1de4:	97 fb       	bst	r25, 7
    1de6:	1e f4       	brtc	.+6      	; 0x1dee <__divmodsi4+0xc>
    1de8:	00 94       	com	r0
    1dea:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__negsi2>
    1dee:	57 fd       	sbrc	r21, 7
    1df0:	07 d0       	rcall	.+14     	; 0x1e00 <__divmodsi4_neg2>
    1df2:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__udivmodsi4>
    1df6:	07 fc       	sbrc	r0, 7
    1df8:	03 d0       	rcall	.+6      	; 0x1e00 <__divmodsi4_neg2>
    1dfa:	4e f4       	brtc	.+18     	; 0x1e0e <__divmodsi4_exit>
    1dfc:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__negsi2>

00001e00 <__divmodsi4_neg2>:
    1e00:	50 95       	com	r21
    1e02:	40 95       	com	r20
    1e04:	30 95       	com	r19
    1e06:	21 95       	neg	r18
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e0c:	5f 4f       	sbci	r21, 0xFF	; 255

00001e0e <__divmodsi4_exit>:
    1e0e:	08 95       	ret

00001e10 <__negsi2>:
    1e10:	90 95       	com	r25
    1e12:	80 95       	com	r24
    1e14:	70 95       	com	r23
    1e16:	61 95       	neg	r22
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	08 95       	ret

00001e20 <__muluhisi3>:
    1e20:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__umulhisi3>
    1e24:	a5 9f       	mul	r26, r21
    1e26:	90 0d       	add	r25, r0
    1e28:	b4 9f       	mul	r27, r20
    1e2a:	90 0d       	add	r25, r0
    1e2c:	a4 9f       	mul	r26, r20
    1e2e:	80 0d       	add	r24, r0
    1e30:	91 1d       	adc	r25, r1
    1e32:	11 24       	eor	r1, r1
    1e34:	08 95       	ret

00001e36 <__mulshisi3>:
    1e36:	b7 ff       	sbrs	r27, 7
    1e38:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__muluhisi3>

00001e3c <__mulohisi3>:
    1e3c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__muluhisi3>
    1e40:	82 1b       	sub	r24, r18
    1e42:	93 0b       	sbc	r25, r19
    1e44:	08 95       	ret

00001e46 <__udivmodsi4>:
    1e46:	a1 e2       	ldi	r26, 0x21	; 33
    1e48:	1a 2e       	mov	r1, r26
    1e4a:	aa 1b       	sub	r26, r26
    1e4c:	bb 1b       	sub	r27, r27
    1e4e:	fd 01       	movw	r30, r26
    1e50:	0d c0       	rjmp	.+26     	; 0x1e6c <__udivmodsi4_ep>

00001e52 <__udivmodsi4_loop>:
    1e52:	aa 1f       	adc	r26, r26
    1e54:	bb 1f       	adc	r27, r27
    1e56:	ee 1f       	adc	r30, r30
    1e58:	ff 1f       	adc	r31, r31
    1e5a:	a2 17       	cp	r26, r18
    1e5c:	b3 07       	cpc	r27, r19
    1e5e:	e4 07       	cpc	r30, r20
    1e60:	f5 07       	cpc	r31, r21
    1e62:	20 f0       	brcs	.+8      	; 0x1e6c <__udivmodsi4_ep>
    1e64:	a2 1b       	sub	r26, r18
    1e66:	b3 0b       	sbc	r27, r19
    1e68:	e4 0b       	sbc	r30, r20
    1e6a:	f5 0b       	sbc	r31, r21

00001e6c <__udivmodsi4_ep>:
    1e6c:	66 1f       	adc	r22, r22
    1e6e:	77 1f       	adc	r23, r23
    1e70:	88 1f       	adc	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	1a 94       	dec	r1
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <__udivmodsi4_loop>
    1e78:	60 95       	com	r22
    1e7a:	70 95       	com	r23
    1e7c:	80 95       	com	r24
    1e7e:	90 95       	com	r25
    1e80:	9b 01       	movw	r18, r22
    1e82:	ac 01       	movw	r20, r24
    1e84:	bd 01       	movw	r22, r26
    1e86:	cf 01       	movw	r24, r30
    1e88:	08 95       	ret

00001e8a <_exit>:
    1e8a:	f8 94       	cli

00001e8c <__stop_program>:
    1e8c:	ff cf       	rjmp	.-2      	; 0x1e8c <__stop_program>
