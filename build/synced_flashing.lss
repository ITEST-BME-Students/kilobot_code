
build/synced_flashing.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	7e 03       	fmul	r23, r22
      6a:	62 03       	mulsu	r22, r18
      6c:	36 03       	mulsu	r19, r22
      6e:	2d 03       	fmul	r18, r21
      70:	33 03       	mulsu	r19, r19
      72:	dc 03       	fmulsu	r21, r20
      74:	d1 03       	fmuls	r21, r17
      76:	51 0a       	sbc	r5, r17
      78:	31 09       	sbc	r19, r1
      7a:	31 09       	sbc	r19, r1
      7c:	4e 0a       	sbc	r4, r30
      7e:	5a 0a       	sbc	r5, r26
      80:	4a 0a       	sbc	r4, r26
      82:	61 0a       	sbc	r6, r17
      84:	5d 0a       	sbc	r5, r29
      86:	65 0a       	sbc	r6, r21
      88:	1d 0a       	sbc	r1, r29
      8a:	ef 09       	sbc	r30, r15

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec ec       	ldi	r30, 0xCC	; 204
      b8:	fe e1       	ldi	r31, 0x1E	; 30
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a4 31       	cpi	r26, 0x14	; 20
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a4 e1       	ldi	r26, 0x14	; 20
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 38       	cpi	r26, 0x8E	; 142
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 34 0c 	call	0x1868	; 0x1868 <main>
      da:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <tx_message>:
int delta = 0;

message_t message;

// this seems a place holder to make sending the msg more eficient
message_t *tx_message(){return &message;}
      e2:	84 e2       	ldi	r24, 0x24	; 36
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret

000000e8 <tx_message_success>:
    return output;
}


void tx_message_success() {
    sent_message = 1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <sent_message+0x1>
      f0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <sent_message>
      f4:	08 95       	ret

000000f6 <rx_message>:

// this seems a place holder to make sending the msg more eficient
message_t *tx_message(){return &message;}

void rx_message(message_t *message, distance_measurement_t *distance)
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	ec 01       	movw	r28, r24
      fc:	cb 01       	movw	r24, r22
    // Set the flag on message reception.
    new_message = 1;
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <new_message+0x1>
     106:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <new_message>
    received_distance = estimate_distance(distance);
     10a:	0e 94 5c 05 	call	0xab8	; 0xab8 <estimate_distance>
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <received_distance+0x1>
     114:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <received_distance>
    received_counter = message->data[0];
     118:	88 81       	ld	r24, Y
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <received_counter+0x1>
     120:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <received_counter>
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <setup>:
    
    }
}


void setup() {
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
    // signal start of program
    set_color(RGB(1,0,0));
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 ab 08 	call	0x1156	; 0x1156 <set_color>
    delay(1000);
     138:	88 ee       	ldi	r24, 0xE8	; 232
     13a:	93 e0       	ldi	r25, 0x03	; 3
     13c:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay>
    set_color(RGB(0,0,0));
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 ab 08 	call	0x1156	; 0x1156 <set_color>

    // some dummy message
    message.type = NORMAL;
     146:	c4 e2       	ldi	r28, 0x24	; 36
     148:	d1 e0       	ldi	r29, 0x01	; 1
     14a:	19 86       	std	Y+9, r1	; 0x09
    message.data[0] = 0;
     14c:	18 82       	st	Y, r1
    message.crc = message_crc(&message);
     14e:	ce 01       	movw	r24, r28
     150:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <message_crc>
     154:	9b 87       	std	Y+11, r25	; 0x0b
     156:	8a 87       	std	Y+10, r24	; 0x0a
    
    // put your setup code here, to be run only once
    
    //Seed the software random number generator. 
    //As per the api, the hardware number generator is slow and should be avoided
    rand_seed(rand_hard());
     158:	0e 94 d5 04 	call	0x9aa	; 0x9aa <rand_hard>
     15c:	0e 94 3c 05 	call	0xa78	; 0xa78 <rand_seed>
    // set first value of counter_max
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     160:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <counter_max_upper>
     164:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <counter_max_upper+0x1>
     168:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <counter_max_lower>
     16c:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <counter_max_lower+0x1>

// a random number generation function, I wrote based on this
// https://stackoverflow.com/questions/24216021/mapping-one-range-of-integers-to-another
int random_number(int output_start, int output_end){
    int output;    
    int input = rand_soft();
     170:	0e 94 24 05 	call	0xa48	; 0xa48 <rand_soft>
    int output_range = output_end - output_start;
    output = input % (output_range + 1);
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	be 01       	movw	r22, r28
     178:	60 1b       	sub	r22, r16
     17a:	71 0b       	sbc	r23, r17
     17c:	6f 5f       	subi	r22, 0xFF	; 255
     17e:	7f 4f       	sbci	r23, 0xFF	; 255
     180:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divmodhi4>
    
    //Seed the software random number generator. 
    //As per the api, the hardware number generator is slow and should be avoided
    rand_seed(rand_hard());
    // set first value of counter_max
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     184:	80 0f       	add	r24, r16
     186:	91 1f       	adc	r25, r17
     188:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <counter_max+0x1>
     18c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <counter_max>

    // add some random delay here to ensure initiall desync
    // the random number generator returns an 8 bit number, ie range 0-255
    delay(rand_soft()*10);
     190:	0e 94 24 05 	call	0xa48	; 0xa48 <rand_soft>
     194:	2a e0       	ldi	r18, 0x0A	; 10
     196:	82 9f       	mul	r24, r18
     198:	c0 01       	movw	r24, r0
     19a:	11 24       	eor	r1, r1

    // signal end of setup
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
    // set first value of counter_max
    counter_max = random_number(counter_max_lower, counter_max_upper); 

    // add some random delay here to ensure initiall desync
    // the random number generator returns an 8 bit number, ie range 0-255
    delay(rand_soft()*10);
     1a4:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <delay>

000001a8 <loop>:

    // signal end of setup
}

void loop() {
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
    
}


void message_sent(){
        if (sent_message){
     1b0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sent_message>
     1b4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sent_message+0x1>
     1b8:	89 2b       	or	r24, r25
     1ba:	21 f0       	breq	.+8      	; 0x1c4 <loop+0x1c>
        sent_message = 0;
     1bc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <sent_message+0x1>
     1c0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <sent_message>
    
    }
}

void message_received(){
        if (new_message){
     1c4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <new_message>
     1c8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <new_message+0x1>
     1cc:	89 2b       	or	r24, r25
     1ce:	41 f5       	brne	.+80     	; 0x220 <loop+0x78>
     1d0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <counter>
     1d4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <counter+0x1>

void loop() {
    // put your main code here, to be run repeatedly
    message_sent();
    message_received();
    message.data[0] = counter;
     1d8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <message>
    message.crc = message_crc(&message); //be sure to recompile the crc
     1dc:	84 e2       	ldi	r24, 0x24	; 36
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <message_crc>
     1e4:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <message+0xb>
     1e8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <message+0xa>
    if (counter > counter_max){flash();counter=0;}
     1ec:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <counter>
     1f0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <counter+0x1>
     1f4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <counter_max>
     1f8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <counter_max+0x1>
     1fc:	28 17       	cp	r18, r24
     1fe:	39 07       	cpc	r19, r25
     200:	8c f1       	brlt	.+98     	; 0x264 <loop+0xbc>
    else {counter = counter + 1;}
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <counter+0x1>
     208:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <counter>
    delay(counter_delay);
     20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     210:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
    message_received();
    message.data[0] = counter;
    message.crc = message_crc(&message); //be sure to recompile the crc
    if (counter > counter_max){flash();counter=0;}
    else {counter = counter + 1;}
    delay(counter_delay);
     21c:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <delay>
    }
}

void message_received(){
        if (new_message){
        new_message = 0;
     220:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <new_message+0x1>
     224:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <new_message>
    
}


void update_clock(){
    delta = received_counter - counter;
     228:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <counter>
     22c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <counter+0x1>
     230:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <received_counter>
     234:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <received_counter+0x1>
     238:	82 1b       	sub	r24, r18
     23a:	93 0b       	sbc	r25, r19
    if (delta < -2){delta=-2;} 
     23c:	8e 3f       	cpi	r24, 0xFE	; 254
     23e:	4f ef       	ldi	r20, 0xFF	; 255
     240:	94 07       	cpc	r25, r20
     242:	bc f1       	brlt	.+110    	; 0x2b2 <loop+0x10a>
    if (delta > 2){delta= 2;} 
     244:	83 30       	cpi	r24, 0x03	; 3
     246:	91 05       	cpc	r25, r1
     248:	14 f0       	brlt	.+4      	; 0x24e <loop+0xa6>
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     252:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    counter = counter + delta;
     256:	82 0f       	add	r24, r18
     258:	93 1f       	adc	r25, r19
     25a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <counter+0x1>
     25e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <counter>
     262:	ba cf       	rjmp	.-140    	; 0x1d8 <loop+0x30>
void tx_message_success() {
    sent_message = 1;
}

void flash(){
    set_color(RGB(1,1,0));
     264:	85 e0       	ldi	r24, 0x05	; 5
     266:	0e 94 ab 08 	call	0x1156	; 0x1156 <set_color>
    delay(250);
     26a:	8a ef       	ldi	r24, 0xFA	; 250
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay>
    set_color(RGB(0,0,0));
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	0e 94 ab 08 	call	0x1156	; 0x1156 <set_color>
    //set noisy counter_max for next loop.
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     278:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <counter_max_upper>
     27c:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <counter_max_upper+0x1>
     280:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <counter_max_lower>
     284:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <counter_max_lower+0x1>

// a random number generation function, I wrote based on this
// https://stackoverflow.com/questions/24216021/mapping-one-range-of-integers-to-another
int random_number(int output_start, int output_end){
    int output;    
    int input = rand_soft();
     288:	0e 94 24 05 	call	0xa48	; 0xa48 <rand_soft>
    int output_range = output_end - output_start;
    output = input % (output_range + 1);
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	be 01       	movw	r22, r28
     290:	60 1b       	sub	r22, r16
     292:	71 0b       	sbc	r23, r17
     294:	6f 5f       	subi	r22, 0xFF	; 255
     296:	7f 4f       	sbci	r23, 0xFF	; 255
     298:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divmodhi4>
void flash(){
    set_color(RGB(1,1,0));
    delay(250);
    set_color(RGB(0,0,0));
    //set noisy counter_max for next loop.
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     29c:	80 0f       	add	r24, r16
     29e:	91 1f       	adc	r25, r17
     2a0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <counter_max+0x1>
     2a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <counter_max>
    // put your main code here, to be run repeatedly
    message_sent();
    message_received();
    message.data[0] = counter;
    message.crc = message_crc(&message); //be sure to recompile the crc
    if (counter > counter_max){flash();counter=0;}
     2a8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <counter+0x1>
     2ac:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <counter>
     2b0:	ad cf       	rjmp	.-166    	; 0x20c <loop+0x64>
}


void update_clock(){
    delta = received_counter - counter;
    if (delta < -2){delta=-2;} 
     2b2:	8e ef       	ldi	r24, 0xFE	; 254
     2b4:	9f ef       	ldi	r25, 0xFF	; 255
     2b6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     2ba:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
     2be:	cb cf       	rjmp	.-106    	; 0x256 <loop+0xae>

000002c0 <random_number>:
}


// a random number generation function, I wrote based on this
// https://stackoverflow.com/questions/24216021/mapping-one-range-of-integers-to-another
int random_number(int output_start, int output_end){
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8c 01       	movw	r16, r24
     2ca:	eb 01       	movw	r28, r22
    int output;    
    int input = rand_soft();
     2cc:	0e 94 24 05 	call	0xa48	; 0xa48 <rand_soft>
    int output_range = output_end - output_start;
    output = input % (output_range + 1);
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	be 01       	movw	r22, r28
     2d4:	60 1b       	sub	r22, r16
     2d6:	71 0b       	sbc	r23, r17
     2d8:	6f 5f       	subi	r22, 0xFF	; 255
     2da:	7f 4f       	sbci	r23, 0xFF	; 255
     2dc:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divmodhi4>
    output = output + output_start;
    return output;
}
     2e0:	80 0f       	add	r24, r16
     2e2:	91 1f       	adc	r25, r17
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	08 95       	ret

000002ee <flash>:

void tx_message_success() {
    sent_message = 1;
}

void flash(){
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
    set_color(RGB(1,1,0));
     2f6:	85 e0       	ldi	r24, 0x05	; 5
     2f8:	0e 94 ab 08 	call	0x1156	; 0x1156 <set_color>
    delay(250);
     2fc:	8a ef       	ldi	r24, 0xFA	; 250
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay>
    set_color(RGB(0,0,0));
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 ab 08 	call	0x1156	; 0x1156 <set_color>
    //set noisy counter_max for next loop.
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     30a:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <counter_max_upper>
     30e:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <counter_max_upper+0x1>
     312:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <counter_max_lower>
     316:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <counter_max_lower+0x1>

// a random number generation function, I wrote based on this
// https://stackoverflow.com/questions/24216021/mapping-one-range-of-integers-to-another
int random_number(int output_start, int output_end){
    int output;    
    int input = rand_soft();
     31a:	0e 94 24 05 	call	0xa48	; 0xa48 <rand_soft>
    int output_range = output_end - output_start;
    output = input % (output_range + 1);
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	be 01       	movw	r22, r28
     322:	60 1b       	sub	r22, r16
     324:	71 0b       	sbc	r23, r17
     326:	6f 5f       	subi	r22, 0xFF	; 255
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divmodhi4>
void flash(){
    set_color(RGB(1,1,0));
    delay(250);
    set_color(RGB(0,0,0));
    //set noisy counter_max for next loop.
    counter_max = random_number(counter_max_lower, counter_max_upper); 
     32e:	80 0f       	add	r24, r16
     330:	91 1f       	adc	r25, r17
     332:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <counter_max+0x1>
     336:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <counter_max>
    
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	08 95       	ret

00000344 <update_clock>:


void update_clock(){
    delta = received_counter - counter;
     344:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <counter>
     348:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <counter+0x1>
     34c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <received_counter>
     350:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <received_counter+0x1>
     354:	c9 01       	movw	r24, r18
     356:	84 1b       	sub	r24, r20
     358:	95 0b       	sbc	r25, r21
    if (delta < -2){delta=-2;} 
     35a:	8e 3f       	cpi	r24, 0xFE	; 254
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	92 07       	cpc	r25, r18
     360:	6c f4       	brge	.+26     	; 0x37c <update_clock+0x38>
     362:	8e ef       	ldi	r24, 0xFE	; 254
     364:	9f ef       	ldi	r25, 0xFF	; 255
     366:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     36a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    if (delta > 2){delta= 2;} 
    counter = counter + delta;
     36e:	84 0f       	add	r24, r20
     370:	95 1f       	adc	r25, r21
     372:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <counter+0x1>
     376:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <counter>
     37a:	08 95       	ret


void update_clock(){
    delta = received_counter - counter;
    if (delta < -2){delta=-2;} 
    if (delta > 2){delta= 2;} 
     37c:	83 30       	cpi	r24, 0x03	; 3
     37e:	91 05       	cpc	r25, r1
     380:	14 f0       	brlt	.+4      	; 0x386 <update_clock+0x42>
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     38a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    counter = counter + delta;
     38e:	84 0f       	add	r24, r20
     390:	95 1f       	adc	r25, r21
     392:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <counter+0x1>
     396:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <counter>
     39a:	08 95       	ret

0000039c <error_flash>:
}

void error_flash(){
    set_color(RGB(1,1,1));
     39c:	85 e1       	ldi	r24, 0x15	; 21
     39e:	0e 94 ab 08 	call	0x1156	; 0x1156 <set_color>
    delay(100);
     3a2:	84 e6       	ldi	r24, 0x64	; 100
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay>
    set_color(RGB(1,1,1));
     3aa:	85 e1       	ldi	r24, 0x15	; 21
     3ac:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <set_color>

000003b0 <message_sent>:
    
}


void message_sent(){
        if (sent_message){
     3b0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sent_message>
     3b4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sent_message+0x1>
     3b8:	89 2b       	or	r24, r25
     3ba:	21 f0       	breq	.+8      	; 0x3c4 <message_sent+0x14>
        sent_message = 0;
     3bc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <sent_message+0x1>
     3c0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <sent_message>
     3c4:	08 95       	ret

000003c6 <message_received>:
    
    }
}

void message_received(){
        if (new_message){
     3c6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <new_message>
     3ca:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <new_message+0x1>
     3ce:	89 2b       	or	r24, r25
     3d0:	11 f1       	breq	.+68     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
        new_message = 0;
     3d2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <new_message+0x1>
     3d6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <new_message>
    
}


void update_clock(){
    delta = received_counter - counter;
     3da:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <counter>
     3de:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <counter+0x1>
     3e2:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <received_counter>
     3e6:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <received_counter+0x1>
     3ea:	c9 01       	movw	r24, r18
     3ec:	84 1b       	sub	r24, r20
     3ee:	95 0b       	sbc	r25, r21
    if (delta < -2){delta=-2;} 
     3f0:	8e 3f       	cpi	r24, 0xFE	; 254
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	92 07       	cpc	r25, r18
     3f6:	84 f0       	brlt	.+32     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
    if (delta > 2){delta= 2;} 
     3f8:	83 30       	cpi	r24, 0x03	; 3
     3fa:	91 05       	cpc	r25, r1
     3fc:	14 f0       	brlt	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     406:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    counter = counter + delta;
     40a:	84 0f       	add	r24, r20
     40c:	95 1f       	adc	r25, r21
     40e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <counter+0x1>
     412:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <counter>
     416:	08 95       	ret
}


void update_clock(){
    delta = received_counter - counter;
    if (delta < -2){delta=-2;} 
     418:	8e ef       	ldi	r24, 0xFE	; 254
     41a:	9f ef       	ldi	r25, 0xFF	; 255
     41c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
     420:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
     424:	f2 cf       	rjmp	.-28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

00000426 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     426:	08 95       	ret

00000428 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 95       	ret

0000042e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     42e:	08 95       	ret

00000430 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
    cli();
     43e:	f8 94       	cli

    ports_off();
     440:	14 b8       	out	0x04, r1	; 4
     442:	17 b8       	out	0x07, r1	; 7
     444:	1a b8       	out	0x0a, r1	; 10
     446:	15 b8       	out	0x05, r1	; 5
     448:	18 b8       	out	0x08, r1	; 8
     44a:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     44c:	52 9a       	sbi	0x0a, 2	; 10
     44e:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     450:	14 bc       	out	0x24, r1	; 36
     452:	85 e0       	ldi	r24, 0x05	; 5
     454:	85 bd       	out	0x25, r24	; 37
     456:	8f ef       	ldi	r24, 0xFF	; 255
     458:	87 bd       	out	0x27, r24	; 39
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    rx_timer_setup();
     460:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     464:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     468:	2f e8       	ldi	r18, 0x8F	; 143
     46a:	3b e0       	ldi	r19, 0x0B	; 11
     46c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     470:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     474:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    motors_setup();
     478:	53 98       	cbi	0x0a, 3	; 10
     47a:	23 98       	cbi	0x04, 3	; 4
     47c:	91 ea       	ldi	r25, 0xA1	; 161
     47e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     482:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     486:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     48a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    acomp_setup();
     48e:	8b e0       	ldi	r24, 0x0B	; 11
     490:	80 bf       	out	0x30, r24	; 48
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
    adc_setup();
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     49e:	83 e8       	ldi	r24, 0x83	; 131
     4a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     4a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     4a8:	80 64       	ori	r24, 0x40	; 64
     4aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     4ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     4b2:	86 fd       	sbrc	r24, 6
     4b4:	fc cf       	rjmp	.-8      	; 0x4ae <kilo_init+0x7e>
    adc_trigger_high_gain();
     4b6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     4ba:	83 ea       	ldi	r24, 0xA3	; 163
     4bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
    if (osccal != 0xFF)
     4ce:	8f 3f       	cpi	r24, 0xFF	; 255
     4d0:	11 f0       	breq	.+4      	; 0x4d6 <kilo_init+0xa6>
        OSCCAL = osccal;
     4d2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>

    rx_busy = 0;
     4d6:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_busy>
    rx_leadingbit = 1;
     4da:	c1 e0       	ldi	r28, 0x01	; 1
     4dc:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <rx_leadingbit>
    rx_leadingbyte = 1;
     4e0:	c0 93 74 01 	sts	0x0174, r28	; 0x800174 <rx_leadingbyte>
    rx_byteindex = 0;
     4e4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <rx_byteindex>
    rx_bytevalue = 0;
     4e8:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     4ec:	80 e9       	ldi	r24, 0x90	; 144
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     4f4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     4f8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <tx_mask>
     4fc:	88 73       	andi	r24, 0x38	; 56
     4fe:	11 f0       	breq	.+4      	; 0x504 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     500:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <tx_mask>
    tx_clock = 0;
     504:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <tx_clock+0x1>
     508:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <tx_clock>
    tx_increment = 255;
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <tx_increment+0x1>
     514:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <tx_increment>
    kilo_ticks = 0;
     518:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <kilo_ticks>
     51c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <kilo_ticks+0x1>
     520:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <kilo_ticks+0x2>
     524:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <kilo_ticks+0x3>
    kilo_state = IDLE;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <kilo_state>
    kilo_tx_period = 3906;
     52e:	82 e4       	ldi	r24, 0x42	; 66
     530:	9f e0       	ldi	r25, 0x0F	; 15
     532:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <kilo_tx_period+0x1>
     536:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     53a:	80 eb       	ldi	r24, 0xB0	; 176
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     542:	c8 2f       	mov	r28, r24
     544:	81 eb       	ldi	r24, 0xB1	; 177
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     54c:	2c 2f       	mov	r18, r28
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	38 2b       	or	r19, r24
     552:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <kilo_uid+0x1>
     556:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     55a:	85 e0       	ldi	r24, 0x05	; 5
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     562:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     566:	89 e0       	ldi	r24, 0x09	; 9
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     56e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     572:	8c e0       	ldi	r24, 0x0C	; 12
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     57a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     57e:	84 e1       	ldi	r24, 0x14	; 20
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     586:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <kilo_straight_right>
     58a:	58 e5       	ldi	r21, 0x58	; 88
     58c:	e5 2e       	mov	r14, r21
     58e:	51 e0       	ldi	r21, 0x01	; 1
     590:	f5 2e       	mov	r15, r21
     592:	01 e3       	ldi	r16, 0x31	; 49
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	c0 e2       	ldi	r28, 0x20	; 32
     598:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     59a:	ce 01       	movw	r24, r28
     59c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     5a0:	d8 2e       	mov	r13, r24
     5a2:	ce 01       	movw	r24, r28
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     5aa:	2d 2d       	mov	r18, r13
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	32 2f       	mov	r19, r18
     5b0:	22 27       	eor	r18, r18
     5b2:	28 2b       	or	r18, r24
     5b4:	f7 01       	movw	r30, r14
     5b6:	21 93       	st	Z+, r18
     5b8:	31 93       	st	Z+, r19
     5ba:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     5bc:	ce 01       	movw	r24, r28
     5be:	c0 96       	adiw	r24, 0x30	; 48
     5c0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     5c4:	d8 2e       	mov	r13, r24
     5c6:	ce 01       	movw	r24, r28
     5c8:	c1 96       	adiw	r24, 0x31	; 49
     5ca:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <eeprom_read_byte>
     5ce:	2d 2d       	mov	r18, r13
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	32 2f       	mov	r19, r18
     5d4:	22 27       	eor	r18, r18
     5d6:	28 2b       	or	r18, r24
     5d8:	f8 01       	movw	r30, r16
     5da:	21 93       	st	Z+, r18
     5dc:	31 93       	st	Z+, r19
     5de:	8f 01       	movw	r16, r30
     5e0:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     5e2:	cc 33       	cpi	r28, 0x3C	; 60
     5e4:	d1 05       	cpc	r29, r1
     5e6:	c9 f6       	brne	.-78     	; 0x59a <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     5e8:	78 94       	sei
}
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	df 90       	pop	r13
     5f8:	08 95       	ret

000005fa <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     5fa:	1f 92       	push	r1
     5fc:	0f 92       	push	r0
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	0f 92       	push	r0
     602:	11 24       	eor	r1, r1
     604:	8f 93       	push	r24
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	a8 95       	wdr
     60c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     610:	88 61       	ori	r24, 0x18	; 24
     612:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     616:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     61a:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     61c:	8f 91       	pop	r24
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     628:	3c 01       	movw	r6, r24
     62a:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     62c:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     62e:	99 24       	eor	r9, r9
     630:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     636:	96 e0       	ldi	r25, 0x06	; 6
     638:	a9 2e       	mov	r10, r25
     63a:	23 e8       	ldi	r18, 0x83	; 131
     63c:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     63e:	38 e1       	ldi	r19, 0x18	; 24
     640:	d3 2e       	mov	r13, r19
     642:	49 e2       	ldi	r20, 0x29	; 41
     644:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     646:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <kilo_state>
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	e7 30       	cpi	r30, 0x07	; 7
     64e:	f1 05       	cpc	r31, r1
     650:	d0 f7       	brcc	.-12     	; 0x646 <kilo_start+0x1e>
     652:	ec 5c       	subi	r30, 0xCC	; 204
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     65a:	11 23       	and	r17, r17
     65c:	09 f4       	brne	.+2      	; 0x660 <kilo_start+0x38>
     65e:	05 c1       	rjmp	.+522    	; 0x86a <kilo_start+0x242>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     660:	c0 92 23 01 	sts	0x0123, r12	; 0x800123 <kilo_state>
     664:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     666:	fe 01       	movw	r30, r28
     668:	09 95       	icall
                break;
     66a:	ed cf       	rjmp	.-38     	; 0x646 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     66c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_busy>
     670:	81 11       	cpse	r24, r1
     672:	05 c1       	rjmp	.+522    	; 0x87e <kilo_start+0x256>
        cli();                                    // disable interrupts
     674:	f8 94       	cli
        adc_setup_conversion(6);
     676:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     67a:	b0 92 7a 00 	sts	0x007A, r11	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     67e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     682:	80 64       	ori	r24, 0x40	; 64
     684:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     688:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     68c:	86 fd       	sbrc	r24, 6
     68e:	fc cf       	rjmp	.-8      	; 0x688 <kilo_start+0x60>
        voltage = ADCW;                           // store AD result
     690:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     694:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     698:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     69a:	8b 3a       	cpi	r24, 0xAB	; 171
     69c:	e2 e0       	ldi	r30, 0x02	; 2
     69e:	9e 07       	cpc	r25, r30
     6a0:	0c f0       	brlt	.+2      	; 0x6a4 <kilo_start+0x7c>
     6a2:	e6 c0       	rjmp	.+460    	; 0x870 <kilo_start+0x248>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     6a4:	89 38       	cpi	r24, 0x89	; 137
     6a6:	f2 e0       	ldi	r31, 0x02	; 2
     6a8:	9f 07       	cpc	r25, r31
     6aa:	0c f0       	brlt	.+2      	; 0x6ae <kilo_start+0x86>
     6ac:	ef c0       	rjmp	.+478    	; 0x88c <kilo_start+0x264>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     6ae:	87 36       	cpi	r24, 0x67	; 103
     6b0:	92 40       	sbci	r25, 0x02	; 2
     6b2:	0c f4       	brge	.+2      	; 0x6b6 <kilo_start+0x8e>
     6b4:	e4 c0       	rjmp	.+456    	; 0x87e <kilo_start+0x256>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     6b6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     6b8:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6ba:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6bc:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6be:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6c0:	3c 98       	cbi	0x07, 4	; 7
     6c2:	c1 cf       	rjmp	.-126    	; 0x646 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6c4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6c6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     6c8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     6ca:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6cc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6ce:	3c 98       	cbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d0:	ef ec       	ldi	r30, 0xCF	; 207
     6d2:	f7 e0       	ldi	r31, 0x07	; 7
     6d4:	31 97       	sbiw	r30, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <kilo_start+0xac>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <kilo_start+0xb2>
     6da:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     6dc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     6de:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     6e0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     6e2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     6e4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     6e6:	3c 98       	cbi	0x07, 4	; 7
     6e8:	ff ef       	ldi	r31, 0xFF	; 255
     6ea:	21 ee       	ldi	r18, 0xE1	; 225
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	f1 50       	subi	r31, 0x01	; 1
     6f0:	20 40       	sbci	r18, 0x00	; 0
     6f2:	80 40       	sbci	r24, 0x00	; 0
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <kilo_start+0xc6>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <kilo_start+0xd0>
     6f8:	00 00       	nop
     6fa:	a5 cf       	rjmp	.-182    	; 0x646 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     6fc:	f8 94       	cli
                acomp_off();
     6fe:	80 b7       	in	r24, 0x30	; 48
     700:	87 7f       	andi	r24, 0xF7	; 247
     702:	80 bf       	out	0x30, r24	; 48
                adc_off();
     704:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     708:	8f 77       	andi	r24, 0x7F	; 127
     70a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
                ports_off();
     70e:	14 b8       	out	0x04, r1	; 4
     710:	17 b8       	out	0x07, r1	; 7
     712:	1a b8       	out	0x0a, r1	; 10
     714:	15 b8       	out	0x05, r1	; 5
     716:	18 b8       	out	0x08, r1	; 8
     718:	1b b8       	out	0x0b, r1	; 11
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	a8 95       	wdr
     720:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__DATA_REGION_ORIGIN__>
     724:	0f be       	out	0x3f, r0	; 63
     726:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     72a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     72e:	80 64       	ori	r24, 0x40	; 64
     730:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     734:	83 b7       	in	r24, 0x33	; 51
     736:	81 7f       	andi	r24, 0xF1	; 241
     738:	84 60       	ori	r24, 0x04	; 4
     73a:	83 bf       	out	0x33, r24	; 51
                cli();
     73c:	f8 94       	cli
                sleep_enable();
     73e:	83 b7       	in	r24, 0x33	; 51
     740:	81 60       	ori	r24, 0x01	; 1
     742:	83 bf       	out	0x33, r24	; 51
                sei();
     744:	78 94       	sei
                sleep_cpu();
     746:	88 95       	sleep
                sleep_disable();
     748:	83 b7       	in	r24, 0x33	; 51
     74a:	8e 7f       	andi	r24, 0xFE	; 254
     74c:	83 bf       	out	0x33, r24	; 51
                sei();
     74e:	78 94       	sei
                rx_busy = 0;
     750:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_busy>
                ports_on();
     754:	52 9a       	sbi	0x0a, 2	; 10
     756:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     758:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     75c:	80 68       	ori	r24, 0x80	; 128
     75e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     762:	87 e5       	ldi	r24, 0x57	; 87
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <kilo_start+0x13e>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <kilo_start+0x144>
     76c:	00 00       	nop
                _delay_us(300);
                acomp_on();
     76e:	80 b7       	in	r24, 0x30	; 48
     770:	88 61       	ori	r24, 0x18	; 24
     772:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     774:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     776:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     778:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     77a:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     77c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     77e:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     780:	ef e1       	ldi	r30, 0x1F	; 31
     782:	fe e4       	ldi	r31, 0x4E	; 78
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <kilo_start+0x15c>
     788:	00 c0       	rjmp	.+0      	; 0x78a <kilo_start+0x162>
     78a:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     78c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_busy>
     790:	81 11       	cpse	r24, r1
     792:	5b c0       	rjmp	.+182    	; 0x84a <kilo_start+0x222>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     794:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     796:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     798:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     79a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     79c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     79e:	3c 98       	cbi	0x07, 4	; 7
     7a0:	52 cf       	rjmp	.-348    	; 0x646 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     7a2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cur_motion>
     7a6:	81 11       	cpse	r24, r1
     7a8:	25 c0       	rjmp	.+74     	; 0x7f4 <kilo_start+0x1cc>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7aa:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     7ae:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     7b2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <prev_motion>
     7b6:	47 cf       	rjmp	.-370    	; 0x646 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     7b8:	48 99       	sbic	0x09, 0	; 9
     7ba:	ec cf       	rjmp	.-40     	; 0x794 <kilo_start+0x16c>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     7bc:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7be:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7c0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7c2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7c4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7c6:	3c 98       	cbi	0x07, 4	; 7
     7c8:	8f ec       	ldi	r24, 0xCF	; 207
     7ca:	97 e0       	ldi	r25, 0x07	; 7
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <kilo_start+0x1a4>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <kilo_start+0x1aa>
     7d2:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     7d4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     7d6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     7d8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     7da:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     7dc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     7de:	3c 98       	cbi	0x07, 4	; 7
     7e0:	9f ef       	ldi	r25, 0xFF	; 255
     7e2:	e1 ee       	ldi	r30, 0xE1	; 225
     7e4:	f4 e0       	ldi	r31, 0x04	; 4
     7e6:	91 50       	subi	r25, 0x01	; 1
     7e8:	e0 40       	sbci	r30, 0x00	; 0
     7ea:	f0 40       	sbci	r31, 0x00	; 0
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <kilo_start+0x1be>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <kilo_start+0x1c8>
     7f0:	00 00       	nop
     7f2:	29 cf       	rjmp	.-430    	; 0x646 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     7f4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <cur_motion>
     7f8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <prev_motion>
     7fc:	98 17       	cp	r25, r24
     7fe:	09 f4       	brne	.+2      	; 0x802 <kilo_start+0x1da>
     800:	22 cf       	rjmp	.-444    	; 0x646 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     802:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cur_motion>
     806:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     80a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cur_motion>
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	09 f4       	brne	.+2      	; 0x814 <kilo_start+0x1ec>
     812:	50 c0       	rjmp	.+160    	; 0x8b4 <kilo_start+0x28c>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     814:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     818:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     81c:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	d9 f1       	breq	.+118    	; 0x89a <kilo_start+0x272>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     824:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     828:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     82c:	8f e2       	ldi	r24, 0x2F	; 47
     82e:	95 e7       	ldi	r25, 0x75	; 117
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <kilo_start+0x208>
     834:	00 c0       	rjmp	.+0      	; 0x836 <kilo_start+0x20e>
     836:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     838:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <kilo_straight_right>
     83c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     840:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     844:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     848:	fe ce       	rjmp	.-516    	; 0x646 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     84a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     84c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     84e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     850:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     852:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     854:	3c 98       	cbi	0x07, 4	; 7
     856:	ff ef       	ldi	r31, 0xFF	; 255
     858:	20 e7       	ldi	r18, 0x70	; 112
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	f1 50       	subi	r31, 0x01	; 1
     85e:	20 40       	sbci	r18, 0x00	; 0
     860:	80 40       	sbci	r24, 0x00	; 0
     862:	e1 f7       	brne	.-8      	; 0x85c <kilo_start+0x234>
     864:	00 c0       	rjmp	.+0      	; 0x866 <kilo_start+0x23e>
     866:	00 00       	nop
     868:	95 cf       	rjmp	.-214    	; 0x794 <kilo_start+0x16c>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     86a:	f3 01       	movw	r30, r6
     86c:	09 95       	icall
     86e:	f8 ce       	rjmp	.-528    	; 0x660 <kilo_start+0x38>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     870:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     872:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     874:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     876:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     878:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     87a:	3c 98       	cbi	0x07, 4	; 7
     87c:	e4 ce       	rjmp	.-568    	; 0x646 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     87e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     880:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     882:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     884:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     886:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     888:	3c 98       	cbi	0x07, 4	; 7
     88a:	dd ce       	rjmp	.-582    	; 0x646 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     88c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     88e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     890:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     892:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     894:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     896:	3c 9a       	sbi	0x07, 4	; 7
     898:	d6 ce       	rjmp	.-596    	; 0x646 <kilo_start+0x1e>
     89a:	ef e2       	ldi	r30, 0x2F	; 47
     89c:	f5 e7       	ldi	r31, 0x75	; 117
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <kilo_start+0x276>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <kilo_start+0x27c>
     8a4:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     8a6:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8aa:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     8ae:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     8b2:	c9 ce       	rjmp	.-622    	; 0x646 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8b4:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     8b8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     8bc:	8f e2       	ldi	r24, 0x2F	; 47
     8be:	95 e7       	ldi	r25, 0x75	; 117
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <kilo_start+0x298>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <kilo_start+0x29e>
     8c6:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     8c8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8cc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     8d0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     8d4:	b8 ce       	rjmp	.-656    	; 0x646 <kilo_start+0x1e>

000008d6 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <delay+0x10>
     8d8:	ef ec       	ldi	r30, 0xCF	; 207
     8da:	f7 e0       	ldi	r31, 0x07	; 7
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <delay+0x6>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <delay+0xc>
     8e2:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     8e4:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	b9 f7       	brne	.-18     	; 0x8d8 <delay+0x2>
     8ea:	08 95       	ret

000008ec <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8ec:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     8f0:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     8f4:	08 95       	ret

000008f6 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     8fc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     900:	8f e0       	ldi	r24, 0x0F	; 15
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	ef ec       	ldi	r30, 0xCF	; 207
     906:	f7 e0       	ldi	r31, 0x07	; 7
     908:	31 97       	sbiw	r30, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <__stack+0x9>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <__stack+0xf>
     90e:	00 00       	nop
     910:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     912:	c1 f7       	brne	.-16     	; 0x904 <__stack+0x5>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     914:	08 95       	ret

00000916 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     916:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_busy>
     91a:	81 11       	cpse	r24, r1
     91c:	1e c0       	rjmp	.+60     	; 0x95a <get_ambientlight+0x44>
        cli();
     91e:	f8 94       	cli
        adc_setup_conversion(7);
     920:	87 e0       	ldi	r24, 0x07	; 7
     922:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     926:	83 e8       	ldi	r24, 0x83	; 131
     928:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     92c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     930:	80 64       	ori	r24, 0x40	; 64
     932:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     936:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     93a:	86 fd       	sbrc	r24, 6
     93c:	fc cf       	rjmp	.-8      	; 0x936 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     93e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     942:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     946:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     94a:	23 ea       	ldi	r18, 0xA3	; 163
     94c:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
        sei();                                    // reenable interrupts
     956:	78 94       	sei
     958:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     95e:	08 95       	ret

00000960 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     960:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_busy>
     964:	81 11       	cpse	r24, r1
     966:	1e c0       	rjmp	.+60     	; 0x9a4 <get_temperature+0x44>
        cli();
     968:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     96a:	88 ec       	ldi	r24, 0xC8	; 200
     96c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     970:	87 e8       	ldi	r24, 0x87	; 135
     972:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     976:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     97a:	80 64       	ori	r24, 0x40	; 64
     97c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     980:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     984:	86 fd       	sbrc	r24, 6
     986:	fc cf       	rjmp	.-8      	; 0x980 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     988:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     98c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     990:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     994:	23 ea       	ldi	r18, 0xA3	; 163
     996:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     99a:	21 e0       	ldi	r18, 0x01	; 1
     99c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
        sei();                                    // reenable interrupts
     9a0:	78 94       	sei
     9a2:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     9a8:	08 95       	ret

000009aa <rand_hard>:

uint8_t rand_hard() {
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	e0 e0       	ldi	r30, 0x00	; 0
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     9b6:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     9b8:	03 ea       	ldi	r16, 0xA3	; 163
     9ba:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     9bc:	d6 e0       	ldi	r29, 0x06	; 6
     9be:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     9c0:	a1 e0       	ldi	r26, 0x01	; 1
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     9c4:	60 e8       	ldi	r22, 0x80	; 128
     9c6:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     9c8:	f8 94       	cli
            adc_setup_conversion(6);
     9ca:	d0 93 7c 00 	sts	0x007C, r29	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     9ce:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_start_conversion();
     9d2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     9d6:	90 64       	ori	r25, 0x40	; 64
     9d8:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_finish_conversion();
     9dc:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     9e0:	96 fd       	sbrc	r25, 6
     9e2:	fc cf       	rjmp	.-8      	; 0x9dc <rand_hard+0x32>
            a = ADCW&0x1;
     9e4:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     9e8:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     9ec:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     9ee:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     9f2:	90 64       	ori	r25, 0x40	; 64
     9f4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_finish_conversion();
     9f8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     9fc:	96 fd       	sbrc	r25, 6
     9fe:	fc cf       	rjmp	.-8      	; 0x9f8 <rand_hard+0x4e>
            b = ADCW&0x1;
     a00:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     a04:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
            adc_trigger_high_gain();
     a08:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     a0c:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     a10:	10 93 7b 00 	sts	0x007B, r17	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
            sei();
     a14:	78 94       	sei
            tries++;
        } while (a == b && tries < 128);
     a16:	41 70       	andi	r20, 0x01	; 1
     a18:	24 13       	cpse	r18, r20
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <rand_hard+0x78>
     a1c:	61 50       	subi	r22, 0x01	; 1
     a1e:	71 09       	sbc	r23, r1
     a20:	99 f6       	brne	.-90     	; 0x9c8 <rand_hard+0x1e>
        if (a)
     a22:	22 23       	and	r18, r18
     a24:	39 f0       	breq	.+14     	; 0xa34 <rand_hard+0x8a>
            num |= (1<<i);
     a26:	9d 01       	movw	r18, r26
     a28:	0e 2e       	mov	r0, r30
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <rand_hard+0x84>
     a2c:	22 0f       	add	r18, r18
     a2e:	0a 94       	dec	r0
     a30:	ea f7       	brpl	.-6      	; 0xa2c <rand_hard+0x82>
     a32:	82 2b       	or	r24, r18
     a34:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     a36:	e8 30       	cpi	r30, 0x08	; 8
     a38:	f1 05       	cpc	r31, r1
     a3a:	09 f0       	breq	.+2      	; 0xa3e <rand_hard+0x94>
     a3c:	c3 cf       	rjmp	.-122    	; 0x9c4 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a48:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <seed>
     a4c:	98 2f       	mov	r25, r24
     a4e:	99 0f       	add	r25, r25
     a50:	99 0f       	add	r25, r25
     a52:	99 0f       	add	r25, r25
     a54:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a56:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <accumulator>
     a5a:	21 e0       	ldi	r18, 0x01	; 1
     a5c:	29 0f       	add	r18, r25
     a5e:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <accumulator>
     a62:	28 2f       	mov	r18, r24
     a64:	22 95       	swap	r18
     a66:	26 95       	lsr	r18
     a68:	27 70       	andi	r18, 0x07	; 7
     a6a:	82 27       	eor	r24, r18
     a6c:	96 95       	lsr	r25
     a6e:	96 95       	lsr	r25
     a70:	89 27       	eor	r24, r25
     a72:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <seed>
    return seed;
}
     a76:	08 95       	ret

00000a78 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a78:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <seed>
     a7c:	08 95       	ret

00000a7e <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a7e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_busy>
     a82:	81 11       	cpse	r24, r1
     a84:	16 c0       	rjmp	.+44     	; 0xab2 <get_voltage+0x34>
        cli();                                    // disable interrupts
     a86:	f8 94       	cli
        adc_setup_conversion(6);
     a88:	86 e0       	ldi	r24, 0x06	; 6
     a8a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     a8e:	83 e8       	ldi	r24, 0x83	; 131
     a90:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     a94:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     a98:	80 64       	ori	r24, 0x40	; 64
     a9a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     a9e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     aa2:	86 fd       	sbrc	r24, 6
     aa4:	fc cf       	rjmp	.-8      	; 0xa9e <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     aa6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     aaa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     aae:	78 94       	sei
     ab0:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     ab6:	08 95       	ret

00000ab8 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     ab8:	2f 92       	push	r2
     aba:	3f 92       	push	r3
     abc:	4f 92       	push	r4
     abe:	5f 92       	push	r5
     ac0:	6f 92       	push	r6
     ac2:	7f 92       	push	r7
     ac4:	8f 92       	push	r8
     ac6:	9f 92       	push	r9
     ac8:	af 92       	push	r10
     aca:	bf 92       	push	r11
     acc:	cf 92       	push	r12
     ace:	df 92       	push	r13
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	00 d0       	rcall	.+0      	; 0xade <estimate_distance+0x26>
     ade:	00 d0       	rcall	.+0      	; 0xae0 <estimate_distance+0x28>
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <estimate_distance+0x2a>
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     ae8:	dc 01       	movw	r26, r24
     aea:	12 96       	adiw	r26, 0x02	; 2
     aec:	0d 90       	ld	r0, X+
     aee:	bc 91       	ld	r27, X
     af0:	a0 2d       	mov	r26, r0
     af2:	be 83       	std	Y+6, r27	; 0x06
     af4:	ad 83       	std	Y+5, r26	; 0x05
     af6:	a4 38       	cpi	r26, 0x84	; 132
     af8:	e3 e0       	ldi	r30, 0x03	; 3
     afa:	be 07       	cpc	r27, r30
     afc:	0c f0       	brlt	.+2      	; 0xb00 <estimate_distance+0x48>
     afe:	cb c0       	rjmp	.+406    	; 0xc96 <estimate_distance+0x1de>
        if (dist->high_gain > kilo_irhigh[0]) {
     b00:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <kilo_irhigh>
     b04:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <kilo_irhigh+0x1>
     b08:	8a 17       	cp	r24, r26
     b0a:	9b 07       	cpc	r25, r27
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <estimate_distance+0x58>
     b0e:	8c c1       	rjmp	.+792    	; 0xe28 <estimate_distance+0x370>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     b10:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <kilo_irhigh+0x2>
     b14:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <kilo_irhigh+0x3>
     b18:	0a 17       	cp	r16, r26
     b1a:	1b 07       	cpc	r17, r27
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <estimate_distance+0x68>
     b1e:	22 c2       	rjmp	.+1092   	; 0xf64 <estimate_distance+0x4ac>
     b20:	00 91 35 01 	lds	r16, 0x0135	; 0x800135 <kilo_irhigh+0x4>
     b24:	10 91 36 01 	lds	r17, 0x0136	; 0x800136 <kilo_irhigh+0x5>
     b28:	0a 17       	cp	r16, r26
     b2a:	1b 07       	cpc	r17, r27
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <estimate_distance+0x78>
     b2e:	28 c2       	rjmp	.+1104   	; 0xf80 <estimate_distance+0x4c8>
     b30:	00 91 37 01 	lds	r16, 0x0137	; 0x800137 <kilo_irhigh+0x6>
     b34:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <kilo_irhigh+0x7>
     b38:	0a 17       	cp	r16, r26
     b3a:	1b 07       	cpc	r17, r27
     b3c:	08 f4       	brcc	.+2      	; 0xb40 <estimate_distance+0x88>
     b3e:	24 c2       	rjmp	.+1096   	; 0xf88 <estimate_distance+0x4d0>
     b40:	00 91 39 01 	lds	r16, 0x0139	; 0x800139 <kilo_irhigh+0x8>
     b44:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <kilo_irhigh+0x9>
     b48:	0a 17       	cp	r16, r26
     b4a:	1b 07       	cpc	r17, r27
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <estimate_distance+0x98>
     b4e:	25 c2       	rjmp	.+1098   	; 0xf9a <estimate_distance+0x4e2>
     b50:	00 91 3b 01 	lds	r16, 0x013B	; 0x80013b <kilo_irhigh+0xa>
     b54:	10 91 3c 01 	lds	r17, 0x013C	; 0x80013c <kilo_irhigh+0xb>
     b58:	0a 17       	cp	r16, r26
     b5a:	1b 07       	cpc	r17, r27
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <estimate_distance+0xa8>
     b5e:	e6 c1       	rjmp	.+972    	; 0xf2c <estimate_distance+0x474>
     b60:	00 91 3d 01 	lds	r16, 0x013D	; 0x80013d <kilo_irhigh+0xc>
     b64:	10 91 3e 01 	lds	r17, 0x013E	; 0x80013e <kilo_irhigh+0xd>
     b68:	0a 17       	cp	r16, r26
     b6a:	1b 07       	cpc	r17, r27
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <estimate_distance+0xb8>
     b6e:	1e c2       	rjmp	.+1084   	; 0xfac <estimate_distance+0x4f4>
     b70:	00 91 3f 01 	lds	r16, 0x013F	; 0x80013f <kilo_irhigh+0xe>
     b74:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <kilo_irhigh+0xf>
     b78:	0a 17       	cp	r16, r26
     b7a:	1b 07       	cpc	r17, r27
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <estimate_distance+0xc8>
     b7e:	1f c2       	rjmp	.+1086   	; 0xfbe <estimate_distance+0x506>
     b80:	00 91 41 01 	lds	r16, 0x0141	; 0x800141 <kilo_irhigh+0x10>
     b84:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <kilo_irhigh+0x11>
     b88:	0a 17       	cp	r16, r26
     b8a:	1b 07       	cpc	r17, r27
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <estimate_distance+0xd8>
     b8e:	25 c2       	rjmp	.+1098   	; 0xfda <estimate_distance+0x522>
     b90:	00 91 43 01 	lds	r16, 0x0143	; 0x800143 <kilo_irhigh+0x12>
     b94:	10 91 44 01 	lds	r17, 0x0144	; 0x800144 <kilo_irhigh+0x13>
     b98:	0a 17       	cp	r16, r26
     b9a:	1b 07       	cpc	r17, r27
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <estimate_distance+0xe8>
     b9e:	26 c2       	rjmp	.+1100   	; 0xfec <estimate_distance+0x534>
     ba0:	00 91 45 01 	lds	r16, 0x0145	; 0x800145 <kilo_irhigh+0x14>
     ba4:	10 91 46 01 	lds	r17, 0x0146	; 0x800146 <kilo_irhigh+0x15>
     ba8:	0a 17       	cp	r16, r26
     baa:	1b 07       	cpc	r17, r27
     bac:	08 f4       	brcc	.+2      	; 0xbb0 <estimate_distance+0xf8>
     bae:	22 c2       	rjmp	.+1092   	; 0xff4 <estimate_distance+0x53c>
     bb0:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <kilo_irhigh+0x16>
     bb4:	10 91 48 01 	lds	r17, 0x0148	; 0x800148 <kilo_irhigh+0x17>
     bb8:	0a 17       	cp	r16, r26
     bba:	1b 07       	cpc	r17, r27
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <estimate_distance+0x108>
     bbe:	23 c2       	rjmp	.+1094   	; 0x1006 <estimate_distance+0x54e>
     bc0:	00 91 49 01 	lds	r16, 0x0149	; 0x800149 <kilo_irhigh+0x18>
     bc4:	10 91 4a 01 	lds	r17, 0x014A	; 0x80014a <kilo_irhigh+0x19>
     bc8:	0a 17       	cp	r16, r26
     bca:	1b 07       	cpc	r17, r27
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <estimate_distance+0x118>
     bce:	24 c2       	rjmp	.+1096   	; 0x1018 <estimate_distance+0x560>
     bd0:	00 91 4b 01 	lds	r16, 0x014B	; 0x80014b <kilo_irhigh+0x1a>
     bd4:	10 91 4c 01 	lds	r17, 0x014C	; 0x80014c <kilo_irhigh+0x1b>
     bd8:	0a 17       	cp	r16, r26
     bda:	1b 07       	cpc	r17, r27
     bdc:	08 f4       	brcc	.+2      	; 0xbe0 <estimate_distance+0x128>
     bde:	25 c2       	rjmp	.+1098   	; 0x102a <estimate_distance+0x572>
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 ed       	ldi	r26, 0xD0	; 208
     be6:	b0 e4       	ldi	r27, 0x40	; 64
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	ab 83       	std	Y+3, r26	; 0x03
     bee:	bc 83       	std	Y+4, r27	; 0x04
     bf0:	2c e0       	ldi	r18, 0x0C	; 12
     bf2:	e2 2e       	mov	r14, r18
     bf4:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     bf6:	f7 01       	movw	r30, r14
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	ef 5c       	subi	r30, 0xCF	; 207
     bfe:	fe 4f       	sbci	r31, 0xFE	; 254
     c00:	80 81       	ld	r24, Z
     c02:	91 81       	ldd	r25, Z+1	; 0x01
     c04:	b8 01       	movw	r22, r16
     c06:	68 1b       	sub	r22, r24
     c08:	79 0b       	sbc	r23, r25
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatunsisf>
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	0e 94 8f 0c 	call	0x191e	; 0x191e <__addsf3>
     c1a:	6b 01       	movw	r12, r22
     c1c:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     c1e:	ad 81       	ldd	r26, Y+5	; 0x05
     c20:	be 81       	ldd	r27, Y+6	; 0x06
     c22:	bd 01       	movw	r22, r26
     c24:	bb 0f       	add	r27, r27
     c26:	88 0b       	sbc	r24, r24
     c28:	99 0b       	sbc	r25, r25
     c2a:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__floatsisf>
     c2e:	4b 01       	movw	r8, r22
     c30:	5c 01       	movw	r10, r24
     c32:	b8 01       	movw	r22, r16
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatunsisf>
     c3c:	2b 01       	movw	r4, r22
     c3e:	3c 01       	movw	r6, r24
     c40:	29 81       	ldd	r18, Y+1	; 0x01
     c42:	3a 81       	ldd	r19, Y+2	; 0x02
     c44:	4b 81       	ldd	r20, Y+3	; 0x03
     c46:	5c 81       	ldd	r21, Y+4	; 0x04
     c48:	c7 01       	movw	r24, r14
     c4a:	b6 01       	movw	r22, r12
     c4c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__mulsf3>
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
     c54:	c3 01       	movw	r24, r6
     c56:	b2 01       	movw	r22, r4
     c58:	0e 94 8e 0c 	call	0x191c	; 0x191c <__subsf3>
     c5c:	9b 01       	movw	r18, r22
     c5e:	ac 01       	movw	r20, r24
     c60:	c5 01       	movw	r24, r10
     c62:	b4 01       	movw	r22, r8
     c64:	0e 94 8e 0c 	call	0x191c	; 0x191c <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e2       	ldi	r20, 0x20	; 32
     c6e:	51 e4       	ldi	r21, 0x41	; 65
     c70:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__mulsf3>
     c74:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fixsfsi>
     c78:	8b 01       	movw	r16, r22
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fixsfsi>
     c82:	ab 01       	movw	r20, r22
     c84:	bc 01       	movw	r22, r24
     c86:	c8 01       	movw	r24, r16
     c88:	ba 01       	movw	r22, r20
     c8a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divmodhi4>
     c8e:	69 83       	std	Y+1, r22	; 0x01
     c90:	ed 81       	ldd	r30, Y+5	; 0x05
     c92:	fe 81       	ldd	r31, Y+6	; 0x06
     c94:	cb c0       	rjmp	.+406    	; 0xe2c <estimate_distance+0x374>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     c96:	dc 01       	movw	r26, r24
     c98:	cd 90       	ld	r12, X+
     c9a:	dc 90       	ld	r13, X
     c9c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <kilo_irlow>
     ca0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <kilo_irlow+0x1>
     ca4:	8c 15       	cp	r24, r12
     ca6:	9d 05       	cpc	r25, r13
     ca8:	08 f4       	brcc	.+2      	; 0xcac <estimate_distance+0x1f4>
     caa:	df c0       	rjmp	.+446    	; 0xe6a <estimate_distance+0x3b2>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     cac:	bf ef       	ldi	r27, 0xFF	; 255
     cae:	b9 83       	std	Y+1, r27	; 0x01
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     cb0:	00 91 5a 01 	lds	r16, 0x015A	; 0x80015a <kilo_irlow+0x2>
     cb4:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <kilo_irlow+0x3>
     cb8:	0c 15       	cp	r16, r12
     cba:	1d 05       	cpc	r17, r13
     cbc:	08 f4       	brcc	.+2      	; 0xcc0 <estimate_distance+0x208>
     cbe:	56 c1       	rjmp	.+684    	; 0xf6c <estimate_distance+0x4b4>
     cc0:	00 91 5c 01 	lds	r16, 0x015C	; 0x80015c <kilo_irlow+0x4>
     cc4:	10 91 5d 01 	lds	r17, 0x015D	; 0x80015d <kilo_irlow+0x5>
     cc8:	0c 15       	cp	r16, r12
     cca:	1d 05       	cpc	r17, r13
     ccc:	08 f4       	brcc	.+2      	; 0xcd0 <estimate_distance+0x218>
     cce:	53 c1       	rjmp	.+678    	; 0xf76 <estimate_distance+0x4be>
     cd0:	00 91 5e 01 	lds	r16, 0x015E	; 0x80015e <kilo_irlow+0x6>
     cd4:	10 91 5f 01 	lds	r17, 0x015F	; 0x80015f <kilo_irlow+0x7>
     cd8:	0c 15       	cp	r16, r12
     cda:	1d 05       	cpc	r17, r13
     cdc:	08 f4       	brcc	.+2      	; 0xce0 <estimate_distance+0x228>
     cde:	58 c1       	rjmp	.+688    	; 0xf90 <estimate_distance+0x4d8>
     ce0:	00 91 60 01 	lds	r16, 0x0160	; 0x800160 <kilo_irlow+0x8>
     ce4:	10 91 61 01 	lds	r17, 0x0161	; 0x800161 <kilo_irlow+0x9>
     ce8:	0c 15       	cp	r16, r12
     cea:	1d 05       	cpc	r17, r13
     cec:	08 f4       	brcc	.+2      	; 0xcf0 <estimate_distance+0x238>
     cee:	59 c1       	rjmp	.+690    	; 0xfa2 <estimate_distance+0x4ea>
     cf0:	00 91 62 01 	lds	r16, 0x0162	; 0x800162 <kilo_irlow+0xa>
     cf4:	10 91 63 01 	lds	r17, 0x0163	; 0x800163 <kilo_irlow+0xb>
     cf8:	0c 15       	cp	r16, r12
     cfa:	1d 05       	cpc	r17, r13
     cfc:	08 f4       	brcc	.+2      	; 0xd00 <estimate_distance+0x248>
     cfe:	b7 c0       	rjmp	.+366    	; 0xe6e <estimate_distance+0x3b6>
     d00:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <kilo_irlow+0xc>
     d04:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <kilo_irlow+0xd>
     d08:	0c 15       	cp	r16, r12
     d0a:	1d 05       	cpc	r17, r13
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <estimate_distance+0x258>
     d0e:	52 c1       	rjmp	.+676    	; 0xfb4 <estimate_distance+0x4fc>
     d10:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <kilo_irlow+0xe>
     d14:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <kilo_irlow+0xf>
     d18:	0c 15       	cp	r16, r12
     d1a:	1d 05       	cpc	r17, r13
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <estimate_distance+0x268>
     d1e:	53 c1       	rjmp	.+678    	; 0xfc6 <estimate_distance+0x50e>
     d20:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <kilo_irlow+0x10>
     d24:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <kilo_irlow+0x11>
     d28:	0c 15       	cp	r16, r12
     d2a:	1d 05       	cpc	r17, r13
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <estimate_distance+0x278>
     d2e:	50 c1       	rjmp	.+672    	; 0xfd0 <estimate_distance+0x518>
     d30:	00 91 6a 01 	lds	r16, 0x016A	; 0x80016a <kilo_irlow+0x12>
     d34:	10 91 6b 01 	lds	r17, 0x016B	; 0x80016b <kilo_irlow+0x13>
     d38:	0c 15       	cp	r16, r12
     d3a:	1d 05       	cpc	r17, r13
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <estimate_distance+0x288>
     d3e:	51 c1       	rjmp	.+674    	; 0xfe2 <estimate_distance+0x52a>
     d40:	00 91 6c 01 	lds	r16, 0x016C	; 0x80016c <kilo_irlow+0x14>
     d44:	10 91 6d 01 	lds	r17, 0x016D	; 0x80016d <kilo_irlow+0x15>
     d48:	0c 15       	cp	r16, r12
     d4a:	1d 05       	cpc	r17, r13
     d4c:	08 f4       	brcc	.+2      	; 0xd50 <estimate_distance+0x298>
     d4e:	56 c1       	rjmp	.+684    	; 0xffc <estimate_distance+0x544>
     d50:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <kilo_irlow+0x16>
     d54:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <kilo_irlow+0x17>
     d58:	0c 15       	cp	r16, r12
     d5a:	1d 05       	cpc	r17, r13
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <estimate_distance+0x2a8>
     d5e:	57 c1       	rjmp	.+686    	; 0x100e <estimate_distance+0x556>
     d60:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <kilo_irlow+0x18>
     d64:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <kilo_irlow+0x19>
     d68:	0c 15       	cp	r16, r12
     d6a:	1d 05       	cpc	r17, r13
     d6c:	08 f4       	brcc	.+2      	; 0xd70 <estimate_distance+0x2b8>
     d6e:	58 c1       	rjmp	.+688    	; 0x1020 <estimate_distance+0x568>
     d70:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <kilo_irlow+0x1a>
     d74:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <kilo_irlow+0x1b>
     d78:	0c 15       	cp	r16, r12
     d7a:	1d 05       	cpc	r17, r13
     d7c:	08 f4       	brcc	.+2      	; 0xd80 <estimate_distance+0x2c8>
     d7e:	59 c1       	rjmp	.+690    	; 0x1032 <estimate_distance+0x57a>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     d80:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     d82:	b9 81       	ldd	r27, Y+1	; 0x01
     d84:	bf 3f       	cpi	r27, 0xFF	; 255
     d86:	09 f4       	brne	.+2      	; 0xd8a <estimate_distance+0x2d2>
     d88:	59 c1       	rjmp	.+690    	; 0x103c <estimate_distance+0x584>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     d8a:	ed 81       	ldd	r30, Y+5	; 0x05
     d8c:	fe 81       	ldd	r31, Y+6	; 0x06
     d8e:	bf 01       	movw	r22, r30
     d90:	ff 0f       	add	r31, r31
     d92:	88 0b       	sbc	r24, r24
     d94:	99 0b       	sbc	r25, r25
     d96:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__floatsisf>
     d9a:	4b 01       	movw	r8, r22
     d9c:	5c 01       	movw	r10, r24
     d9e:	f9 81       	ldd	r31, Y+1	; 0x01
     da0:	6f 2f       	mov	r22, r31
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatunsisf>
     dac:	6b 01       	movw	r12, r22
     dae:	7c 01       	movw	r14, r24
     db0:	a5 01       	movw	r20, r10
     db2:	94 01       	movw	r18, r8
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	81 e6       	ldi	r24, 0x61	; 97
     dba:	94 e4       	ldi	r25, 0x44	; 68
     dbc:	0e 94 8e 0c 	call	0x191c	; 0x191c <__subsf3>
     dc0:	9b 01       	movw	r18, r22
     dc2:	ac 01       	movw	r20, r24
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__mulsf3>
     dcc:	6b 01       	movw	r12, r22
     dce:	7c 01       	movw	r14, r24
     dd0:	61 2f       	mov	r22, r17
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatunsisf>
     ddc:	2b 01       	movw	r4, r22
     dde:	3c 01       	movw	r6, r24
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	4f e2       	ldi	r20, 0x2F	; 47
     de6:	54 e4       	ldi	r21, 0x44	; 68
     de8:	c5 01       	movw	r24, r10
     dea:	b4 01       	movw	r22, r8
     dec:	0e 94 8e 0c 	call	0x191c	; 0x191c <__subsf3>
     df0:	9b 01       	movw	r18, r22
     df2:	ac 01       	movw	r20, r24
     df4:	c3 01       	movw	r24, r6
     df6:	b2 01       	movw	r22, r4
     df8:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__mulsf3>
     dfc:	9b 01       	movw	r18, r22
     dfe:	ac 01       	movw	r20, r24
     e00:	c7 01       	movw	r24, r14
     e02:	b6 01       	movw	r22, r12
     e04:	0e 94 8f 0c 	call	0x191e	; 0x191e <__addsf3>
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	48 e4       	ldi	r20, 0x48	; 72
     e0e:	53 e4       	ldi	r21, 0x43	; 67
     e10:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__divsf3>
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	44 e0       	ldi	r20, 0x04	; 4
     e1a:	52 e4       	ldi	r21, 0x42	; 66
     e1c:	0e 94 8f 0c 	call	0x191e	; 0x191e <__addsf3>
     e20:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__fixunssfsi>
     e24:	86 2f       	mov	r24, r22
     e26:	08 c0       	rjmp	.+16     	; 0xe38 <estimate_distance+0x380>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     e28:	19 82       	std	Y+1, r1	; 0x01
     e2a:	fd 01       	movw	r30, r26
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     e2c:	ed 3b       	cpi	r30, 0xBD	; 189
     e2e:	f2 40       	sbci	r31, 0x02	; 2
     e30:	0c f0       	brlt	.+2      	; 0xe34 <estimate_distance+0x37c>
     e32:	07 c1       	rjmp	.+526    	; 0x1042 <estimate_distance+0x58a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	8f 5d       	subi	r24, 0xDF	; 223
    }
}
     e38:	26 96       	adiw	r28, 0x06	; 6
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	9f 90       	pop	r9
     e5a:	8f 90       	pop	r8
     e5c:	7f 90       	pop	r7
     e5e:	6f 90       	pop	r6
     e60:	5f 90       	pop	r5
     e62:	4f 90       	pop	r4
     e64:	3f 90       	pop	r3
     e66:	2f 90       	pop	r2
     e68:	08 95       	ret
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     e6a:	81 e2       	ldi	r24, 0x21	; 33

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     e6c:	e5 cf       	rjmp	.-54     	; 0xe38 <estimate_distance+0x380>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e6e:	f5 e0       	ldi	r31, 0x05	; 5
     e70:	3f 2e       	mov	r3, r31
                if(dist->low_gain > kilo_irlow[i]) {
     e72:	e5 e0       	ldi	r30, 0x05	; 5
     e74:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	ea 5a       	subi	r30, 0xAA	; 170
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	80 81       	ld	r24, Z
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	b8 01       	movw	r22, r16
     e84:	68 1b       	sub	r22, r24
     e86:	79 0b       	sbc	r23, r25
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatunsisf>
     e90:	9b 01       	movw	r18, r22
     e92:	ac 01       	movw	r20, r24
     e94:	0e 94 8f 0c 	call	0x191e	; 0x191e <__addsf3>
     e98:	4b 01       	movw	r8, r22
     e9a:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     e9c:	b6 01       	movw	r22, r12
     e9e:	dd 0c       	add	r13, r13
     ea0:	88 0b       	sbc	r24, r24
     ea2:	99 0b       	sbc	r25, r25
     ea4:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <__floatsisf>
     ea8:	2b 01       	movw	r4, r22
     eaa:	3c 01       	movw	r6, r24
     eac:	b8 01       	movw	r22, r16
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatunsisf>
     eb6:	6b 01       	movw	r12, r22
     eb8:	7c 01       	movw	r14, r24
     eba:	63 2d       	mov	r22, r3
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatunsisf>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	5f e3       	ldi	r21, 0x3F	; 63
     ece:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__mulsf3>
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	a9 01       	movw	r20, r18
     ed8:	0e 94 8f 0c 	call	0x191e	; 0x191e <__addsf3>
     edc:	a5 01       	movw	r20, r10
     ede:	94 01       	movw	r18, r8
     ee0:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__mulsf3>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	c7 01       	movw	r24, r14
     eea:	b6 01       	movw	r22, r12
     eec:	0e 94 8e 0c 	call	0x191c	; 0x191c <__subsf3>
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
     ef4:	c3 01       	movw	r24, r6
     ef6:	b2 01       	movw	r22, r4
     ef8:	0e 94 8e 0c 	call	0x191c	; 0x191c <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e2       	ldi	r20, 0x20	; 32
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__mulsf3>
     f08:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fixsfsi>
     f0c:	8b 01       	movw	r16, r22
     f0e:	c5 01       	movw	r24, r10
     f10:	b4 01       	movw	r22, r8
     f12:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__fixsfsi>
     f16:	ab 01       	movw	r20, r22
     f18:	bc 01       	movw	r22, r24
     f1a:	c8 01       	movw	r24, r16
     f1c:	ba 01       	movw	r22, r20
     f1e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divmodhi4>
     f22:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     f24:	6f 3f       	cpi	r22, 0xFF	; 255
     f26:	09 f0       	breq	.+2      	; 0xf2a <estimate_distance+0x472>
     f28:	2c cf       	rjmp	.-424    	; 0xd82 <estimate_distance+0x2ca>
     f2a:	84 cf       	rjmp	.-248    	; 0xe34 <estimate_distance+0x37c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f2c:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     f2e:	85 e0       	ldi	r24, 0x05	; 5
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	7c 01       	movw	r14, r24
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	ef 1a       	sub	r14, r31
     f38:	f1 08       	sbc	r15, r1
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__floatunsisf>
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	5f e3       	ldi	r21, 0x3F	; 63
     f4c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__mulsf3>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	a9 01       	movw	r20, r18
     f56:	0e 94 8f 0c 	call	0x191e	; 0x191e <__addsf3>
     f5a:	69 83       	std	Y+1, r22	; 0x01
     f5c:	7a 83       	std	Y+2, r23	; 0x02
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	49 ce       	rjmp	.-878    	; 0xbf6 <estimate_distance+0x13e>
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	e3 cf       	rjmp	.-58     	; 0xf32 <estimate_distance+0x47a>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     f6c:	33 24       	eor	r3, r3
     f6e:	33 94       	inc	r3
     f70:	e1 e0       	ldi	r30, 0x01	; 1
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 cf       	rjmp	.-256    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	38 2e       	mov	r3, r24
                if(dist->low_gain > kilo_irlow[i]) {
     f7a:	e2 e0       	ldi	r30, 0x02	; 2
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	7b cf       	rjmp	.-266    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f80:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	d5 cf       	rjmp	.-86     	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f88:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	d1 cf       	rjmp	.-94     	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     f90:	b3 e0       	ldi	r27, 0x03	; 3
     f92:	3b 2e       	mov	r3, r27
                if(dist->low_gain > kilo_irlow[i]) {
     f94:	e3 e0       	ldi	r30, 0x03	; 3
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	6e cf       	rjmp	.-292    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     f9a:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	c8 cf       	rjmp	.-112    	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fa2:	a4 e0       	ldi	r26, 0x04	; 4
     fa4:	3a 2e       	mov	r3, r26
                if(dist->low_gain > kilo_irlow[i]) {
     fa6:	e4 e0       	ldi	r30, 0x04	; 4
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	65 cf       	rjmp	.-310    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fac:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     fae:	86 e0       	ldi	r24, 0x06	; 6
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	bf cf       	rjmp	.-130    	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fb4:	e6 e0       	ldi	r30, 0x06	; 6
     fb6:	3e 2e       	mov	r3, r30
                if(dist->low_gain > kilo_irlow[i]) {
     fb8:	e6 e0       	ldi	r30, 0x06	; 6
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	5c cf       	rjmp	.-328    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fbe:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     fc0:	87 e0       	ldi	r24, 0x07	; 7
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	b6 cf       	rjmp	.-148    	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fc6:	77 e0       	ldi	r23, 0x07	; 7
     fc8:	37 2e       	mov	r3, r23
                if(dist->low_gain > kilo_irlow[i]) {
     fca:	e7 e0       	ldi	r30, 0x07	; 7
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	53 cf       	rjmp	.-346    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fd0:	68 e0       	ldi	r22, 0x08	; 8
     fd2:	36 2e       	mov	r3, r22
                if(dist->low_gain > kilo_irlow[i]) {
     fd4:	e8 e0       	ldi	r30, 0x08	; 8
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	4e cf       	rjmp	.-356    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fda:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     fdc:	88 e0       	ldi	r24, 0x08	; 8
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a8 cf       	rjmp	.-176    	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     fe2:	59 e0       	ldi	r21, 0x09	; 9
     fe4:	35 2e       	mov	r3, r21
                if(dist->low_gain > kilo_irlow[i]) {
     fe6:	e9 e0       	ldi	r30, 0x09	; 9
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	45 cf       	rjmp	.-374    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     fec:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     fee:	89 e0       	ldi	r24, 0x09	; 9
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9f cf       	rjmp	.-194    	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ff4:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     ff6:	8a e0       	ldi	r24, 0x0A	; 10
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9b cf       	rjmp	.-202    	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ffc:	4a e0       	ldi	r20, 0x0A	; 10
     ffe:	34 2e       	mov	r3, r20
                if(dist->low_gain > kilo_irlow[i]) {
    1000:	ea e0       	ldi	r30, 0x0A	; 10
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	38 cf       	rjmp	.-400    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1006:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1008:	8b e0       	ldi	r24, 0x0B	; 11
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	92 cf       	rjmp	.-220    	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    100e:	3b e0       	ldi	r19, 0x0B	; 11
    1010:	33 2e       	mov	r3, r19
                if(dist->low_gain > kilo_irlow[i]) {
    1012:	eb e0       	ldi	r30, 0x0B	; 11
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	2f cf       	rjmp	.-418    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1018:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    101a:	8c e0       	ldi	r24, 0x0C	; 12
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	89 cf       	rjmp	.-238    	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1020:	2c e0       	ldi	r18, 0x0C	; 12
    1022:	32 2e       	mov	r3, r18
                if(dist->low_gain > kilo_irlow[i]) {
    1024:	ec e0       	ldi	r30, 0x0C	; 12
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	26 cf       	rjmp	.-436    	; 0xe76 <estimate_distance+0x3be>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    102a:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    102c:	8d e0       	ldi	r24, 0x0D	; 13
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	80 cf       	rjmp	.-256    	; 0xf32 <estimate_distance+0x47a>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1032:	9d e0       	ldi	r25, 0x0D	; 13
    1034:	39 2e       	mov	r3, r25
                if(dist->low_gain > kilo_irlow[i]) {
    1036:	ed e0       	ldi	r30, 0x0D	; 13
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	1d cf       	rjmp	.-454    	; 0xe76 <estimate_distance+0x3be>
    103c:	81 e2       	ldi	r24, 0x21	; 33
    103e:	81 0f       	add	r24, r17
    1040:	fb ce       	rjmp	.-522    	; 0xe38 <estimate_distance+0x380>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    1042:	d1 01       	movw	r26, r2
    1044:	cd 90       	ld	r12, X+
    1046:	dc 90       	ld	r13, X
    1048:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <kilo_irlow>
    104c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <kilo_irlow+0x1>
    1050:	8c 15       	cp	r24, r12
    1052:	9d 05       	cpc	r25, r13
    1054:	08 f0       	brcs	.+2      	; 0x1058 <estimate_distance+0x5a0>
    1056:	2c ce       	rjmp	.-936    	; 0xcb0 <estimate_distance+0x1f8>
            dist_low=0;
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	93 ce       	rjmp	.-730    	; 0xd82 <estimate_distance+0x2ca>

0000105c <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	ef 93       	push	r30
    107c:	ff 93       	push	r31
    tx_clock += tx_increment;
    107e:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <tx_clock>
    1082:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <tx_clock+0x1>
    1086:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <tx_increment>
    108a:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <tx_increment+0x1>
    108e:	82 0f       	add	r24, r18
    1090:	93 1f       	adc	r25, r19
    1092:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <tx_clock+0x1>
    1096:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <tx_clock>
    tx_increment = 0xFF;
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <tx_increment+0x1>
    10a2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <tx_increment>
    OCR0A = tx_increment;
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    10aa:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <kilo_ticks>
    10ae:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <kilo_ticks+0x1>
    10b2:	a0 91 55 01 	lds	r26, 0x0155	; 0x800155 <kilo_ticks+0x2>
    10b6:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <kilo_ticks+0x3>
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	a1 1d       	adc	r26, r1
    10be:	b1 1d       	adc	r27, r1
    10c0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <kilo_ticks>
    10c4:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <kilo_ticks+0x1>
    10c8:	a0 93 55 01 	sts	0x0155, r26	; 0x800155 <kilo_ticks+0x2>
    10cc:	b0 93 56 01 	sts	0x0156, r27	; 0x800156 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    10d0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <rx_busy>
    10d4:	81 11       	cpse	r24, r1
    10d6:	0f c0       	rjmp	.+30     	; 0x10f6 <__vector_14+0x9a>
    10d8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <kilo_tx_period>
    10dc:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <kilo_tx_period+0x1>
    10e0:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <tx_clock>
    10e4:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <tx_clock+0x1>
    10e8:	82 17       	cp	r24, r18
    10ea:	93 07       	cpc	r25, r19
    10ec:	20 f4       	brcc	.+8      	; 0x10f6 <__vector_14+0x9a>
    10ee:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_state>
    10f2:	84 30       	cpi	r24, 0x04	; 4
    10f4:	89 f0       	breq	.+34     	; 0x1118 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    10f6:	ff 91       	pop	r31
    10f8:	ef 91       	pop	r30
    10fa:	bf 91       	pop	r27
    10fc:	af 91       	pop	r26
    10fe:	9f 91       	pop	r25
    1100:	8f 91       	pop	r24
    1102:	7f 91       	pop	r23
    1104:	6f 91       	pop	r22
    1106:	5f 91       	pop	r21
    1108:	4f 91       	pop	r20
    110a:	3f 91       	pop	r19
    110c:	2f 91       	pop	r18
    110e:	0f 90       	pop	r0
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	0f 90       	pop	r0
    1114:	1f 90       	pop	r1
    1116:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1118:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <kilo_message_tx>
    111c:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <kilo_message_tx+0x1>
    1120:	09 95       	icall
        if (msg) {
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	41 f3       	breq	.-48     	; 0x10f6 <__vector_14+0x9a>
            if (message_send(msg)) {
    1126:	0e 94 b1 0b 	call	0x1762	; 0x1762 <message_send>
    112a:	81 11       	cpse	r24, r1
    112c:	0a c0       	rjmp	.+20     	; 0x1142 <__vector_14+0xe6>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    112e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <rand>
    1132:	9c 01       	movw	r18, r24
    1134:	33 27       	eor	r19, r19
    1136:	30 93 76 01 	sts	0x0176, r19	; 0x800176 <tx_increment+0x1>
    113a:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <tx_increment>
                OCR0A = tx_increment;
    113e:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
    1140:	da cf       	rjmp	.-76     	; 0x10f6 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1142:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <kilo_message_tx_success>
    1146:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <kilo_message_tx_success+0x1>
    114a:	09 95       	icall
                tx_clock = 0;
    114c:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <tx_clock+0x1>
    1150:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <tx_clock>
    1154:	d0 cf       	rjmp	.-96     	; 0x10f6 <__vector_14+0x9a>

00001156 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1156:	80 ff       	sbrs	r24, 0
    1158:	11 c0       	rjmp	.+34     	; 0x117c <set_color+0x26>
        DDRD |= (1<<5);
    115a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    115c:	81 ff       	sbrs	r24, 1
    115e:	11 c0       	rjmp	.+34     	; 0x1182 <set_color+0x2c>
        DDRD |= (1<<4);
    1160:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1162:	82 ff       	sbrs	r24, 2
    1164:	11 c0       	rjmp	.+34     	; 0x1188 <set_color+0x32>
        DDRC |= (1<<3);
    1166:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1168:	83 ff       	sbrs	r24, 3
    116a:	11 c0       	rjmp	.+34     	; 0x118e <set_color+0x38>
        DDRC |= (1<<2);
    116c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    116e:	84 ff       	sbrs	r24, 4
    1170:	11 c0       	rjmp	.+34     	; 0x1194 <set_color+0x3e>
        DDRC |= (1<<5);
    1172:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1174:	85 fd       	sbrc	r24, 5
    1176:	11 c0       	rjmp	.+34     	; 0x119a <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1178:	3c 98       	cbi	0x07, 4	; 7
    117a:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    117c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    117e:	81 fd       	sbrc	r24, 1
    1180:	ef cf       	rjmp	.-34     	; 0x1160 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1182:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1184:	82 fd       	sbrc	r24, 2
    1186:	ef cf       	rjmp	.-34     	; 0x1166 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1188:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    118a:	83 fd       	sbrc	r24, 3
    118c:	ef cf       	rjmp	.-34     	; 0x116c <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    118e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1190:	84 fd       	sbrc	r24, 4
    1192:	ef cf       	rjmp	.-34     	; 0x1172 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1194:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1196:	85 ff       	sbrs	r24, 5
    1198:	ef cf       	rjmp	.-34     	; 0x1178 <set_color+0x22>
        DDRC |= (1<<4);
    119a:	3c 9a       	sbi	0x07, 4	; 7
    119c:	08 95       	ret

0000119e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    rx_timer_off();
    11ac:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    11b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    rx_leadingbit = 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rx_leadingbit>
    rx_leadingbyte = 1;
    11be:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <rx_leadingbyte>
    rx_busy = 0;
    11c2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_busy>
    adc_trigger_high_gain();
    11c6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    11ca:	93 ea       	ldi	r25, 0xA3	; 163
    11cc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    11d0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
}
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1208:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    120c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

    rx_busy = 1;
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	40 93 57 01 	sts	0x0157, r20	; 0x800157 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1216:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_leadingbit>
    121a:	88 23       	and	r24, r24
    121c:	a9 f1       	breq	.+106    	; 0x1288 <__vector_23+0xa6>
        rx_timer_on();
    121e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1222:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1226:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        rx_bytevalue = 0;
    122a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <rx_bytevalue>
        rx_leadingbit = 0;
    122e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_leadingbit>
        if (rx_leadingbyte) {
    1232:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_leadingbyte>
    1236:	88 23       	and	r24, r24
    1238:	a1 f0       	breq	.+40     	; 0x1262 <__vector_23+0x80>
            adc_finish_conversion();
    123a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    123e:	86 fd       	sbrc	r24, 6
    1240:	fc cf       	rjmp	.-8      	; 0x123a <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1242:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1246:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    124a:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <rx_dist+0x3>
    124e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <rx_dist+0x2>
            adc_trigger_low_gain();
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1258:	93 ea       	ldi	r25, 0xA3	; 163
    125a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    125e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    }
                }
            }
        }
    }
}
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	bf 91       	pop	r27
    126c:	af 91       	pop	r26
    126e:	9f 91       	pop	r25
    1270:	8f 91       	pop	r24
    1272:	7f 91       	pop	r23
    1274:	6f 91       	pop	r22
    1276:	5f 91       	pop	r21
    1278:	4f 91       	pop	r20
    127a:	3f 91       	pop	r19
    127c:	2f 91       	pop	r18
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	0f 90       	pop	r0
    1284:	1f 90       	pop	r1
    1286:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1288:	c9 01       	movw	r24, r18
    128a:	87 58       	subi	r24, 0x87	; 135
    128c:	91 09       	sbc	r25, r1
    128e:	84 37       	cpi	r24, 0x74	; 116
    1290:	99 40       	sbci	r25, 0x09	; 9
    1292:	08 f0       	brcs	.+2      	; 0x1296 <__vector_23+0xb4>
    1294:	4f c0       	rjmp	.+158    	; 0x1334 <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1296:	26 58       	subi	r18, 0x86	; 134
    1298:	31 09       	sbc	r19, r1
    129a:	a4 ef       	ldi	r26, 0xF4	; 244
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__umulhisi3>
    12a2:	aa 27       	eor	r26, r26
    12a4:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    12a6:	88 30       	cpi	r24, 0x08	; 8
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <__vector_23+0xca>
    12aa:	7b c0       	rjmp	.+246    	; 0x13a2 <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    12ac:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <rx_leadingbit>
                if (rx_leadingbyte) {
    12b0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rx_leadingbyte>
    12b4:	81 11       	cpse	r24, r1
    12b6:	52 c0       	rjmp	.+164    	; 0x135c <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    12b8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <rx_byteindex>
    12bc:	e8 2f       	mov	r30, r24
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	e6 58       	subi	r30, 0x86	; 134
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <rx_bytevalue>
    12c8:	90 83       	st	Z, r25
                    rx_byteindex++;
    12ca:	8f 5f       	subi	r24, 0xFF	; 255
    12cc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
    12d0:	8c 30       	cpi	r24, 0x0C	; 12
    12d2:	39 f6       	brne	.-114    	; 0x1262 <__vector_23+0x80>
                        rx_timer_off();
    12d4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    12d8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12dc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
    12e0:	40 93 74 01 	sts	0x0174, r20	; 0x800174 <rx_leadingbyte>
                        rx_busy = 0;
    12e4:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
    12e8:	c0 91 84 01 	lds	r28, 0x0184	; 0x800184 <rx_msg+0xa>
    12ec:	d0 91 85 01 	lds	r29, 0x0185	; 0x800185 <rx_msg+0xb>
    12f0:	8a e7       	ldi	r24, 0x7A	; 122
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <message_crc>
    12f8:	c8 17       	cp	r28, r24
    12fa:	d9 07       	cpc	r29, r25
    12fc:	09 f0       	breq	.+2      	; 0x1300 <__vector_23+0x11e>
    12fe:	b1 cf       	rjmp	.-158    	; 0x1262 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1300:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <rx_msg+0x9>
    1304:	87 ff       	sbrs	r24, 7
    1306:	61 c0       	rjmp	.+194    	; 0x13ca <__vector_23+0x1e8>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1308:	98 e7       	ldi	r25, 0x78	; 120
    130a:	98 0f       	add	r25, r24
    130c:	93 30       	cpi	r25, 0x03	; 3
    130e:	30 f0       	brcs	.+12     	; 0x131c <__vector_23+0x13a>
        motors_off();
    1310:	53 98       	cbi	0x0a, 3	; 10
    1312:	23 98       	cbi	0x04, 3	; 4
    1314:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    1318:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    switch (rx_msg.type) {
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	fc 01       	movw	r30, r24
    1320:	e0 58       	subi	r30, 0x80	; 128
    1322:	f1 09       	sbc	r31, r1
    1324:	eb 30       	cpi	r30, 0x0B	; 11
    1326:	f1 05       	cpc	r31, r1
    1328:	08 f0       	brcs	.+2      	; 0x132c <__vector_23+0x14a>
    132a:	9b cf       	rjmp	.-202    	; 0x1262 <__vector_23+0x80>
    132c:	e5 5c       	subi	r30, 0xC5	; 197
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1334:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1338:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    133c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
            rx_leadingbit = 1;
    1340:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <rx_leadingbit>
            rx_leadingbyte = 1;
    1344:	40 93 74 01 	sts	0x0174, r20	; 0x800174 <rx_leadingbyte>
            rx_busy = 0;
    1348:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_busy>
            adc_trigger_high_gain();
    134c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1350:	83 ea       	ldi	r24, 0xA3	; 163
    1352:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1356:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
    135a:	83 cf       	rjmp	.-250    	; 0x1262 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    135c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1360:	86 fd       	sbrc	r24, 6
    1362:	fc cf       	rjmp	.-8      	; 0x135c <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    1364:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1368:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    136c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <rx_dist+0x1>
    1370:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <rx_dist>
                    adc_trigger_high_gain();
    1374:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1378:	83 ea       	ldi	r24, 0xA3	; 163
    137a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    if (rx_bytevalue != 0) { // Collision detected.
    1384:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <rx_bytevalue>
    1388:	99 23       	and	r25, r25
    138a:	d1 f0       	breq	.+52     	; 0x13c0 <__vector_23+0x1de>
                        rx_timer_off();
    138c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1390:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1394:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
    1398:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <rx_leadingbyte>
                        rx_busy = 0;
    139c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <rx_busy>
    13a0:	60 cf       	rjmp	.-320    	; 0x1262 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    13a2:	21 e0       	ldi	r18, 0x01	; 1
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	f9 01       	movw	r30, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <__vector_23+0x1cc>
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	8a 95       	dec	r24
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <__vector_23+0x1c8>
    13b2:	cf 01       	movw	r24, r30
    13b4:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <rx_bytevalue>
    13b8:	89 2b       	or	r24, r25
    13ba:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <rx_bytevalue>
    13be:	51 cf       	rjmp	.-350    	; 0x1262 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    13c0:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <rx_leadingbyte>
                        rx_byteindex = 0;
    13c4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <rx_byteindex>
    13c8:	4c cf       	rjmp	.-360    	; 0x1262 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    13ca:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <kilo_message_rx>
    13ce:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <kilo_message_rx+0x1>
    13d2:	6f e4       	ldi	r22, 0x4F	; 79
    13d4:	71 e0       	ldi	r23, 0x01	; 1
    13d6:	8a e7       	ldi	r24, 0x7A	; 122
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	09 95       	icall
    13dc:	42 cf       	rjmp	.-380    	; 0x1262 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    13de:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_msg>
    13e2:	82 30       	cpi	r24, 0x02	; 2
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <__vector_23+0x206>
    13e6:	dd c0       	rjmp	.+442    	; 0x15a2 <__vector_23+0x3c0>
    13e8:	08 f4       	brcc	.+2      	; 0x13ec <__vector_23+0x20a>
    13ea:	ba c0       	rjmp	.+372    	; 0x1560 <__vector_23+0x37e>
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <__vector_23+0x210>
    13f0:	c6 c0       	rjmp	.+396    	; 0x157e <__vector_23+0x39c>
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <__vector_23+0x216>
    13f6:	b1 c0       	rjmp	.+354    	; 0x155a <__vector_23+0x378>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13f8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cur_motion>
    13fc:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <rx_msg+0x6>
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	09 f4       	brne	.+2      	; 0x1406 <__vector_23+0x224>
    1404:	e3 c0       	rjmp	.+454    	; 0x15cc <__vector_23+0x3ea>
    1406:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <rx_msg+0x5>
                        prev_motion = MOVE_STOP;
    140a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    140e:	23 e0       	ldi	r18, 0x03	; 3
    1410:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    1414:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    1418:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    141c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_state>
    1420:	86 30       	cpi	r24, 0x06	; 6
    1422:	09 f4       	brne	.+2      	; 0x1426 <__vector_23+0x244>
    1424:	1e cf       	rjmp	.-452    	; 0x1262 <__vector_23+0x80>
                motors_on();
    1426:	53 9a       	sbi	0x0a, 3	; 10
    1428:	23 9a       	sbi	0x04, 3	; 4
    142a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    142e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = MOVING;
    1432:	86 e0       	ldi	r24, 0x06	; 6
    1434:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <kilo_state>
    1438:	14 cf       	rjmp	.-472    	; 0x1262 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    143a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_state>
    143e:	86 30       	cpi	r24, 0x06	; 6
    1440:	99 f0       	breq	.+38     	; 0x1468 <__vector_23+0x286>
                motors_on();
    1442:	53 9a       	sbi	0x0a, 3	; 10
    1444:	23 9a       	sbi	0x04, 3	; 4
    1446:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    144a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    144e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1450:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1452:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1454:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1456:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1458:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    145a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cur_motion>
    145e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <prev_motion>
                kilo_state = MOVING;
    1462:	86 e0       	ldi	r24, 0x06	; 6
    1464:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	9c 01       	movw	r18, r24
    146e:	00 90 7a 01 	lds	r0, 0x017A	; 0x80017a <rx_msg>
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <__vector_23+0x296>
    1474:	22 0f       	add	r18, r18
    1476:	33 1f       	adc	r19, r19
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <__vector_23+0x292>
    147c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <kilo_uid>
    1480:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <kilo_uid+0x1>
    1484:	82 23       	and	r24, r18
    1486:	93 23       	and	r25, r19
    1488:	89 2b       	or	r24, r25
    148a:	09 f0       	breq	.+2      	; 0x148e <__vector_23+0x2ac>
    148c:	86 c0       	rjmp	.+268    	; 0x159a <__vector_23+0x3b8>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    148e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cur_motion>
                    }
                }
            }
        }
    }
}
    1492:	e7 ce       	rjmp	.-562    	; 0x1262 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <kilo_state>
    149a:	e3 ce       	rjmp	.-570    	; 0x1262 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    149c:	e0 e0       	ldi	r30, 0x00	; 0
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    14a2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    14a6:	8d 7f       	andi	r24, 0xFD	; 253
    14a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    14ac:	16 bc       	out	0x26, r1	; 38
            bootload();
    14ae:	e0 e0       	ldi	r30, 0x00	; 0
    14b0:	f0 e7       	ldi	r31, 0x70	; 112
    14b2:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    14b4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <kilo_state>
    14b8:	d4 ce       	rjmp	.-600    	; 0x1262 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <kilo_state>
    14c0:	d0 ce       	rjmp	.-608    	; 0x1262 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    14c2:	85 e0       	ldi	r24, 0x05	; 5
    14c4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <kilo_state>
    14c8:	cc ce       	rjmp	.-616    	; 0x1262 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    14ca:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_state>
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <__vector_23+0x2f2>
    14d2:	c7 ce       	rjmp	.-626    	; 0x1262 <__vector_23+0x80>
    14d4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_state>
    14d8:	84 30       	cpi	r24, 0x04	; 4
    14da:	09 f4       	brne	.+2      	; 0x14de <__vector_23+0x2fc>
    14dc:	c2 ce       	rjmp	.-636    	; 0x1262 <__vector_23+0x80>
                motors_on();
    14de:	53 9a       	sbi	0x0a, 3	; 10
    14e0:	23 9a       	sbi	0x04, 3	; 4
    14e2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    14e6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = SETUP;
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <kilo_state>
    14f0:	b8 ce       	rjmp	.-656    	; 0x1262 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    14f2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <kilo_state>
    14f6:	86 30       	cpi	r24, 0x06	; 6
    14f8:	09 f0       	breq	.+2      	; 0x14fc <__vector_23+0x31a>
    14fa:	b3 ce       	rjmp	.-666    	; 0x1262 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    14fc:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <kilo_uid>
    1500:	80 eb       	ldi	r24, 0xB0	; 176
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1508:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <kilo_uid+0x1>
    150c:	81 eb       	ldi	r24, 0xB1	; 177
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1514:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <kilo_turn_left>
    1518:	85 e0       	ldi	r24, 0x05	; 5
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1520:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <kilo_turn_right>
    1524:	89 e0       	ldi	r24, 0x09	; 9
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    152c:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <kilo_straight_left>
    1530:	8c e0       	ldi	r24, 0x0C	; 12
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1538:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <kilo_straight_right>
    153c:	84 e1       	ldi	r24, 0x14	; 20
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <eeprom_write_byte>
                        motors_off();
    1544:	53 98       	cbi	0x0a, 3	; 10
    1546:	23 98       	cbi	0x04, 3	; 4
    1548:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    154c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                        kilo_state = IDLE;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <kilo_state>
    1556:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_msg>
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    155a:	81 11       	cpse	r24, r1
    155c:	5f cf       	rjmp	.-322    	; 0x141c <__vector_23+0x23a>
    155e:	81 ce       	rjmp	.-766    	; 0x1262 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1560:	88 23       	and	r24, r24
    1562:	39 f2       	breq	.-114    	; 0x14f2 <__vector_23+0x310>
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	c9 f7       	brne	.-14     	; 0x155a <__vector_23+0x378>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1568:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <rx_msg+0x1>
    156c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <rx_msg+0x2>
    1570:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <kilo_uid+0x1>
    1574:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <kilo_uid>
                    cur_motion = MOVE_STOP;
    1578:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <cur_motion>
    157c:	4f cf       	rjmp	.-354    	; 0x141c <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    157e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cur_motion>
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	71 f1       	breq	.+92     	; 0x15e2 <__vector_23+0x400>
    1586:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <rx_msg+0x4>
                        prev_motion = MOVE_STOP;
    158a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    158e:	92 e0       	ldi	r25, 0x02	; 2
    1590:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    1594:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_turn_right>
    1598:	41 cf       	rjmp	.-382    	; 0x141c <__vector_23+0x23a>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <cur_motion>
    15a0:	60 ce       	rjmp	.-832    	; 0x1262 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    15a2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <cur_motion>
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	51 f0       	breq	.+20     	; 0x15be <__vector_23+0x3dc>
    15aa:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <rx_msg+0x3>
                        prev_motion = MOVE_STOP;
    15ae:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <prev_motion>
                        cur_motion = MOVE_LEFT;
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    15b8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <kilo_turn_left>
    15bc:	2f cf       	rjmp	.-418    	; 0x141c <__vector_23+0x23a>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    15be:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <rx_msg+0x3>
    15c2:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <kilo_turn_left>
    15c6:	89 13       	cpse	r24, r25
    15c8:	f2 cf       	rjmp	.-28     	; 0x15ae <__vector_23+0x3cc>
    15ca:	28 cf       	rjmp	.-432    	; 0x141c <__vector_23+0x23a>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    15cc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <kilo_straight_right>
    15d0:	98 13       	cpse	r25, r24
    15d2:	19 cf       	rjmp	.-462    	; 0x1406 <__vector_23+0x224>
    15d4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <rx_msg+0x5>
    15d8:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <kilo_straight_left>
    15dc:	82 13       	cpse	r24, r18
    15de:	15 cf       	rjmp	.-470    	; 0x140a <__vector_23+0x228>
    15e0:	1d cf       	rjmp	.-454    	; 0x141c <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    15e2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <rx_msg+0x4>
    15e6:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_turn_right>
    15ea:	89 13       	cpse	r24, r25
    15ec:	ce cf       	rjmp	.-100    	; 0x158a <__vector_23+0x3a8>
    15ee:	16 cf       	rjmp	.-468    	; 0x141c <__vector_23+0x23a>

000015f0 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    15f0:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    15f2:	80 81       	ld	r24, Z
    15f4:	2f ef       	ldi	r18, 0xFF	; 255
    15f6:	3f ef       	ldi	r19, 0xFF	; 255
    15f8:	28 27       	eor	r18, r24
    15fa:	02 2e       	mov	r0, r18
    15fc:	22 95       	swap	r18
    15fe:	20 7f       	andi	r18, 0xF0	; 240
    1600:	20 25       	eor	r18, r0
    1602:	03 2e       	mov	r0, r19
    1604:	32 2f       	mov	r19, r18
    1606:	22 95       	swap	r18
    1608:	2f 70       	andi	r18, 0x0F	; 15
    160a:	02 26       	eor	r0, r18
    160c:	26 95       	lsr	r18
    160e:	32 27       	eor	r19, r18
    1610:	23 27       	eor	r18, r19
    1612:	22 0f       	add	r18, r18
    1614:	22 0f       	add	r18, r18
    1616:	22 0f       	add	r18, r18
    1618:	20 25       	eor	r18, r0
    161a:	81 81       	ldd	r24, Z+1	; 0x01
    161c:	28 27       	eor	r18, r24
    161e:	02 2e       	mov	r0, r18
    1620:	22 95       	swap	r18
    1622:	20 7f       	andi	r18, 0xF0	; 240
    1624:	20 25       	eor	r18, r0
    1626:	03 2e       	mov	r0, r19
    1628:	32 2f       	mov	r19, r18
    162a:	22 95       	swap	r18
    162c:	2f 70       	andi	r18, 0x0F	; 15
    162e:	02 26       	eor	r0, r18
    1630:	26 95       	lsr	r18
    1632:	32 27       	eor	r19, r18
    1634:	23 27       	eor	r18, r19
    1636:	22 0f       	add	r18, r18
    1638:	22 0f       	add	r18, r18
    163a:	22 0f       	add	r18, r18
    163c:	20 25       	eor	r18, r0
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	28 27       	eor	r18, r24
    1642:	02 2e       	mov	r0, r18
    1644:	22 95       	swap	r18
    1646:	20 7f       	andi	r18, 0xF0	; 240
    1648:	20 25       	eor	r18, r0
    164a:	03 2e       	mov	r0, r19
    164c:	32 2f       	mov	r19, r18
    164e:	22 95       	swap	r18
    1650:	2f 70       	andi	r18, 0x0F	; 15
    1652:	02 26       	eor	r0, r18
    1654:	26 95       	lsr	r18
    1656:	32 27       	eor	r19, r18
    1658:	23 27       	eor	r18, r19
    165a:	22 0f       	add	r18, r18
    165c:	22 0f       	add	r18, r18
    165e:	22 0f       	add	r18, r18
    1660:	20 25       	eor	r18, r0
    1662:	83 81       	ldd	r24, Z+3	; 0x03
    1664:	28 27       	eor	r18, r24
    1666:	02 2e       	mov	r0, r18
    1668:	22 95       	swap	r18
    166a:	20 7f       	andi	r18, 0xF0	; 240
    166c:	20 25       	eor	r18, r0
    166e:	03 2e       	mov	r0, r19
    1670:	32 2f       	mov	r19, r18
    1672:	22 95       	swap	r18
    1674:	2f 70       	andi	r18, 0x0F	; 15
    1676:	02 26       	eor	r0, r18
    1678:	26 95       	lsr	r18
    167a:	32 27       	eor	r19, r18
    167c:	23 27       	eor	r18, r19
    167e:	22 0f       	add	r18, r18
    1680:	22 0f       	add	r18, r18
    1682:	22 0f       	add	r18, r18
    1684:	20 25       	eor	r18, r0
    1686:	84 81       	ldd	r24, Z+4	; 0x04
    1688:	28 27       	eor	r18, r24
    168a:	02 2e       	mov	r0, r18
    168c:	22 95       	swap	r18
    168e:	20 7f       	andi	r18, 0xF0	; 240
    1690:	20 25       	eor	r18, r0
    1692:	03 2e       	mov	r0, r19
    1694:	32 2f       	mov	r19, r18
    1696:	22 95       	swap	r18
    1698:	2f 70       	andi	r18, 0x0F	; 15
    169a:	02 26       	eor	r0, r18
    169c:	26 95       	lsr	r18
    169e:	32 27       	eor	r19, r18
    16a0:	23 27       	eor	r18, r19
    16a2:	22 0f       	add	r18, r18
    16a4:	22 0f       	add	r18, r18
    16a6:	22 0f       	add	r18, r18
    16a8:	20 25       	eor	r18, r0
    16aa:	85 81       	ldd	r24, Z+5	; 0x05
    16ac:	28 27       	eor	r18, r24
    16ae:	02 2e       	mov	r0, r18
    16b0:	22 95       	swap	r18
    16b2:	20 7f       	andi	r18, 0xF0	; 240
    16b4:	20 25       	eor	r18, r0
    16b6:	03 2e       	mov	r0, r19
    16b8:	32 2f       	mov	r19, r18
    16ba:	22 95       	swap	r18
    16bc:	2f 70       	andi	r18, 0x0F	; 15
    16be:	02 26       	eor	r0, r18
    16c0:	26 95       	lsr	r18
    16c2:	32 27       	eor	r19, r18
    16c4:	23 27       	eor	r18, r19
    16c6:	22 0f       	add	r18, r18
    16c8:	22 0f       	add	r18, r18
    16ca:	22 0f       	add	r18, r18
    16cc:	20 25       	eor	r18, r0
    16ce:	86 81       	ldd	r24, Z+6	; 0x06
    16d0:	28 27       	eor	r18, r24
    16d2:	02 2e       	mov	r0, r18
    16d4:	22 95       	swap	r18
    16d6:	20 7f       	andi	r18, 0xF0	; 240
    16d8:	20 25       	eor	r18, r0
    16da:	03 2e       	mov	r0, r19
    16dc:	32 2f       	mov	r19, r18
    16de:	22 95       	swap	r18
    16e0:	2f 70       	andi	r18, 0x0F	; 15
    16e2:	02 26       	eor	r0, r18
    16e4:	26 95       	lsr	r18
    16e6:	32 27       	eor	r19, r18
    16e8:	23 27       	eor	r18, r19
    16ea:	22 0f       	add	r18, r18
    16ec:	22 0f       	add	r18, r18
    16ee:	22 0f       	add	r18, r18
    16f0:	20 25       	eor	r18, r0
    16f2:	87 81       	ldd	r24, Z+7	; 0x07
    16f4:	28 27       	eor	r18, r24
    16f6:	02 2e       	mov	r0, r18
    16f8:	22 95       	swap	r18
    16fa:	20 7f       	andi	r18, 0xF0	; 240
    16fc:	20 25       	eor	r18, r0
    16fe:	03 2e       	mov	r0, r19
    1700:	32 2f       	mov	r19, r18
    1702:	22 95       	swap	r18
    1704:	2f 70       	andi	r18, 0x0F	; 15
    1706:	02 26       	eor	r0, r18
    1708:	26 95       	lsr	r18
    170a:	32 27       	eor	r19, r18
    170c:	23 27       	eor	r18, r19
    170e:	22 0f       	add	r18, r18
    1710:	22 0f       	add	r18, r18
    1712:	22 0f       	add	r18, r18
    1714:	20 25       	eor	r18, r0
    1716:	80 85       	ldd	r24, Z+8	; 0x08
    1718:	28 27       	eor	r18, r24
    171a:	02 2e       	mov	r0, r18
    171c:	22 95       	swap	r18
    171e:	20 7f       	andi	r18, 0xF0	; 240
    1720:	20 25       	eor	r18, r0
    1722:	03 2e       	mov	r0, r19
    1724:	32 2f       	mov	r19, r18
    1726:	22 95       	swap	r18
    1728:	2f 70       	andi	r18, 0x0F	; 15
    172a:	02 26       	eor	r0, r18
    172c:	26 95       	lsr	r18
    172e:	32 27       	eor	r19, r18
    1730:	23 27       	eor	r18, r19
    1732:	22 0f       	add	r18, r18
    1734:	22 0f       	add	r18, r18
    1736:	22 0f       	add	r18, r18
    1738:	20 25       	eor	r18, r0
    173a:	41 85       	ldd	r20, Z+9	; 0x09
    173c:	c9 01       	movw	r24, r18
    173e:	84 27       	eor	r24, r20
    1740:	08 2e       	mov	r0, r24
    1742:	82 95       	swap	r24
    1744:	80 7f       	andi	r24, 0xF0	; 240
    1746:	80 25       	eor	r24, r0
    1748:	09 2e       	mov	r0, r25
    174a:	98 2f       	mov	r25, r24
    174c:	82 95       	swap	r24
    174e:	8f 70       	andi	r24, 0x0F	; 15
    1750:	08 26       	eor	r0, r24
    1752:	86 95       	lsr	r24
    1754:	98 27       	eor	r25, r24
    1756:	89 27       	eor	r24, r25
    1758:	88 0f       	add	r24, r24
    175a:	88 0f       	add	r24, r24
    175c:	88 0f       	add	r24, r24
    175e:	80 25       	eor	r24, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1760:	08 95       	ret

00001762 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1762:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1764:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1766:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1768:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <tx_mask>
    or tmpreg1, ddrreg
    176c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    176e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1770:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1772:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <tx_mask>
    1776:	20 30       	cpi	r18, 0x00	; 0
    1778:	29 f0       	breq	.+10     	; 0x1784 <message_send+0x22>
    177a:	00 00       	nop
    177c:	25 b1       	in	r18, 0x05	; 5
    177e:	23 2b       	or	r18, r19
    1780:	25 b9       	out	0x05, r18	; 5
    1782:	04 c0       	rjmp	.+8      	; 0x178c <message_send+0x2a>
    1784:	00 00       	nop
    1786:	00 00       	nop
    1788:	00 00       	nop
    178a:	00 c0       	rjmp	.+0      	; 0x178c <message_send+0x2a>
    178c:	00 00       	nop
    178e:	00 00       	nop
    1790:	00 00       	nop
    1792:	30 95       	com	r19
    1794:	25 b1       	in	r18, 0x05	; 5
    1796:	23 23       	and	r18, r19
    1798:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    179a:	2e ea       	ldi	r18, 0xAE	; 174
    179c:	2a 95       	dec	r18
    179e:	f1 f7       	brne	.-4      	; 0x179c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    17a0:	2b ee       	ldi	r18, 0xEB	; 235

000017a2 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    17a2:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    17a4:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    17a6:	0a c0       	rjmp	.+20     	; 0x17bc <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    17a8:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    17aa:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <tx_mask>
    com tmpreg2
    17ae:	30 95       	com	r19
    in tmpreg1, IR_PORT
    17b0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    17b2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    17b4:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    17b6:	0f be       	out	0x3f, r0	; 63
    return 0
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	08 95       	ret

000017bc <nocollision>:
nocollision:
    nop
    17bc:	00 00       	nop
    dec tmpreg1
    17be:	2a 95       	dec	r18
    brne checkcollision
    17c0:	81 f7       	brne	.-32     	; 0x17a2 <checkcollision>

    ldi tmpreg1, 0x01
    17c2:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    17c4:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <tx_mask>
    17c8:	20 30       	cpi	r18, 0x00	; 0
    17ca:	29 f0       	breq	.+10     	; 0x17d6 <nocollision+0x1a>
    17cc:	00 00       	nop
    17ce:	25 b1       	in	r18, 0x05	; 5
    17d0:	23 2b       	or	r18, r19
    17d2:	25 b9       	out	0x05, r18	; 5
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <nocollision+0x22>
    17d6:	00 00       	nop
    17d8:	00 00       	nop
    17da:	00 00       	nop
    17dc:	00 c0       	rjmp	.+0      	; 0x17de <nocollision+0x22>
    17de:	00 00       	nop
    17e0:	00 00       	nop
    17e2:	00 00       	nop
    17e4:	30 95       	com	r19
    17e6:	25 b1       	in	r18, 0x05	; 5
    17e8:	23 23       	and	r18, r19
    17ea:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    17ec:	00 00       	nop
    17ee:	24 e5       	ldi	r18, 0x54	; 84
    17f0:	2a 95       	dec	r18
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    17f4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    17f6:	8c e0       	ldi	r24, 0x0C	; 12

000017f8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    17f8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    17fc:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    17fe:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1800:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1802:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1804:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1806:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1808:	50 e0       	ldi	r21, 0x00	; 0

0000180a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    180a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    180c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    180e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1810:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1812:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <tx_mask>
    1816:	20 30       	cpi	r18, 0x00	; 0
    1818:	29 f0       	breq	.+10     	; 0x1824 <sendbit+0x1a>
    181a:	00 00       	nop
    181c:	25 b1       	in	r18, 0x05	; 5
    181e:	23 2b       	or	r18, r19
    1820:	25 b9       	out	0x05, r18	; 5
    1822:	04 c0       	rjmp	.+8      	; 0x182c <sendbit+0x22>
    1824:	00 00       	nop
    1826:	00 00       	nop
    1828:	00 00       	nop
    182a:	00 c0       	rjmp	.+0      	; 0x182c <sendbit+0x22>
    182c:	00 00       	nop
    182e:	00 00       	nop
    1830:	00 00       	nop
    1832:	30 95       	com	r19
    1834:	25 b1       	in	r18, 0x05	; 5
    1836:	23 23       	and	r18, r19
    1838:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    183a:	00 00       	nop
    183c:	21 e5       	ldi	r18, 0x51	; 81
    183e:	2a 95       	dec	r18
    1840:	f1 f7       	brne	.-4      	; 0x183e <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1842:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1844:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1846:	9a 95       	dec	r25
    brne sendbit
    1848:	01 f7       	brne	.-64     	; 0x180a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    184a:	8a 95       	dec	r24
    brne sendbyte
    184c:	a9 f6       	brne	.-86     	; 0x17f8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    184e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1850:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1852:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1854:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1856:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <tx_mask>
    com tmpreg2
    185a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    185c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    185e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1860:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1862:	0f be       	out	0x3f, r0	; 63
    return 1
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	08 95       	ret

00001868 <main>:
    delay(counter_delay);
}

int main() {
    // initialize hardware
    kilo_init();
    1868:	0e 94 18 02 	call	0x430	; 0x430 <kilo_init>
    kilo_message_tx_success = tx_message_success;
    186c:	84 e7       	ldi	r24, 0x74	; 116
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <kilo_message_tx_success+0x1>
    1874:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <kilo_message_tx_success>
    kilo_message_tx = tx_message;
    1878:	81 e7       	ldi	r24, 0x71	; 113
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <kilo_message_tx+0x1>
    1880:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <kilo_message_tx>
    kilo_message_rx = rx_message;
    1884:	8b e7       	ldi	r24, 0x7B	; 123
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <kilo_message_rx+0x1>
    188c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <kilo_message_rx>
    // start program
    kilo_start(setup, loop);
    1890:	64 ed       	ldi	r22, 0xD4	; 212
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	85 e9       	ldi	r24, 0x95	; 149
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 14 03 	call	0x628	; 0x628 <kilo_start>

    return 0;
}
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	08 95       	ret

000018a2 <__divmodhi4>:
    18a2:	97 fb       	bst	r25, 7
    18a4:	07 2e       	mov	r0, r23
    18a6:	16 f4       	brtc	.+4      	; 0x18ac <__divmodhi4+0xa>
    18a8:	00 94       	com	r0
    18aa:	07 d0       	rcall	.+14     	; 0x18ba <__divmodhi4_neg1>
    18ac:	77 fd       	sbrc	r23, 7
    18ae:	09 d0       	rcall	.+18     	; 0x18c2 <__divmodhi4_neg2>
    18b0:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__udivmodhi4>
    18b4:	07 fc       	sbrc	r0, 7
    18b6:	05 d0       	rcall	.+10     	; 0x18c2 <__divmodhi4_neg2>
    18b8:	3e f4       	brtc	.+14     	; 0x18c8 <__divmodhi4_exit>

000018ba <__divmodhi4_neg1>:
    18ba:	90 95       	com	r25
    18bc:	81 95       	neg	r24
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	08 95       	ret

000018c2 <__divmodhi4_neg2>:
    18c2:	70 95       	com	r23
    18c4:	61 95       	neg	r22
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255

000018c8 <__divmodhi4_exit>:
    18c8:	08 95       	ret

000018ca <__tablejump2__>:
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	05 90       	lpm	r0, Z+
    18d0:	f4 91       	lpm	r31, Z
    18d2:	e0 2d       	mov	r30, r0
    18d4:	09 94       	ijmp

000018d6 <__umulhisi3>:
    18d6:	a2 9f       	mul	r26, r18
    18d8:	b0 01       	movw	r22, r0
    18da:	b3 9f       	mul	r27, r19
    18dc:	c0 01       	movw	r24, r0
    18de:	a3 9f       	mul	r26, r19
    18e0:	70 0d       	add	r23, r0
    18e2:	81 1d       	adc	r24, r1
    18e4:	11 24       	eor	r1, r1
    18e6:	91 1d       	adc	r25, r1
    18e8:	b2 9f       	mul	r27, r18
    18ea:	70 0d       	add	r23, r0
    18ec:	81 1d       	adc	r24, r1
    18ee:	11 24       	eor	r1, r1
    18f0:	91 1d       	adc	r25, r1
    18f2:	08 95       	ret

000018f4 <__udivmodhi4>:
    18f4:	aa 1b       	sub	r26, r26
    18f6:	bb 1b       	sub	r27, r27
    18f8:	51 e1       	ldi	r21, 0x11	; 17
    18fa:	07 c0       	rjmp	.+14     	; 0x190a <__udivmodhi4_ep>

000018fc <__udivmodhi4_loop>:
    18fc:	aa 1f       	adc	r26, r26
    18fe:	bb 1f       	adc	r27, r27
    1900:	a6 17       	cp	r26, r22
    1902:	b7 07       	cpc	r27, r23
    1904:	10 f0       	brcs	.+4      	; 0x190a <__udivmodhi4_ep>
    1906:	a6 1b       	sub	r26, r22
    1908:	b7 0b       	sbc	r27, r23

0000190a <__udivmodhi4_ep>:
    190a:	88 1f       	adc	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	5a 95       	dec	r21
    1910:	a9 f7       	brne	.-22     	; 0x18fc <__udivmodhi4_loop>
    1912:	80 95       	com	r24
    1914:	90 95       	com	r25
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	08 95       	ret

0000191c <__subsf3>:
    191c:	50 58       	subi	r21, 0x80	; 128

0000191e <__addsf3>:
    191e:	bb 27       	eor	r27, r27
    1920:	aa 27       	eor	r26, r26
    1922:	0e 94 a6 0c 	call	0x194c	; 0x194c <__addsf3x>
    1926:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_round>
    192a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fp_pscA>
    192e:	38 f0       	brcs	.+14     	; 0x193e <__addsf3+0x20>
    1930:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_pscB>
    1934:	20 f0       	brcs	.+8      	; 0x193e <__addsf3+0x20>
    1936:	39 f4       	brne	.+14     	; 0x1946 <__addsf3+0x28>
    1938:	9f 3f       	cpi	r25, 0xFF	; 255
    193a:	19 f4       	brne	.+6      	; 0x1942 <__addsf3+0x24>
    193c:	26 f4       	brtc	.+8      	; 0x1946 <__addsf3+0x28>
    193e:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_nan>
    1942:	0e f4       	brtc	.+2      	; 0x1946 <__addsf3+0x28>
    1944:	e0 95       	com	r30
    1946:	e7 fb       	bst	r30, 7
    1948:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__fp_inf>

0000194c <__addsf3x>:
    194c:	e9 2f       	mov	r30, r25
    194e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_split3>
    1952:	58 f3       	brcs	.-42     	; 0x192a <__addsf3+0xc>
    1954:	ba 17       	cp	r27, r26
    1956:	62 07       	cpc	r22, r18
    1958:	73 07       	cpc	r23, r19
    195a:	84 07       	cpc	r24, r20
    195c:	95 07       	cpc	r25, r21
    195e:	20 f0       	brcs	.+8      	; 0x1968 <__addsf3x+0x1c>
    1960:	79 f4       	brne	.+30     	; 0x1980 <__addsf3x+0x34>
    1962:	a6 f5       	brtc	.+104    	; 0x19cc <__addsf3x+0x80>
    1964:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__fp_zero>
    1968:	0e f4       	brtc	.+2      	; 0x196c <__addsf3x+0x20>
    196a:	e0 95       	com	r30
    196c:	0b 2e       	mov	r0, r27
    196e:	ba 2f       	mov	r27, r26
    1970:	a0 2d       	mov	r26, r0
    1972:	0b 01       	movw	r0, r22
    1974:	b9 01       	movw	r22, r18
    1976:	90 01       	movw	r18, r0
    1978:	0c 01       	movw	r0, r24
    197a:	ca 01       	movw	r24, r20
    197c:	a0 01       	movw	r20, r0
    197e:	11 24       	eor	r1, r1
    1980:	ff 27       	eor	r31, r31
    1982:	59 1b       	sub	r21, r25
    1984:	99 f0       	breq	.+38     	; 0x19ac <__addsf3x+0x60>
    1986:	59 3f       	cpi	r21, 0xF9	; 249
    1988:	50 f4       	brcc	.+20     	; 0x199e <__addsf3x+0x52>
    198a:	50 3e       	cpi	r21, 0xE0	; 224
    198c:	68 f1       	brcs	.+90     	; 0x19e8 <__addsf3x+0x9c>
    198e:	1a 16       	cp	r1, r26
    1990:	f0 40       	sbci	r31, 0x00	; 0
    1992:	a2 2f       	mov	r26, r18
    1994:	23 2f       	mov	r18, r19
    1996:	34 2f       	mov	r19, r20
    1998:	44 27       	eor	r20, r20
    199a:	58 5f       	subi	r21, 0xF8	; 248
    199c:	f3 cf       	rjmp	.-26     	; 0x1984 <__addsf3x+0x38>
    199e:	46 95       	lsr	r20
    19a0:	37 95       	ror	r19
    19a2:	27 95       	ror	r18
    19a4:	a7 95       	ror	r26
    19a6:	f0 40       	sbci	r31, 0x00	; 0
    19a8:	53 95       	inc	r21
    19aa:	c9 f7       	brne	.-14     	; 0x199e <__addsf3x+0x52>
    19ac:	7e f4       	brtc	.+30     	; 0x19cc <__addsf3x+0x80>
    19ae:	1f 16       	cp	r1, r31
    19b0:	ba 0b       	sbc	r27, r26
    19b2:	62 0b       	sbc	r22, r18
    19b4:	73 0b       	sbc	r23, r19
    19b6:	84 0b       	sbc	r24, r20
    19b8:	ba f0       	brmi	.+46     	; 0x19e8 <__addsf3x+0x9c>
    19ba:	91 50       	subi	r25, 0x01	; 1
    19bc:	a1 f0       	breq	.+40     	; 0x19e6 <__addsf3x+0x9a>
    19be:	ff 0f       	add	r31, r31
    19c0:	bb 1f       	adc	r27, r27
    19c2:	66 1f       	adc	r22, r22
    19c4:	77 1f       	adc	r23, r23
    19c6:	88 1f       	adc	r24, r24
    19c8:	c2 f7       	brpl	.-16     	; 0x19ba <__addsf3x+0x6e>
    19ca:	0e c0       	rjmp	.+28     	; 0x19e8 <__addsf3x+0x9c>
    19cc:	ba 0f       	add	r27, r26
    19ce:	62 1f       	adc	r22, r18
    19d0:	73 1f       	adc	r23, r19
    19d2:	84 1f       	adc	r24, r20
    19d4:	48 f4       	brcc	.+18     	; 0x19e8 <__addsf3x+0x9c>
    19d6:	87 95       	ror	r24
    19d8:	77 95       	ror	r23
    19da:	67 95       	ror	r22
    19dc:	b7 95       	ror	r27
    19de:	f7 95       	ror	r31
    19e0:	9e 3f       	cpi	r25, 0xFE	; 254
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <__addsf3x+0x9a>
    19e4:	b0 cf       	rjmp	.-160    	; 0x1946 <__addsf3+0x28>
    19e6:	93 95       	inc	r25
    19e8:	88 0f       	add	r24, r24
    19ea:	08 f0       	brcs	.+2      	; 0x19ee <__addsf3x+0xa2>
    19ec:	99 27       	eor	r25, r25
    19ee:	ee 0f       	add	r30, r30
    19f0:	97 95       	ror	r25
    19f2:	87 95       	ror	r24
    19f4:	08 95       	ret

000019f6 <__divsf3>:
    19f6:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__divsf3x>
    19fa:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_round>
    19fe:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_pscB>
    1a02:	58 f0       	brcs	.+22     	; 0x1a1a <__divsf3+0x24>
    1a04:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fp_pscA>
    1a08:	40 f0       	brcs	.+16     	; 0x1a1a <__divsf3+0x24>
    1a0a:	29 f4       	brne	.+10     	; 0x1a16 <__divsf3+0x20>
    1a0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0e:	29 f0       	breq	.+10     	; 0x1a1a <__divsf3+0x24>
    1a10:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__fp_inf>
    1a14:	51 11       	cpse	r21, r1
    1a16:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__fp_szero>
    1a1a:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_nan>

00001a1e <__divsf3x>:
    1a1e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_split3>
    1a22:	68 f3       	brcs	.-38     	; 0x19fe <__divsf3+0x8>

00001a24 <__divsf3_pse>:
    1a24:	99 23       	and	r25, r25
    1a26:	b1 f3       	breq	.-20     	; 0x1a14 <__divsf3+0x1e>
    1a28:	55 23       	and	r21, r21
    1a2a:	91 f3       	breq	.-28     	; 0x1a10 <__divsf3+0x1a>
    1a2c:	95 1b       	sub	r25, r21
    1a2e:	55 0b       	sbc	r21, r21
    1a30:	bb 27       	eor	r27, r27
    1a32:	aa 27       	eor	r26, r26
    1a34:	62 17       	cp	r22, r18
    1a36:	73 07       	cpc	r23, r19
    1a38:	84 07       	cpc	r24, r20
    1a3a:	38 f0       	brcs	.+14     	; 0x1a4a <__divsf3_pse+0x26>
    1a3c:	9f 5f       	subi	r25, 0xFF	; 255
    1a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a40:	22 0f       	add	r18, r18
    1a42:	33 1f       	adc	r19, r19
    1a44:	44 1f       	adc	r20, r20
    1a46:	aa 1f       	adc	r26, r26
    1a48:	a9 f3       	breq	.-22     	; 0x1a34 <__divsf3_pse+0x10>
    1a4a:	35 d0       	rcall	.+106    	; 0x1ab6 <__divsf3_pse+0x92>
    1a4c:	0e 2e       	mov	r0, r30
    1a4e:	3a f0       	brmi	.+14     	; 0x1a5e <__divsf3_pse+0x3a>
    1a50:	e0 e8       	ldi	r30, 0x80	; 128
    1a52:	32 d0       	rcall	.+100    	; 0x1ab8 <__divsf3_pse+0x94>
    1a54:	91 50       	subi	r25, 0x01	; 1
    1a56:	50 40       	sbci	r21, 0x00	; 0
    1a58:	e6 95       	lsr	r30
    1a5a:	00 1c       	adc	r0, r0
    1a5c:	ca f7       	brpl	.-14     	; 0x1a50 <__divsf3_pse+0x2c>
    1a5e:	2b d0       	rcall	.+86     	; 0x1ab6 <__divsf3_pse+0x92>
    1a60:	fe 2f       	mov	r31, r30
    1a62:	29 d0       	rcall	.+82     	; 0x1ab6 <__divsf3_pse+0x92>
    1a64:	66 0f       	add	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	bb 1f       	adc	r27, r27
    1a6c:	26 17       	cp	r18, r22
    1a6e:	37 07       	cpc	r19, r23
    1a70:	48 07       	cpc	r20, r24
    1a72:	ab 07       	cpc	r26, r27
    1a74:	b0 e8       	ldi	r27, 0x80	; 128
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <__divsf3_pse+0x56>
    1a78:	bb 0b       	sbc	r27, r27
    1a7a:	80 2d       	mov	r24, r0
    1a7c:	bf 01       	movw	r22, r30
    1a7e:	ff 27       	eor	r31, r31
    1a80:	93 58       	subi	r25, 0x83	; 131
    1a82:	5f 4f       	sbci	r21, 0xFF	; 255
    1a84:	3a f0       	brmi	.+14     	; 0x1a94 <__divsf3_pse+0x70>
    1a86:	9e 3f       	cpi	r25, 0xFE	; 254
    1a88:	51 05       	cpc	r21, r1
    1a8a:	78 f0       	brcs	.+30     	; 0x1aaa <__divsf3_pse+0x86>
    1a8c:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__fp_inf>
    1a90:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__fp_szero>
    1a94:	5f 3f       	cpi	r21, 0xFF	; 255
    1a96:	e4 f3       	brlt	.-8      	; 0x1a90 <__divsf3_pse+0x6c>
    1a98:	98 3e       	cpi	r25, 0xE8	; 232
    1a9a:	d4 f3       	brlt	.-12     	; 0x1a90 <__divsf3_pse+0x6c>
    1a9c:	86 95       	lsr	r24
    1a9e:	77 95       	ror	r23
    1aa0:	67 95       	ror	r22
    1aa2:	b7 95       	ror	r27
    1aa4:	f7 95       	ror	r31
    1aa6:	9f 5f       	subi	r25, 0xFF	; 255
    1aa8:	c9 f7       	brne	.-14     	; 0x1a9c <__divsf3_pse+0x78>
    1aaa:	88 0f       	add	r24, r24
    1aac:	91 1d       	adc	r25, r1
    1aae:	96 95       	lsr	r25
    1ab0:	87 95       	ror	r24
    1ab2:	97 f9       	bld	r25, 7
    1ab4:	08 95       	ret
    1ab6:	e1 e0       	ldi	r30, 0x01	; 1
    1ab8:	66 0f       	add	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	88 1f       	adc	r24, r24
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	62 17       	cp	r22, r18
    1ac2:	73 07       	cpc	r23, r19
    1ac4:	84 07       	cpc	r24, r20
    1ac6:	ba 07       	cpc	r27, r26
    1ac8:	20 f0       	brcs	.+8      	; 0x1ad2 <__divsf3_pse+0xae>
    1aca:	62 1b       	sub	r22, r18
    1acc:	73 0b       	sbc	r23, r19
    1ace:	84 0b       	sbc	r24, r20
    1ad0:	ba 0b       	sbc	r27, r26
    1ad2:	ee 1f       	adc	r30, r30
    1ad4:	88 f7       	brcc	.-30     	; 0x1ab8 <__divsf3_pse+0x94>
    1ad6:	e0 95       	com	r30
    1ad8:	08 95       	ret

00001ada <__fixsfsi>:
    1ada:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__fixunssfsi>
    1ade:	68 94       	set
    1ae0:	b1 11       	cpse	r27, r1
    1ae2:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__fp_szero>
    1ae6:	08 95       	ret

00001ae8 <__fixunssfsi>:
    1ae8:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_splitA>
    1aec:	88 f0       	brcs	.+34     	; 0x1b10 <__fixunssfsi+0x28>
    1aee:	9f 57       	subi	r25, 0x7F	; 127
    1af0:	98 f0       	brcs	.+38     	; 0x1b18 <__fixunssfsi+0x30>
    1af2:	b9 2f       	mov	r27, r25
    1af4:	99 27       	eor	r25, r25
    1af6:	b7 51       	subi	r27, 0x17	; 23
    1af8:	b0 f0       	brcs	.+44     	; 0x1b26 <__fixunssfsi+0x3e>
    1afa:	e1 f0       	breq	.+56     	; 0x1b34 <__fixunssfsi+0x4c>
    1afc:	66 0f       	add	r22, r22
    1afe:	77 1f       	adc	r23, r23
    1b00:	88 1f       	adc	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	1a f0       	brmi	.+6      	; 0x1b0c <__fixunssfsi+0x24>
    1b06:	ba 95       	dec	r27
    1b08:	c9 f7       	brne	.-14     	; 0x1afc <__fixunssfsi+0x14>
    1b0a:	14 c0       	rjmp	.+40     	; 0x1b34 <__fixunssfsi+0x4c>
    1b0c:	b1 30       	cpi	r27, 0x01	; 1
    1b0e:	91 f0       	breq	.+36     	; 0x1b34 <__fixunssfsi+0x4c>
    1b10:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_zero>
    1b14:	b1 e0       	ldi	r27, 0x01	; 1
    1b16:	08 95       	ret
    1b18:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__fp_zero>
    1b1c:	67 2f       	mov	r22, r23
    1b1e:	78 2f       	mov	r23, r24
    1b20:	88 27       	eor	r24, r24
    1b22:	b8 5f       	subi	r27, 0xF8	; 248
    1b24:	39 f0       	breq	.+14     	; 0x1b34 <__fixunssfsi+0x4c>
    1b26:	b9 3f       	cpi	r27, 0xF9	; 249
    1b28:	cc f3       	brlt	.-14     	; 0x1b1c <__fixunssfsi+0x34>
    1b2a:	86 95       	lsr	r24
    1b2c:	77 95       	ror	r23
    1b2e:	67 95       	ror	r22
    1b30:	b3 95       	inc	r27
    1b32:	d9 f7       	brne	.-10     	; 0x1b2a <__fixunssfsi+0x42>
    1b34:	3e f4       	brtc	.+14     	; 0x1b44 <__fixunssfsi+0x5c>
    1b36:	90 95       	com	r25
    1b38:	80 95       	com	r24
    1b3a:	70 95       	com	r23
    1b3c:	61 95       	neg	r22
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	8f 4f       	sbci	r24, 0xFF	; 255
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	08 95       	ret

00001b46 <__floatunsisf>:
    1b46:	e8 94       	clt
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <__floatsisf+0x12>

00001b4a <__floatsisf>:
    1b4a:	97 fb       	bst	r25, 7
    1b4c:	3e f4       	brtc	.+14     	; 0x1b5c <__floatsisf+0x12>
    1b4e:	90 95       	com	r25
    1b50:	80 95       	com	r24
    1b52:	70 95       	com	r23
    1b54:	61 95       	neg	r22
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	99 23       	and	r25, r25
    1b5e:	a9 f0       	breq	.+42     	; 0x1b8a <__floatsisf+0x40>
    1b60:	f9 2f       	mov	r31, r25
    1b62:	96 e9       	ldi	r25, 0x96	; 150
    1b64:	bb 27       	eor	r27, r27
    1b66:	93 95       	inc	r25
    1b68:	f6 95       	lsr	r31
    1b6a:	87 95       	ror	r24
    1b6c:	77 95       	ror	r23
    1b6e:	67 95       	ror	r22
    1b70:	b7 95       	ror	r27
    1b72:	f1 11       	cpse	r31, r1
    1b74:	f8 cf       	rjmp	.-16     	; 0x1b66 <__floatsisf+0x1c>
    1b76:	fa f4       	brpl	.+62     	; 0x1bb6 <__floatsisf+0x6c>
    1b78:	bb 0f       	add	r27, r27
    1b7a:	11 f4       	brne	.+4      	; 0x1b80 <__floatsisf+0x36>
    1b7c:	60 ff       	sbrs	r22, 0
    1b7e:	1b c0       	rjmp	.+54     	; 0x1bb6 <__floatsisf+0x6c>
    1b80:	6f 5f       	subi	r22, 0xFF	; 255
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	8f 4f       	sbci	r24, 0xFF	; 255
    1b86:	9f 4f       	sbci	r25, 0xFF	; 255
    1b88:	16 c0       	rjmp	.+44     	; 0x1bb6 <__floatsisf+0x6c>
    1b8a:	88 23       	and	r24, r24
    1b8c:	11 f0       	breq	.+4      	; 0x1b92 <__floatsisf+0x48>
    1b8e:	96 e9       	ldi	r25, 0x96	; 150
    1b90:	11 c0       	rjmp	.+34     	; 0x1bb4 <__floatsisf+0x6a>
    1b92:	77 23       	and	r23, r23
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <__floatsisf+0x54>
    1b96:	9e e8       	ldi	r25, 0x8E	; 142
    1b98:	87 2f       	mov	r24, r23
    1b9a:	76 2f       	mov	r23, r22
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <__floatsisf+0x5e>
    1b9e:	66 23       	and	r22, r22
    1ba0:	71 f0       	breq	.+28     	; 0x1bbe <__floatsisf+0x74>
    1ba2:	96 e8       	ldi	r25, 0x86	; 134
    1ba4:	86 2f       	mov	r24, r22
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	2a f0       	brmi	.+10     	; 0x1bb6 <__floatsisf+0x6c>
    1bac:	9a 95       	dec	r25
    1bae:	66 0f       	add	r22, r22
    1bb0:	77 1f       	adc	r23, r23
    1bb2:	88 1f       	adc	r24, r24
    1bb4:	da f7       	brpl	.-10     	; 0x1bac <__floatsisf+0x62>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	96 95       	lsr	r25
    1bba:	87 95       	ror	r24
    1bbc:	97 f9       	bld	r25, 7
    1bbe:	08 95       	ret

00001bc0 <__fp_inf>:
    1bc0:	97 f9       	bld	r25, 7
    1bc2:	9f 67       	ori	r25, 0x7F	; 127
    1bc4:	80 e8       	ldi	r24, 0x80	; 128
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	08 95       	ret

00001bcc <__fp_nan>:
    1bcc:	9f ef       	ldi	r25, 0xFF	; 255
    1bce:	80 ec       	ldi	r24, 0xC0	; 192
    1bd0:	08 95       	ret

00001bd2 <__fp_pscA>:
    1bd2:	00 24       	eor	r0, r0
    1bd4:	0a 94       	dec	r0
    1bd6:	16 16       	cp	r1, r22
    1bd8:	17 06       	cpc	r1, r23
    1bda:	18 06       	cpc	r1, r24
    1bdc:	09 06       	cpc	r0, r25
    1bde:	08 95       	ret

00001be0 <__fp_pscB>:
    1be0:	00 24       	eor	r0, r0
    1be2:	0a 94       	dec	r0
    1be4:	12 16       	cp	r1, r18
    1be6:	13 06       	cpc	r1, r19
    1be8:	14 06       	cpc	r1, r20
    1bea:	05 06       	cpc	r0, r21
    1bec:	08 95       	ret

00001bee <__fp_round>:
    1bee:	09 2e       	mov	r0, r25
    1bf0:	03 94       	inc	r0
    1bf2:	00 0c       	add	r0, r0
    1bf4:	11 f4       	brne	.+4      	; 0x1bfa <__fp_round+0xc>
    1bf6:	88 23       	and	r24, r24
    1bf8:	52 f0       	brmi	.+20     	; 0x1c0e <__fp_round+0x20>
    1bfa:	bb 0f       	add	r27, r27
    1bfc:	40 f4       	brcc	.+16     	; 0x1c0e <__fp_round+0x20>
    1bfe:	bf 2b       	or	r27, r31
    1c00:	11 f4       	brne	.+4      	; 0x1c06 <__fp_round+0x18>
    1c02:	60 ff       	sbrs	r22, 0
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <__fp_round+0x20>
    1c06:	6f 5f       	subi	r22, 0xFF	; 255
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0e:	08 95       	ret

00001c10 <__fp_split3>:
    1c10:	57 fd       	sbrc	r21, 7
    1c12:	90 58       	subi	r25, 0x80	; 128
    1c14:	44 0f       	add	r20, r20
    1c16:	55 1f       	adc	r21, r21
    1c18:	59 f0       	breq	.+22     	; 0x1c30 <__fp_splitA+0x10>
    1c1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c1c:	71 f0       	breq	.+28     	; 0x1c3a <__fp_splitA+0x1a>
    1c1e:	47 95       	ror	r20

00001c20 <__fp_splitA>:
    1c20:	88 0f       	add	r24, r24
    1c22:	97 fb       	bst	r25, 7
    1c24:	99 1f       	adc	r25, r25
    1c26:	61 f0       	breq	.+24     	; 0x1c40 <__fp_splitA+0x20>
    1c28:	9f 3f       	cpi	r25, 0xFF	; 255
    1c2a:	79 f0       	breq	.+30     	; 0x1c4a <__fp_splitA+0x2a>
    1c2c:	87 95       	ror	r24
    1c2e:	08 95       	ret
    1c30:	12 16       	cp	r1, r18
    1c32:	13 06       	cpc	r1, r19
    1c34:	14 06       	cpc	r1, r20
    1c36:	55 1f       	adc	r21, r21
    1c38:	f2 cf       	rjmp	.-28     	; 0x1c1e <__fp_split3+0xe>
    1c3a:	46 95       	lsr	r20
    1c3c:	f1 df       	rcall	.-30     	; 0x1c20 <__fp_splitA>
    1c3e:	08 c0       	rjmp	.+16     	; 0x1c50 <__fp_splitA+0x30>
    1c40:	16 16       	cp	r1, r22
    1c42:	17 06       	cpc	r1, r23
    1c44:	18 06       	cpc	r1, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	f1 cf       	rjmp	.-30     	; 0x1c2c <__fp_splitA+0xc>
    1c4a:	86 95       	lsr	r24
    1c4c:	71 05       	cpc	r23, r1
    1c4e:	61 05       	cpc	r22, r1
    1c50:	08 94       	sec
    1c52:	08 95       	ret

00001c54 <__fp_zero>:
    1c54:	e8 94       	clt

00001c56 <__fp_szero>:
    1c56:	bb 27       	eor	r27, r27
    1c58:	66 27       	eor	r22, r22
    1c5a:	77 27       	eor	r23, r23
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	97 f9       	bld	r25, 7
    1c60:	08 95       	ret

00001c62 <__mulsf3>:
    1c62:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__mulsf3x>
    1c66:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__fp_round>
    1c6a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fp_pscA>
    1c6e:	38 f0       	brcs	.+14     	; 0x1c7e <__mulsf3+0x1c>
    1c70:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fp_pscB>
    1c74:	20 f0       	brcs	.+8      	; 0x1c7e <__mulsf3+0x1c>
    1c76:	95 23       	and	r25, r21
    1c78:	11 f0       	breq	.+4      	; 0x1c7e <__mulsf3+0x1c>
    1c7a:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__fp_inf>
    1c7e:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__fp_nan>
    1c82:	11 24       	eor	r1, r1
    1c84:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__fp_szero>

00001c88 <__mulsf3x>:
    1c88:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__fp_split3>
    1c8c:	70 f3       	brcs	.-36     	; 0x1c6a <__mulsf3+0x8>

00001c8e <__mulsf3_pse>:
    1c8e:	95 9f       	mul	r25, r21
    1c90:	c1 f3       	breq	.-16     	; 0x1c82 <__mulsf3+0x20>
    1c92:	95 0f       	add	r25, r21
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	55 1f       	adc	r21, r21
    1c98:	62 9f       	mul	r22, r18
    1c9a:	f0 01       	movw	r30, r0
    1c9c:	72 9f       	mul	r23, r18
    1c9e:	bb 27       	eor	r27, r27
    1ca0:	f0 0d       	add	r31, r0
    1ca2:	b1 1d       	adc	r27, r1
    1ca4:	63 9f       	mul	r22, r19
    1ca6:	aa 27       	eor	r26, r26
    1ca8:	f0 0d       	add	r31, r0
    1caa:	b1 1d       	adc	r27, r1
    1cac:	aa 1f       	adc	r26, r26
    1cae:	64 9f       	mul	r22, r20
    1cb0:	66 27       	eor	r22, r22
    1cb2:	b0 0d       	add	r27, r0
    1cb4:	a1 1d       	adc	r26, r1
    1cb6:	66 1f       	adc	r22, r22
    1cb8:	82 9f       	mul	r24, r18
    1cba:	22 27       	eor	r18, r18
    1cbc:	b0 0d       	add	r27, r0
    1cbe:	a1 1d       	adc	r26, r1
    1cc0:	62 1f       	adc	r22, r18
    1cc2:	73 9f       	mul	r23, r19
    1cc4:	b0 0d       	add	r27, r0
    1cc6:	a1 1d       	adc	r26, r1
    1cc8:	62 1f       	adc	r22, r18
    1cca:	83 9f       	mul	r24, r19
    1ccc:	a0 0d       	add	r26, r0
    1cce:	61 1d       	adc	r22, r1
    1cd0:	22 1f       	adc	r18, r18
    1cd2:	74 9f       	mul	r23, r20
    1cd4:	33 27       	eor	r19, r19
    1cd6:	a0 0d       	add	r26, r0
    1cd8:	61 1d       	adc	r22, r1
    1cda:	23 1f       	adc	r18, r19
    1cdc:	84 9f       	mul	r24, r20
    1cde:	60 0d       	add	r22, r0
    1ce0:	21 1d       	adc	r18, r1
    1ce2:	82 2f       	mov	r24, r18
    1ce4:	76 2f       	mov	r23, r22
    1ce6:	6a 2f       	mov	r22, r26
    1ce8:	11 24       	eor	r1, r1
    1cea:	9f 57       	subi	r25, 0x7F	; 127
    1cec:	50 40       	sbci	r21, 0x00	; 0
    1cee:	9a f0       	brmi	.+38     	; 0x1d16 <__mulsf3_pse+0x88>
    1cf0:	f1 f0       	breq	.+60     	; 0x1d2e <__mulsf3_pse+0xa0>
    1cf2:	88 23       	and	r24, r24
    1cf4:	4a f0       	brmi	.+18     	; 0x1d08 <__mulsf3_pse+0x7a>
    1cf6:	ee 0f       	add	r30, r30
    1cf8:	ff 1f       	adc	r31, r31
    1cfa:	bb 1f       	adc	r27, r27
    1cfc:	66 1f       	adc	r22, r22
    1cfe:	77 1f       	adc	r23, r23
    1d00:	88 1f       	adc	r24, r24
    1d02:	91 50       	subi	r25, 0x01	; 1
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	a9 f7       	brne	.-22     	; 0x1cf2 <__mulsf3_pse+0x64>
    1d08:	9e 3f       	cpi	r25, 0xFE	; 254
    1d0a:	51 05       	cpc	r21, r1
    1d0c:	80 f0       	brcs	.+32     	; 0x1d2e <__mulsf3_pse+0xa0>
    1d0e:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__fp_inf>
    1d12:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__fp_szero>
    1d16:	5f 3f       	cpi	r21, 0xFF	; 255
    1d18:	e4 f3       	brlt	.-8      	; 0x1d12 <__mulsf3_pse+0x84>
    1d1a:	98 3e       	cpi	r25, 0xE8	; 232
    1d1c:	d4 f3       	brlt	.-12     	; 0x1d12 <__mulsf3_pse+0x84>
    1d1e:	86 95       	lsr	r24
    1d20:	77 95       	ror	r23
    1d22:	67 95       	ror	r22
    1d24:	b7 95       	ror	r27
    1d26:	f7 95       	ror	r31
    1d28:	e7 95       	ror	r30
    1d2a:	9f 5f       	subi	r25, 0xFF	; 255
    1d2c:	c1 f7       	brne	.-16     	; 0x1d1e <__mulsf3_pse+0x90>
    1d2e:	fe 2b       	or	r31, r30
    1d30:	88 0f       	add	r24, r24
    1d32:	91 1d       	adc	r25, r1
    1d34:	96 95       	lsr	r25
    1d36:	87 95       	ror	r24
    1d38:	97 f9       	bld	r25, 7
    1d3a:	08 95       	ret

00001d3c <do_rand>:
    1d3c:	8f 92       	push	r8
    1d3e:	9f 92       	push	r9
    1d40:	af 92       	push	r10
    1d42:	bf 92       	push	r11
    1d44:	cf 92       	push	r12
    1d46:	df 92       	push	r13
    1d48:	ef 92       	push	r14
    1d4a:	ff 92       	push	r15
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	ec 01       	movw	r28, r24
    1d52:	68 81       	ld	r22, Y
    1d54:	79 81       	ldd	r23, Y+1	; 0x01
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	61 15       	cp	r22, r1
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	81 05       	cpc	r24, r1
    1d60:	91 05       	cpc	r25, r1
    1d62:	21 f4       	brne	.+8      	; 0x1d6c <do_rand+0x30>
    1d64:	64 e2       	ldi	r22, 0x24	; 36
    1d66:	79 ed       	ldi	r23, 0xD9	; 217
    1d68:	8b e5       	ldi	r24, 0x5B	; 91
    1d6a:	97 e0       	ldi	r25, 0x07	; 7
    1d6c:	2d e1       	ldi	r18, 0x1D	; 29
    1d6e:	33 ef       	ldi	r19, 0xF3	; 243
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__divmodsi4>
    1d78:	49 01       	movw	r8, r18
    1d7a:	5a 01       	movw	r10, r20
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	ac 01       	movw	r20, r24
    1d80:	a7 ea       	ldi	r26, 0xA7	; 167
    1d82:	b1 e4       	ldi	r27, 0x41	; 65
    1d84:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__muluhisi3>
    1d88:	6b 01       	movw	r12, r22
    1d8a:	7c 01       	movw	r14, r24
    1d8c:	ac ee       	ldi	r26, 0xEC	; 236
    1d8e:	b4 ef       	ldi	r27, 0xF4	; 244
    1d90:	a5 01       	movw	r20, r10
    1d92:	94 01       	movw	r18, r8
    1d94:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__mulohisi3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	8c 0d       	add	r24, r12
    1d9e:	9d 1d       	adc	r25, r13
    1da0:	ae 1d       	adc	r26, r14
    1da2:	bf 1d       	adc	r27, r15
    1da4:	b7 ff       	sbrs	r27, 7
    1da6:	03 c0       	rjmp	.+6      	; 0x1dae <do_rand+0x72>
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	a1 09       	sbc	r26, r1
    1dac:	b0 48       	sbci	r27, 0x80	; 128
    1dae:	88 83       	st	Y, r24
    1db0:	99 83       	std	Y+1, r25	; 0x01
    1db2:	aa 83       	std	Y+2, r26	; 0x02
    1db4:	bb 83       	std	Y+3, r27	; 0x03
    1db6:	9f 77       	andi	r25, 0x7F	; 127
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	df 90       	pop	r13
    1dc2:	cf 90       	pop	r12
    1dc4:	bf 90       	pop	r11
    1dc6:	af 90       	pop	r10
    1dc8:	9f 90       	pop	r9
    1dca:	8f 90       	pop	r8
    1dcc:	08 95       	ret

00001dce <rand_r>:
    1dce:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <do_rand>
    1dd2:	08 95       	ret

00001dd4 <rand>:
    1dd4:	8f e0       	ldi	r24, 0x0F	; 15
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <do_rand>
    1ddc:	08 95       	ret

00001dde <srand>:
    1dde:	a0 e0       	ldi	r26, 0x00	; 0
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <next>
    1de6:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <next+0x1>
    1dea:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <next+0x2>
    1dee:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <next+0x3>
    1df2:	08 95       	ret

00001df4 <eeprom_read_byte>:
    1df4:	f9 99       	sbic	0x1f, 1	; 31
    1df6:	fe cf       	rjmp	.-4      	; 0x1df4 <eeprom_read_byte>
    1df8:	92 bd       	out	0x22, r25	; 34
    1dfa:	81 bd       	out	0x21, r24	; 33
    1dfc:	f8 9a       	sbi	0x1f, 0	; 31
    1dfe:	99 27       	eor	r25, r25
    1e00:	80 b5       	in	r24, 0x20	; 32
    1e02:	08 95       	ret

00001e04 <eeprom_write_byte>:
    1e04:	26 2f       	mov	r18, r22

00001e06 <eeprom_write_r18>:
    1e06:	f9 99       	sbic	0x1f, 1	; 31
    1e08:	fe cf       	rjmp	.-4      	; 0x1e06 <eeprom_write_r18>
    1e0a:	1f ba       	out	0x1f, r1	; 31
    1e0c:	92 bd       	out	0x22, r25	; 34
    1e0e:	81 bd       	out	0x21, r24	; 33
    1e10:	20 bd       	out	0x20, r18	; 32
    1e12:	0f b6       	in	r0, 0x3f	; 63
    1e14:	f8 94       	cli
    1e16:	fa 9a       	sbi	0x1f, 2	; 31
    1e18:	f9 9a       	sbi	0x1f, 1	; 31
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	08 95       	ret

00001e20 <__divmodsi4>:
    1e20:	05 2e       	mov	r0, r21
    1e22:	97 fb       	bst	r25, 7
    1e24:	1e f4       	brtc	.+6      	; 0x1e2c <__divmodsi4+0xc>
    1e26:	00 94       	com	r0
    1e28:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__negsi2>
    1e2c:	57 fd       	sbrc	r21, 7
    1e2e:	07 d0       	rcall	.+14     	; 0x1e3e <__divmodsi4_neg2>
    1e30:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__udivmodsi4>
    1e34:	07 fc       	sbrc	r0, 7
    1e36:	03 d0       	rcall	.+6      	; 0x1e3e <__divmodsi4_neg2>
    1e38:	4e f4       	brtc	.+18     	; 0x1e4c <__divmodsi4_exit>
    1e3a:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__negsi2>

00001e3e <__divmodsi4_neg2>:
    1e3e:	50 95       	com	r21
    1e40:	40 95       	com	r20
    1e42:	30 95       	com	r19
    1e44:	21 95       	neg	r18
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	4f 4f       	sbci	r20, 0xFF	; 255
    1e4a:	5f 4f       	sbci	r21, 0xFF	; 255

00001e4c <__divmodsi4_exit>:
    1e4c:	08 95       	ret

00001e4e <__negsi2>:
    1e4e:	90 95       	com	r25
    1e50:	80 95       	com	r24
    1e52:	70 95       	com	r23
    1e54:	61 95       	neg	r22
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255
    1e58:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5c:	08 95       	ret

00001e5e <__muluhisi3>:
    1e5e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__umulhisi3>
    1e62:	a5 9f       	mul	r26, r21
    1e64:	90 0d       	add	r25, r0
    1e66:	b4 9f       	mul	r27, r20
    1e68:	90 0d       	add	r25, r0
    1e6a:	a4 9f       	mul	r26, r20
    1e6c:	80 0d       	add	r24, r0
    1e6e:	91 1d       	adc	r25, r1
    1e70:	11 24       	eor	r1, r1
    1e72:	08 95       	ret

00001e74 <__mulshisi3>:
    1e74:	b7 ff       	sbrs	r27, 7
    1e76:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__muluhisi3>

00001e7a <__mulohisi3>:
    1e7a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__muluhisi3>
    1e7e:	82 1b       	sub	r24, r18
    1e80:	93 0b       	sbc	r25, r19
    1e82:	08 95       	ret

00001e84 <__udivmodsi4>:
    1e84:	a1 e2       	ldi	r26, 0x21	; 33
    1e86:	1a 2e       	mov	r1, r26
    1e88:	aa 1b       	sub	r26, r26
    1e8a:	bb 1b       	sub	r27, r27
    1e8c:	fd 01       	movw	r30, r26
    1e8e:	0d c0       	rjmp	.+26     	; 0x1eaa <__udivmodsi4_ep>

00001e90 <__udivmodsi4_loop>:
    1e90:	aa 1f       	adc	r26, r26
    1e92:	bb 1f       	adc	r27, r27
    1e94:	ee 1f       	adc	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	a2 17       	cp	r26, r18
    1e9a:	b3 07       	cpc	r27, r19
    1e9c:	e4 07       	cpc	r30, r20
    1e9e:	f5 07       	cpc	r31, r21
    1ea0:	20 f0       	brcs	.+8      	; 0x1eaa <__udivmodsi4_ep>
    1ea2:	a2 1b       	sub	r26, r18
    1ea4:	b3 0b       	sbc	r27, r19
    1ea6:	e4 0b       	sbc	r30, r20
    1ea8:	f5 0b       	sbc	r31, r21

00001eaa <__udivmodsi4_ep>:
    1eaa:	66 1f       	adc	r22, r22
    1eac:	77 1f       	adc	r23, r23
    1eae:	88 1f       	adc	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	1a 94       	dec	r1
    1eb4:	69 f7       	brne	.-38     	; 0x1e90 <__udivmodsi4_loop>
    1eb6:	60 95       	com	r22
    1eb8:	70 95       	com	r23
    1eba:	80 95       	com	r24
    1ebc:	90 95       	com	r25
    1ebe:	9b 01       	movw	r18, r22
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	bd 01       	movw	r22, r26
    1ec4:	cf 01       	movw	r24, r30
    1ec6:	08 95       	ret

00001ec8 <_exit>:
    1ec8:	f8 94       	cli

00001eca <__stop_program>:
    1eca:	ff cf       	rjmp	.-2      	; 0x1eca <__stop_program>
